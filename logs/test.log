2020-06-30 14:11:47,849 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 14:11:47,976 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 14:11:47,976 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-06-30 14:11:47,977 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 14:11:48,018 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 14:11:48,084 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-06-30 14:11:48,085 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-06-30 14:11:48,085 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 14:11:48,123 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 14:11:48,187 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-06-30 14:11:48,187 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-06-30 14:11:48,187 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 14:11:48,225 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 14:11:48,283 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-06-30 14:11:48,283 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-06-30 14:11:48,283 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 14:11:48,323 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 14:11:48,393 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 14:11:48,394 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 14:11:48,394 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 14:11:48,431 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 14:11:48,509 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 14:11:48,510 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 14:11:48,510 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 14:11:48,555 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 14:11:48,622 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 14:11:48,622 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 14:11:48,622 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 16:07:20,973 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 16:07:21,088 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 16:07:21,089 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:07:21,089 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:21,132 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 16:07:21,241 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 16:07:21,241 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:07:21,241 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:21,283 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 16:07:21,500 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-06-30 16:07:21,501 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:07:21,570 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 16:07:21,639 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 16:07:21,639 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 16:07:21,639 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:21,682 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 16:07:21,761 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-06-30 16:07:21,761 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-06-30 16:07:21,761 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:21,804 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 16:07:21,874 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-06-30 16:07:21,874 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-06-30 16:07:21,874 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:21,916 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 16:07:22,035 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-06-30 16:07:22,035 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-06-30 16:07:22,035 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:22,077 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第8条测试用例==================================
2020-06-30 16:07:22,151 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 16:07:22,151 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 16:07:22,151 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:22,193 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第9条测试用例==================================
2020-06-30 16:07:22,257 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 16:07:22,257 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 16:07:22,257 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:22,299 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第10条测试用例==================================
2020-06-30 16:07:22,377 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 16:07:22,377 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 16:07:22,377 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:22,420 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第11条测试用例==================================
2020-06-30 16:07:22,544 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-06-30 16:07:22,544 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:07:22,601 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第12条测试用例==================================
2020-06-30 16:07:22,661 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-06-30 16:07:22,661 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-06-30 16:07:22,661 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:22,714 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第13条测试用例==================================
2020-06-30 16:07:22,779 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-06-30 16:07:22,779 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-06-30 16:07:22,779 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:22,821 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第14条测试用例==================================
2020-06-30 16:07:22,933 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-06-30 16:07:22,933 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:07:22,991 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第15条测试用例==================================
2020-06-30 16:07:23,062 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-06-30 16:07:23,062 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-06-30 16:07:23,062 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:23,103 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第16条测试用例==================================
2020-06-30 16:07:23,172 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-06-30 16:07:23,172 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-06-30 16:07:23,172 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:07:23,214 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第17条测试用例==================================
2020-06-30 16:09:18,526 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 16:09:18,684 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 16:09:18,684 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:09:18,684 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:18,728 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 16:09:18,849 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 16:09:18,849 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:09:18,849 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:18,898 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 16:09:19,014 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-06-30 16:09:19,015 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:09:19,015 - test_addGoods.py - [line:55] - ERROR: 用例执行失败
2020-06-30 16:09:19,056 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 16:09:19,126 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 16:09:19,126 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 16:09:19,127 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:19,169 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 16:09:19,222 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-06-30 16:09:19,222 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-06-30 16:09:19,223 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:19,267 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 16:09:19,330 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-06-30 16:09:19,330 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-06-30 16:09:19,330 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:19,373 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 16:09:19,446 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-06-30 16:09:19,446 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-06-30 16:09:19,446 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:19,491 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第8条测试用例==================================
2020-06-30 16:09:19,564 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 16:09:19,564 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 16:09:19,564 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:19,607 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第9条测试用例==================================
2020-06-30 16:09:19,682 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 16:09:19,682 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 16:09:19,682 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:19,727 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第10条测试用例==================================
2020-06-30 16:09:19,804 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 16:09:19,804 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 16:09:19,804 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:19,846 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第11条测试用例==================================
2020-06-30 16:09:19,979 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-06-30 16:09:19,979 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:09:19,979 - test_addGoods.py - [line:55] - ERROR: 用例执行失败
2020-06-30 16:09:20,033 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第12条测试用例==================================
2020-06-30 16:09:20,090 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-06-30 16:09:20,090 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-06-30 16:09:20,090 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:20,132 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第13条测试用例==================================
2020-06-30 16:09:20,196 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-06-30 16:09:20,197 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-06-30 16:09:20,197 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:20,243 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第14条测试用例==================================
2020-06-30 16:09:20,363 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-06-30 16:09:20,363 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:09:20,363 - test_addGoods.py - [line:55] - ERROR: 用例执行失败
2020-06-30 16:09:20,407 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第15条测试用例==================================
2020-06-30 16:09:20,462 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-06-30 16:09:20,462 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-06-30 16:09:20,462 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:20,509 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第16条测试用例==================================
2020-06-30 16:09:20,593 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-06-30 16:09:20,593 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-06-30 16:09:20,593 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:09:20,635 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第17条测试用例==================================
2020-06-30 16:09:20,745 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 16:09:20,825 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 16:09:20,826 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-06-30 16:09:20,826 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 16:09:20,868 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 16:09:20,933 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-06-30 16:09:20,934 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-06-30 16:09:20,934 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 16:09:20,976 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 16:09:21,036 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-06-30 16:09:21,036 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-06-30 16:09:21,036 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 16:09:21,078 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 16:09:21,134 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-06-30 16:09:21,134 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-06-30 16:09:21,134 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 16:09:21,179 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 16:09:21,240 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 16:09:21,240 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 16:09:21,240 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 16:09:21,282 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 16:09:21,347 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 16:09:21,347 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 16:09:21,347 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 16:09:21,391 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 16:09:21,456 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 16:09:21,456 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 16:09:21,456 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 16:12:05,745 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 16:12:05,866 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 16:12:05,866 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:12:05,866 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:05,909 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 16:12:06,035 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 16:12:06,036 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:12:06,036 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:06,077 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 16:12:06,202 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-06-30 16:12:06,202 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:12:06,202 - test_addGoods.py - [line:55] - ERROR: 用例执行失败
2020-06-30 16:12:06,246 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 16:12:06,322 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 16:12:06,322 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 16:12:06,323 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:06,364 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 16:12:06,426 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-06-30 16:12:06,426 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-06-30 16:12:06,426 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:06,468 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 16:12:06,527 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-06-30 16:12:06,527 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-06-30 16:12:06,527 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:06,569 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 16:12:06,632 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-06-30 16:12:06,632 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-06-30 16:12:06,632 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:06,675 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第8条测试用例==================================
2020-06-30 16:12:06,735 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 16:12:06,735 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 16:12:06,735 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:06,777 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第9条测试用例==================================
2020-06-30 16:12:06,854 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 16:12:06,855 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 16:12:06,855 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:06,896 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第10条测试用例==================================
2020-06-30 16:12:06,972 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 16:12:06,973 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 16:12:06,973 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:07,017 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第11条测试用例==================================
2020-06-30 16:12:07,130 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-06-30 16:12:07,130 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:12:07,130 - test_addGoods.py - [line:55] - ERROR: 用例执行失败
2020-06-30 16:12:07,171 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第12条测试用例==================================
2020-06-30 16:12:07,237 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-06-30 16:12:07,237 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-06-30 16:12:07,238 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:07,284 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第13条测试用例==================================
2020-06-30 16:12:07,430 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-06-30 16:12:07,431 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-06-30 16:12:07,431 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:07,493 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第14条测试用例==================================
2020-06-30 16:12:07,611 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-06-30 16:12:07,611 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:12:07,611 - test_addGoods.py - [line:55] - ERROR: 用例执行失败
2020-06-30 16:12:07,654 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第15条测试用例==================================
2020-06-30 16:12:07,712 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-06-30 16:12:07,712 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-06-30 16:12:07,712 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:07,753 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第16条测试用例==================================
2020-06-30 16:12:07,808 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-06-30 16:12:07,809 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-06-30 16:12:07,809 - test_addGoods.py - [line:51] - INFO: 用例执行通过
2020-06-30 16:12:07,850 - test_addGoods.py - [line:33] - INFO: ==================================开始执行第17条测试用例==================================
2020-06-30 16:12:07,956 - test_addGoods.py - [line:44] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-06-30 16:12:07,956 - test_addGoods.py - [line:45] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 16:12:07,957 - test_addGoods.py - [line:55] - ERROR: 用例执行失败
2020-06-30 18:02:41,649 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 18:02:41,739 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:02:41,740 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:02:41,740 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:41,785 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 18:02:41,876 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:02:41,876 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:02:41,876 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:41,916 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 18:02:42,023 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-06-30 18:02:42,023 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:02:42,023 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:02:42,065 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 18:02:42,132 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 18:02:42,132 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 18:02:42,132 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:42,173 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 18:02:42,244 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-06-30 18:02:42,244 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-06-30 18:02:42,244 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:42,286 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 18:02:42,341 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-06-30 18:02:42,341 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-06-30 18:02:42,341 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:42,385 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 18:02:42,468 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-06-30 18:02:42,468 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-06-30 18:02:42,469 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:42,516 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-06-30 18:02:42,577 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 18:02:42,578 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 18:02:42,578 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:42,619 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-06-30 18:02:42,699 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 18:02:42,700 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 18:02:42,700 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:42,739 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-06-30 18:02:42,817 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 18:02:42,817 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 18:02:42,817 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:42,860 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-06-30 18:02:42,975 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-06-30 18:02:42,975 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:02:42,975 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:02:43,025 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-06-30 18:02:43,083 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-06-30 18:02:43,083 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-06-30 18:02:43,083 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:43,125 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-06-30 18:02:43,181 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-06-30 18:02:43,181 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-06-30 18:02:43,181 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:43,223 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-06-30 18:02:43,339 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-06-30 18:02:43,339 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:02:43,339 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:02:43,382 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-06-30 18:02:43,439 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-06-30 18:02:43,440 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-06-30 18:02:43,440 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:43,485 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-06-30 18:02:43,545 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-06-30 18:02:43,545 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-06-30 18:02:43,545 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:02:43,587 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-06-30 18:02:43,695 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-06-30 18:02:43,695 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:02:43,695 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:02:43,736 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 18:02:43,810 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:02:43,810 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-06-30 18:02:43,810 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:02:43,855 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 18:02:43,917 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-06-30 18:02:43,917 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-06-30 18:02:43,917 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:02:43,959 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 18:02:44,019 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-06-30 18:02:44,019 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-06-30 18:02:44,019 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:02:44,060 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 18:02:44,125 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-06-30 18:02:44,125 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-06-30 18:02:44,125 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:02:44,166 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 18:02:44,243 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:02:44,243 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:02:44,243 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:02:44,284 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 18:02:44,354 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:02:44,354 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:02:44,354 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:02:44,395 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 18:02:44,463 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:02:44,463 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:02:44,463 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:02:45,382 - run.py - [line:41] - INFO: 邮件发送失败
2020-06-30 18:09:03,365 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 18:09:03,468 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:09:03,468 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:09:03,468 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:03,512 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 18:09:03,606 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:09:03,607 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:09:03,607 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:03,650 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 18:09:03,755 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-06-30 18:09:03,755 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:09:03,755 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:09:03,797 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 18:09:03,862 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 18:09:03,862 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 18:09:03,862 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:03,916 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 18:09:03,978 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-06-30 18:09:03,978 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-06-30 18:09:03,978 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:04,019 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 18:09:04,084 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-06-30 18:09:04,084 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-06-30 18:09:04,084 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:04,127 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 18:09:04,199 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-06-30 18:09:04,200 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-06-30 18:09:04,200 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:04,241 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-06-30 18:09:04,307 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 18:09:04,308 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 18:09:04,308 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:04,352 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-06-30 18:09:04,441 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 18:09:04,441 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 18:09:04,441 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:04,482 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-06-30 18:09:04,559 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 18:09:04,559 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 18:09:04,559 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:04,602 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-06-30 18:09:04,706 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-06-30 18:09:04,706 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:09:04,707 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:09:04,763 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-06-30 18:09:04,828 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-06-30 18:09:04,828 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-06-30 18:09:04,828 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:04,870 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-06-30 18:09:04,939 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-06-30 18:09:04,939 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-06-30 18:09:04,939 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:04,980 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-06-30 18:09:05,081 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-06-30 18:09:05,082 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:09:05,082 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:09:05,124 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-06-30 18:09:05,181 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-06-30 18:09:05,181 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-06-30 18:09:05,181 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:05,223 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-06-30 18:09:05,280 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-06-30 18:09:05,280 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-06-30 18:09:05,280 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:09:05,324 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-06-30 18:09:05,437 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-06-30 18:09:05,437 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:09:05,437 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:09:05,479 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 18:09:05,550 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:09:05,550 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-06-30 18:09:05,550 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:09:05,594 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 18:09:05,662 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-06-30 18:09:05,662 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-06-30 18:09:05,662 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:09:05,703 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 18:09:05,762 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-06-30 18:09:05,762 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-06-30 18:09:05,762 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:09:05,805 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 18:09:05,859 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-06-30 18:09:05,859 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-06-30 18:09:05,859 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:09:05,900 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 18:09:05,966 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:09:05,966 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:09:05,966 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:09:06,008 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 18:09:06,084 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:09:06,084 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:09:06,085 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:09:06,137 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 18:09:06,204 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:09:06,204 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:09:06,204 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:09:08,998 - run.py - [line:39] - INFO: 邮件发送成功
2020-06-30 18:29:50,643 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 18:29:50,744 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:29:50,744 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:29:50,745 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:50,790 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 18:29:50,885 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:29:50,885 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:29:50,886 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:50,927 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 18:29:51,049 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-06-30 18:29:51,049 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:29:51,049 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:29:51,091 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 18:29:51,153 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 18:29:51,153 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 18:29:51,154 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:51,195 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 18:29:51,256 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-06-30 18:29:51,257 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-06-30 18:29:51,257 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:51,299 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 18:29:51,355 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-06-30 18:29:51,355 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-06-30 18:29:51,355 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:51,396 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 18:29:51,466 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-06-30 18:29:51,466 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-06-30 18:29:51,466 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:51,507 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-06-30 18:29:51,577 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-06-30 18:29:51,577 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-06-30 18:29:51,577 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:51,619 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-06-30 18:29:51,694 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 18:29:51,695 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 18:29:51,695 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:51,737 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-06-30 18:29:51,808 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-06-30 18:29:51,808 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-06-30 18:29:51,808 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:51,850 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-06-30 18:29:51,957 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-06-30 18:29:51,957 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:29:51,957 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:29:52,010 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-06-30 18:29:52,079 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-06-30 18:29:52,079 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-06-30 18:29:52,079 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:52,120 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-06-30 18:29:52,185 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-06-30 18:29:52,185 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-06-30 18:29:52,185 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:52,228 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-06-30 18:29:52,371 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-06-30 18:29:52,371 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:29:52,371 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:29:52,413 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-06-30 18:29:52,475 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-06-30 18:29:52,475 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-06-30 18:29:52,475 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:52,517 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-06-30 18:29:52,577 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-06-30 18:29:52,577 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-06-30 18:29:52,578 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-06-30 18:29:52,621 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-06-30 18:29:52,728 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-06-30 18:29:52,728 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-06-30 18:29:52,728 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-06-30 18:29:52,769 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-06-30 18:29:52,849 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-06-30 18:29:52,849 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-06-30 18:29:52,849 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:29:52,891 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-06-30 18:29:52,966 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-06-30 18:29:52,966 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-06-30 18:29:52,966 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:29:53,008 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-06-30 18:29:53,073 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-06-30 18:29:53,073 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-06-30 18:29:53,073 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:29:53,115 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-06-30 18:29:53,195 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-06-30 18:29:53,195 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-06-30 18:29:53,195 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:29:53,236 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-06-30 18:29:53,296 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:29:53,296 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:29:53,296 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:29:53,338 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-06-30 18:29:53,414 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:29:53,415 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:29:53,415 - test_login.py - [line:39] - INFO: 用例执行通过
2020-06-30 18:29:53,461 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-06-30 18:29:53,527 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-06-30 18:29:53,527 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-06-30 18:29:53,527 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:26:51,670 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-01 15:26:51,776 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:26:51,776 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:26:51,776 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:51,827 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-01 15:26:51,930 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:26:51,930 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:26:51,930 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:51,971 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-01 15:26:52,069 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-01 15:26:52,069 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:26:52,069 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:26:52,112 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-01 15:26:52,177 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-01 15:26:52,177 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-01 15:26:52,177 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:52,217 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-01 15:26:52,279 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-01 15:26:52,279 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-07-01 15:26:52,279 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:52,321 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-01 15:26:52,375 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-01 15:26:52,375 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-07-01 15:26:52,375 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:52,416 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-01 15:26:52,493 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-01 15:26:52,493 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-07-01 15:26:52,493 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:52,534 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-01 15:26:52,599 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-01 15:26:52,600 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-01 15:26:52,600 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:52,641 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-01 15:26:52,748 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-01 15:26:52,748 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-01 15:26:52,748 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:52,790 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-01 15:26:52,874 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-01 15:26:52,875 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-01 15:26:52,875 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:52,916 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-01 15:26:53,019 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-01 15:26:53,019 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:26:53,020 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:26:53,070 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-01 15:26:53,139 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-01 15:26:53,140 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-07-01 15:26:53,140 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:53,182 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-01 15:26:53,245 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-01 15:26:53,245 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-07-01 15:26:53,245 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:53,288 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-01 15:26:53,391 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-01 15:26:53,391 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:26:53,391 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:26:53,432 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-01 15:26:53,491 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-01 15:26:53,491 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-07-01 15:26:53,491 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:53,531 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-01 15:26:53,605 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-01 15:26:53,605 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-07-01 15:26:53,605 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:26:53,646 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-01 15:26:53,755 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-01 15:26:53,755 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:26:53,755 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:26:53,797 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-01 15:26:53,893 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:26:53,893 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-01 15:26:53,894 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:26:53,935 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-01 15:26:54,054 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-01 15:26:54,054 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-01 15:26:54,055 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:26:54,098 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-01 15:26:54,162 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-01 15:26:54,162 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-01 15:26:54,163 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:26:54,204 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-01 15:26:54,269 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-01 15:26:54,270 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-01 15:26:54,270 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:26:54,317 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-01 15:26:54,511 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:26:54,511 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:26:54,511 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:26:54,554 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-01 15:26:54,686 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:26:54,687 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:26:54,687 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:26:54,728 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-01 15:26:54,806 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:26:54,806 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:26:54,806 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:27:28,218 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-01 15:27:28,324 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:27:28,324 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:27:28,324 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:28,368 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-01 15:27:28,474 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:27:28,474 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:27:28,475 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:28,515 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-01 15:27:28,639 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-01 15:27:28,639 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:27:28,639 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:27:28,681 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-01 15:27:28,749 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-01 15:27:28,749 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-01 15:27:28,749 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:28,791 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-01 15:27:28,853 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-01 15:27:28,853 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-07-01 15:27:28,853 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:28,895 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-01 15:27:28,974 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-01 15:27:28,974 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-07-01 15:27:28,974 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:29,015 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-01 15:27:29,080 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-01 15:27:29,080 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-07-01 15:27:29,080 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:29,121 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-01 15:27:29,188 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-01 15:27:29,188 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-01 15:27:29,188 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:29,230 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-01 15:27:29,312 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-01 15:27:29,312 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-01 15:27:29,312 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:29,357 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-01 15:27:29,436 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-01 15:27:29,436 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-01 15:27:29,436 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:29,478 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-01 15:27:29,580 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-01 15:27:29,580 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:27:29,580 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:27:29,633 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-01 15:27:29,699 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-01 15:27:29,699 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-07-01 15:27:29,699 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:29,739 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-01 15:27:29,800 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-01 15:27:29,801 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-07-01 15:27:29,801 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:29,842 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-01 15:27:29,943 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-01 15:27:29,944 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:27:29,944 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:27:29,983 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-01 15:27:30,040 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-01 15:27:30,040 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-07-01 15:27:30,040 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:30,084 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-01 15:27:30,161 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-01 15:27:30,161 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-07-01 15:27:30,161 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:27:30,201 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-01 15:27:30,308 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-01 15:27:30,308 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:27:30,309 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:27:30,352 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-01 15:27:30,442 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:27:30,442 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-01 15:27:30,442 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:27:30,481 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-01 15:27:30,562 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-01 15:27:30,562 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-01 15:27:30,562 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:27:30,606 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-01 15:27:30,667 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-01 15:27:30,667 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-01 15:27:30,667 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:27:30,707 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-01 15:27:30,770 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-01 15:27:30,770 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-01 15:27:30,770 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:27:30,812 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-01 15:27:30,892 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:27:30,892 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:27:30,892 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:27:30,932 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-01 15:27:31,000 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:27:31,000 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:27:31,000 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:27:31,043 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-01 15:27:31,120 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:27:31,121 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:27:31,121 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:27:32,313 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-01 15:29:37,441 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-01 15:29:37,557 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:29:37,557 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:29:37,557 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:37,600 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-01 15:29:37,706 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:29:37,706 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:29:37,706 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:37,748 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-01 15:29:37,851 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-01 15:29:37,851 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:29:37,851 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:29:37,893 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-01 15:29:37,960 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-01 15:29:37,960 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-01 15:29:37,960 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:38,001 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-01 15:29:38,093 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-01 15:29:38,093 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-07-01 15:29:38,093 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:38,134 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-01 15:29:38,204 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-01 15:29:38,204 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-07-01 15:29:38,204 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:38,246 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-01 15:29:38,320 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-01 15:29:38,320 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-07-01 15:29:38,320 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:38,361 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-01 15:29:38,456 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-01 15:29:38,457 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-01 15:29:38,457 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:38,499 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-01 15:29:38,611 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-01 15:29:38,611 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-01 15:29:38,611 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:38,650 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-01 15:29:38,736 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-01 15:29:38,736 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-01 15:29:38,736 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:38,779 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-01 15:29:38,901 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-01 15:29:38,901 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:29:38,901 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:29:38,952 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-01 15:29:39,042 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-01 15:29:39,042 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-07-01 15:29:39,042 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:39,083 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-01 15:29:39,156 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-01 15:29:39,156 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-07-01 15:29:39,156 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:39,198 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-01 15:29:39,322 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-01 15:29:39,322 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:29:39,322 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:29:39,363 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-01 15:29:39,459 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-01 15:29:39,459 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-07-01 15:29:39,459 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:39,501 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-01 15:29:39,571 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-01 15:29:39,571 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-07-01 15:29:39,571 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:29:39,614 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-01 15:29:39,746 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-01 15:29:39,747 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:29:39,747 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:29:39,788 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-01 15:29:39,877 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:29:39,877 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-01 15:29:39,877 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:29:39,918 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-01 15:29:39,985 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-01 15:29:39,985 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-01 15:29:39,985 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:29:40,028 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-01 15:29:40,123 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-01 15:29:40,124 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-01 15:29:40,124 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:29:40,164 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-01 15:29:40,237 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-01 15:29:40,237 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-01 15:29:40,237 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:29:40,279 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-01 15:29:40,373 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:29:40,373 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:29:40,373 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:29:40,414 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-01 15:29:40,512 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:29:40,512 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:29:40,513 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:29:40,555 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-01 15:29:40,634 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-01 15:29:40,634 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-01 15:29:40,634 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-01 15:29:41,814 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-01 15:33:33,199 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-01 15:33:33,309 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:33:33,310 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:33:33,310 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:33,355 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-01 15:33:33,481 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-01 15:33:33,481 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:33:33,481 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:33,523 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-01 15:33:33,633 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-01 15:33:33,634 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:33:33,634 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:33:33,679 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-01 15:33:33,741 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-01 15:33:33,742 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-01 15:33:33,742 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:33,783 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-01 15:33:33,846 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-01 15:33:33,846 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-07-01 15:33:33,846 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:33,887 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-01 15:33:33,948 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-01 15:33:33,948 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-07-01 15:33:33,948 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:33,989 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-01 15:33:34,063 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-01 15:33:34,064 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-07-01 15:33:34,064 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:34,105 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-01 15:33:34,176 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-01 15:33:34,176 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-01 15:33:34,176 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:34,217 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-01 15:33:34,305 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-01 15:33:34,305 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-01 15:33:34,306 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:34,347 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-01 15:33:34,424 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-01 15:33:34,424 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-01 15:33:34,424 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:34,466 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-01 15:33:34,582 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-01 15:33:34,582 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:33:34,583 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:33:34,625 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-01 15:33:34,687 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-01 15:33:34,687 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-07-01 15:33:34,687 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:34,739 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-01 15:33:34,806 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-01 15:33:34,806 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-07-01 15:33:34,806 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:34,847 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-01 15:33:34,954 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-01 15:33:34,954 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:33:34,954 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-01 15:33:34,997 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-01 15:33:35,067 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-01 15:33:35,068 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-07-01 15:33:35,068 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:35,116 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-01 15:33:35,180 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-01 15:33:35,180 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-07-01 15:33:35,181 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-01 15:33:35,222 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-01 15:33:35,356 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-01 15:33:35,356 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': 1}
2020-07-01 15:33:35,356 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 13:32:25,366 - test_getGoodsListByCouponId.py - [line:58] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 13:32:25,367 - test_getGoodsListByCouponId.py - [line:59] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 13:32:25,367 - test_getGoodsListByCouponId.py - [line:64] - INFO: 用例执行通过
2020-07-03 13:33:39,747 - test_getGoodsListByCouponId.py - [line:58] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 13:33:40,774 - test_getGoodsListByCouponId.py - [line:59] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 13:33:47,877 - test_getGoodsListByCouponId.py - [line:67] - ERROR: 用例执行失败
2020-07-03 14:07:28,175 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:07:28,175 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:07:28,176 - test_getGoodsListByCouponId.py - [line:59] - INFO: 用例执行通过
2020-07-03 14:07:28,319 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:07:28,319 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:07:28,319 - test_getGoodsListByCouponId.py - [line:59] - INFO: 用例执行通过
2020-07-03 14:07:28,463 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-03 14:07:28,464 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:07:28,464 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:07:28,637 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-03 14:07:28,637 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:07:28,637 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:07:28,844 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-03 14:07:28,844 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:07:28,844 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:07:29,026 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-03 14:07:29,026 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:07:29,026 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:07:29,183 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-03 14:07:29,183 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:07:29,183 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:07:29,337 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-03 14:07:29,337 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:07:29,338 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:07:29,493 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-03 14:07:29,493 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:07:29,493 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:07:29,660 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-03 14:07:29,661 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 10003, 'msg': "请求类型错误：Request method 'POST' not supported", 'data': None}
2020-07-03 14:07:29,661 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:07:29,792 - test_getGoodsListByCouponId.py - [line:53] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-03 14:07:29,792 - test_getGoodsListByCouponId.py - [line:54] - INFO: 实际结果是：{'code': 10003, 'msg': "请求类型错误：Request method 'POST' not supported", 'data': None}
2020-07-03 14:07:29,792 - test_getGoodsListByCouponId.py - [line:62] - ERROR: 用例执行失败
2020-07-03 14:12:14,547 - test_getGoodsListByCouponId.py - [line:46] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:12:14,595 - test_getGoodsListByCouponId.py - [line:56] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:12:14,595 - test_getGoodsListByCouponId.py - [line:57] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:12:14,595 - test_getGoodsListByCouponId.py - [line:62] - INFO: 用例执行通过
2020-07-03 14:12:14,770 - test_getGoodsListByCouponId.py - [line:46] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:12:14,805 - test_getGoodsListByCouponId.py - [line:56] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:12:14,805 - test_getGoodsListByCouponId.py - [line:57] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:12:14,805 - test_getGoodsListByCouponId.py - [line:62] - INFO: 用例执行通过
2020-07-03 14:12:14,964 - test_getGoodsListByCouponId.py - [line:46] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:12:14,999 - test_getGoodsListByCouponId.py - [line:56] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:12:14,999 - test_getGoodsListByCouponId.py - [line:57] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:12:14,999 - test_getGoodsListByCouponId.py - [line:62] - INFO: 用例执行通过
2020-07-03 14:15:21,937 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:15:21,993 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:15:21,993 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:15:21,993 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:15:22,142 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:15:22,176 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:15:22,177 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:15:22,177 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:15:22,314 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:15:22,348 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:15:22,348 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:15:22,349 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:18:59,474 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:18:59,532 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:18:59,532 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:18:59,532 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:18:59,692 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:18:59,733 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:18:59,733 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:18:59,734 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:18:59,871 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:18:59,923 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:18:59,923 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:18:59,923 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:19:00,060 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:19:00,091 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-03 14:19:00,091 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present", 'data': None}
2020-07-03 14:19:00,091 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:10,975 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:20:11,021 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:20:11,022 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:20:11,022 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:11,169 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:20:11,208 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:20:11,208 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:20:11,208 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:11,334 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:20:11,369 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:20:11,369 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:20:11,369 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:11,517 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:20:11,548 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-03 14:20:11,548 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present", 'data': None}
2020-07-03 14:20:11,548 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:44,613 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:20:44,614 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:20:44,614 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:20:44,615 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:20:44,615 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:20:44,616 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:20:44,616 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:20:44,616 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-03 14:20:44,616 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-03 14:20:44,617 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-03 14:20:44,617 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-03 14:20:44,617 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-03 14:20:44,617 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-03 14:20:44,618 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-03 14:20:44,618 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-03 14:20:44,618 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-03 14:20:44,618 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-03 14:20:45,230 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:20:45,283 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:20:45,284 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:20:45,284 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:45,458 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:20:45,491 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:20:45,491 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:20:45,491 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:45,641 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:20:45,683 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:20:45,684 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:20:45,684 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:45,821 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:20:45,859 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-03 14:20:45,859 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present", 'data': None}
2020-07-03 14:20:45,859 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:20:45,910 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:20:45,911 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:20:45,911 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:20:45,911 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:20:45,912 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:20:45,912 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:20:45,912 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:20:48,200 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-03 14:21:58,135 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:21:58,137 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:21:58,138 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:21:58,139 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:21:58,140 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:21:58,142 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:21:58,144 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:22:38,816 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:22:38,817 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:22:38,817 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:22:38,817 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:22:38,817 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:22:38,818 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:22:38,818 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:22:38,818 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-03 14:22:38,819 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-03 14:22:38,819 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-03 14:22:38,819 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-03 14:22:38,819 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-03 14:22:38,820 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-03 14:22:38,820 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-03 14:22:38,820 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-03 14:22:38,820 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-03 14:22:38,821 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-03 14:22:38,968 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:22:39,024 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:22:39,024 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:22:39,024 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:22:39,170 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:22:39,206 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:22:39,207 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:22:39,207 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:22:39,309 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:22:39,343 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:22:39,344 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:22:39,344 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:22:39,457 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:22:39,486 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-03 14:22:39,486 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present", 'data': None}
2020-07-03 14:22:39,486 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:22:39,511 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:22:39,696 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:22:39,696 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-03 14:22:39,696 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:22:39,719 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:22:39,815 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-03 14:22:39,815 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-03 14:22:39,815 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:22:39,838 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:22:39,908 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-03 14:22:39,908 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-03 14:22:39,908 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:22:39,932 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:22:39,995 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-03 14:22:39,995 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-03 14:22:39,996 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:22:40,019 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:22:40,083 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:22:40,083 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:22:40,083 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:22:40,116 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:22:40,201 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:22:40,201 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:22:40,201 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:22:40,225 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:22:40,292 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:22:40,292 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:22:40,292 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:22:42,398 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-03 14:23:20,081 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:23:20,289 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:23:20,289 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:20,289 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:20,314 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:23:20,469 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:23:20,470 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:20,470 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:20,492 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:23:20,571 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-03 14:23:20,571 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:20,571 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:20,596 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:23:20,670 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-03 14:23:20,670 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:20,670 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:20,693 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:23:20,794 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-03 14:23:20,794 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:20,794 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:20,819 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:23:20,913 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-03 14:23:20,913 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:20,913 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:20,937 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:23:21,034 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-03 14:23:21,034 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:21,034 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:21,058 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-03 14:23:21,159 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-03 14:23:21,159 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:21,159 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:21,183 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-03 14:23:21,310 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-03 14:23:21,310 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:21,310 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:21,334 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-03 14:23:21,425 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-03 14:23:21,426 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:21,426 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:21,460 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-03 14:23:21,550 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-03 14:23:21,550 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:21,550 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:21,573 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-03 14:23:21,675 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-03 14:23:21,675 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:21,675 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:21,699 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-03 14:23:21,800 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-03 14:23:21,800 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:21,800 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:21,824 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-03 14:23:21,910 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-03 14:23:21,910 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:21,910 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:21,934 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-03 14:23:22,006 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-03 14:23:22,006 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:22,006 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:22,030 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-03 14:23:22,100 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-03 14:23:22,100 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:22,100 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:22,124 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-03 14:23:22,198 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-03 14:23:22,198 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:23:22,198 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:23:22,350 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:23:22,414 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:23:22,415 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:23:22,415 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:23:22,557 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:23:22,598 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:23:22,598 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:23:22,599 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:23:22,720 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:23:22,754 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:23:22,754 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:23:22,754 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:23:22,887 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:23:22,920 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-03 14:23:22,920 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present", 'data': None}
2020-07-03 14:23:22,920 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:23:22,942 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:23:23,023 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:23:23,023 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-03 14:23:23,023 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:23:23,048 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:23:23,115 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-03 14:23:23,115 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-03 14:23:23,115 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:23:23,138 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:23:23,201 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-03 14:23:23,201 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-03 14:23:23,201 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:23:23,224 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:23:23,293 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-03 14:23:23,293 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-03 14:23:23,294 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:23:23,320 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:23:23,385 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:23:23,385 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:23:23,385 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:23:23,408 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:23:23,479 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:23:23,479 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:23:23,479 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:23:23,504 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:23:23,576 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:23:23,576 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:23:23,576 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:23:25,587 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-03 14:24:01,843 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:24:01,950 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:24:01,950 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:01,951 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:02,000 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:24:02,108 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:24:02,108 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:02,108 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:02,154 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:24:02,231 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-03 14:24:02,231 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:02,231 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:02,278 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:24:02,346 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-03 14:24:02,346 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:02,346 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:02,396 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:24:02,506 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-03 14:24:02,507 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:02,507 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:02,555 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:24:02,646 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-03 14:24:02,647 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:02,647 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:02,694 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:24:02,802 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-03 14:24:02,802 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:02,802 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:02,850 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-03 14:24:02,947 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-03 14:24:02,947 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:02,948 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:03,001 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-03 14:24:03,106 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-03 14:24:03,107 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:03,107 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:03,167 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-03 14:24:03,264 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-03 14:24:03,264 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:03,264 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:03,310 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-03 14:24:03,407 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-03 14:24:03,407 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:03,407 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:03,453 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-03 14:24:03,555 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-03 14:24:03,555 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:03,555 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:03,606 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-03 14:24:03,712 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-03 14:24:03,713 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:03,713 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:03,759 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-03 14:24:03,864 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-03 14:24:03,864 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:03,864 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:03,911 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-03 14:24:03,989 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-03 14:24:03,990 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:03,990 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:04,036 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-03 14:24:04,112 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-03 14:24:04,112 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:04,112 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:04,160 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-03 14:24:04,226 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-03 14:24:04,226 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-03 14:24:04,226 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-03 14:24:04,420 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:24:04,470 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:24:04,470 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': [{'whetherHaiTao': False, 'preTags': [], 'goodsId': 10, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '178', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/4889e2cb502845fc99ad1520aeb7840f.jpg?x-oss-process=style/q60', 'goodsName': '男士休闲裤潮流束脚卫裤宽松百搭运动长裤小脚哈伦裤', 'goodsPriceRebate': '0'}, {'whetherHaiTao': False, 'preTags': [], 'goodsId': 121, 'whetherThirdParty': False, 'goodsFactoryPrice': 0, 'goodsTag': '', 'tags': [], 'remainStartSellTime': 0, 'videoCoverUrl': '', 'videoUrl': '', 'goodsPrice': '89', 'goodsDefaultImage': 'https://lb-pic.oss-cn-hangzhou.aliyuncs.com/brand/53dc6c15ce4446848a4ab025d4de78b8.jpg?x-oss-process=style/q60', 'goodsName': 'LilBetter 男式t恤宽松港风潮牌印花半袖潮流帅气五分袖纯棉短袖t恤男', 'goodsPriceRebate': '21'}]}
2020-07-03 14:24:04,471 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:24:04,641 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:24:04,676 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:24:04,676 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:24:04,676 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:24:04,821 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:24:04,857 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-03 14:24:04,857 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 60001, 'msg': '优惠券不存在', 'data': None}
2020-07-03 14:24:04,857 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:24:05,009 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:24:05,046 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-03 14:24:05,047 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present", 'data': None}
2020-07-03 14:24:05,047 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-03 14:24:05,094 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-03 14:24:05,187 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-03 14:24:05,188 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-03 14:24:05,188 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:24:05,234 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-03 14:24:05,309 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-03 14:24:05,309 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-03 14:24:05,309 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:24:05,354 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-03 14:24:05,419 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-03 14:24:05,419 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-03 14:24:05,419 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:24:05,470 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-03 14:24:05,539 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-03 14:24:05,539 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-03 14:24:05,540 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:24:05,589 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-03 14:24:05,656 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:24:05,657 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:24:05,657 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:24:05,703 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-03 14:24:05,770 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:24:05,770 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:24:05,770 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:24:05,817 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-03 14:24:05,888 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-03 14:24:05,888 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-03 14:24:05,888 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-03 14:24:08,557 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-14 13:55:29,860 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-14 13:55:30,218 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-14 13:55:30,218 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 13:55:30,219 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 13:55:30,343 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-14 13:55:30,599 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-14 13:55:30,599 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 13:55:30,600 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 13:55:30,671 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-14 13:55:30,887 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-14 13:55:30,888 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 13:55:30,888 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 13:55:30,958 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-14 13:55:31,049 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-14 13:55:31,049 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-14 13:55:31,050 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:31,116 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-14 13:55:31,184 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-14 13:55:31,184 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-07-14 13:55:31,185 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:31,262 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-14 13:55:31,363 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-14 13:55:31,364 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-07-14 13:55:31,364 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:31,437 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-14 13:55:31,515 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-14 13:55:31,516 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-07-14 13:55:31,516 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:31,588 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-14 13:55:31,672 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-14 13:55:31,672 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-14 13:55:31,673 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:31,759 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-14 13:55:31,876 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-14 13:55:31,877 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-14 13:55:31,877 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:31,938 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-14 13:55:32,031 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-14 13:55:32,032 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-14 13:55:32,032 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:32,104 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-14 13:55:32,346 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-14 13:55:32,347 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 13:55:32,347 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 13:55:32,422 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-14 13:55:32,497 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-14 13:55:32,498 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-07-14 13:55:32,498 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:32,565 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-14 13:55:32,639 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-14 13:55:32,639 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-07-14 13:55:32,639 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:32,711 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-14 13:55:32,949 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-14 13:55:32,950 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 13:55:32,950 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 13:55:33,015 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-14 13:55:33,079 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-14 13:55:33,079 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-07-14 13:55:33,079 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:33,151 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-14 13:55:33,247 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-14 13:55:33,247 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-07-14 13:55:33,248 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 13:55:33,310 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-14 13:55:33,525 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-14 13:55:33,525 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 13:55:33,525 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 13:55:33,802 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-14 13:55:33,891 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-14 13:55:33,892 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-14 13:55:33,892 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-14 13:55:34,198 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-14 13:55:34,247 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-14 13:55:34,248 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-14 13:55:34,248 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-14 13:55:34,443 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-14 13:55:34,485 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-14 13:55:34,485 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-14 13:55:34,485 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-14 13:55:34,653 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-14 13:55:34,695 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-14 13:55:34,695 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-14 13:55:34,696 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-14 13:55:34,762 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-14 13:55:34,853 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-14 13:55:34,853 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-14 13:55:34,854 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 13:55:34,943 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-14 13:55:35,048 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-14 13:55:35,049 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-14 13:55:35,050 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 13:55:35,126 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-14 13:55:35,194 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-14 13:55:35,194 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-14 13:55:35,194 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 13:55:35,265 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-14 13:55:35,339 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-14 13:55:35,340 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-14 13:55:35,340 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 13:55:35,397 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-14 13:55:35,463 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-14 13:55:35,463 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-14 13:55:35,464 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 13:55:35,517 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-14 13:55:35,618 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-14 13:55:35,618 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-14 13:55:35,619 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 13:55:35,685 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-14 13:55:35,763 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-14 13:55:35,764 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-14 13:55:35,764 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 13:55:37,463 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-14 14:13:53,938 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-14 14:13:54,241 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-14 14:13:54,242 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 14:13:54,242 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 14:13:54,337 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-14 14:13:54,650 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-14 14:13:54,651 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 14:13:54,651 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 14:13:54,721 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-14 14:13:54,907 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-14 14:13:54,907 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 14:13:54,907 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 14:13:54,965 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-14 14:13:55,100 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-14 14:13:55,100 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-14 14:13:55,101 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:55,173 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-14 14:13:55,256 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-14 14:13:55,256 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '购买数量不能为0', 'data': None}
2020-07-14 14:13:55,256 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:55,306 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-14 14:13:55,388 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-14 14:13:55,388 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '单次最多购买99个', 'data': None}
2020-07-14 14:13:55,389 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:55,461 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-14 14:13:55,534 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-14 14:13:55,535 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'msg': '该规格的商品不存在！', 'data': None}
2020-07-14 14:13:55,535 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:55,615 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-14 14:13:55,703 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-14 14:13:55,703 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'msg': '该规格的商品已下架', 'data': None}
2020-07-14 14:13:55,703 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:55,770 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-14 14:13:55,862 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-14 14:13:55,863 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-14 14:13:55,863 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:55,945 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-14 14:13:56,051 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-14 14:13:56,052 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'msg': '不存在的赠品', 'data': None}
2020-07-14 14:13:56,052 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:56,117 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-14 14:13:56,397 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-14 14:13:56,398 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 14:13:56,398 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 14:13:56,464 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-14 14:13:56,557 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-14 14:13:56,557 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present", 'data': None}
2020-07-14 14:13:56,558 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:56,642 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-14 14:13:56,726 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-14 14:13:56,726 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present", 'data': None}
2020-07-14 14:13:56,727 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:56,799 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-14 14:13:57,108 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-14 14:13:57,109 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 14:13:57,109 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 14:13:57,184 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-14 14:13:57,296 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-14 14:13:57,297 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"', 'data': None}
2020-07-14 14:13:57,297 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:57,366 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-14 14:13:57,435 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-14 14:13:57,436 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"', 'data': None}
2020-07-14 14:13:57,436 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-07-14 14:13:57,515 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-14 14:13:57,826 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-14 14:13:57,832 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': -1, 'msg': '请求失败，请重试！', 'data': None}
2020-07-14 14:13:57,832 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-14 14:13:58,108 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-14 14:13:58,155 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-14 14:13:58,155 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-14 14:13:58,155 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-14 14:13:58,398 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-14 14:13:58,450 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-14 14:13:58,450 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-14 14:13:58,450 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-14 14:13:58,648 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-14 14:13:58,695 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-14 14:13:58,695 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-14 14:13:58,695 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-14 14:13:58,867 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-14 14:13:58,917 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-14 14:13:58,917 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-14 14:13:58,917 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-14 14:13:58,997 - test_login.py - [line:22] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-14 14:13:59,141 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-14 14:13:59,142 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-14 14:13:59,143 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 14:13:59,218 - test_login.py - [line:22] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-14 14:13:59,330 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-14 14:13:59,331 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-14 14:13:59,331 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 14:13:59,416 - test_login.py - [line:22] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-14 14:13:59,485 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-14 14:13:59,485 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-14 14:13:59,486 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 14:13:59,578 - test_login.py - [line:22] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-14 14:13:59,651 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-14 14:13:59,652 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-14 14:13:59,652 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 14:13:59,724 - test_login.py - [line:22] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-14 14:13:59,809 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-14 14:13:59,809 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-14 14:13:59,810 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 14:13:59,891 - test_login.py - [line:22] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-14 14:13:59,984 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-14 14:13:59,984 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-14 14:13:59,985 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 14:14:00,051 - test_login.py - [line:22] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-14 14:14:00,141 - test_login.py - [line:32] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-14 14:14:00,142 - test_login.py - [line:33] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-14 14:14:00,142 - test_login.py - [line:39] - INFO: 用例执行通过
2020-07-14 14:14:03,080 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-28 15:23:39,110 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-28 15:23:39,192 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-28 15:23:39,192 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,192 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,222 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-28 15:23:39,283 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-28 15:23:39,283 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,283 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,305 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-28 15:23:39,371 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-07-28 15:23:39,371 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,371 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,395 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-28 15:23:39,460 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-28 15:23:39,460 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,460 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,482 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-28 15:23:39,543 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-07-28 15:23:39,543 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,543 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,565 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-28 15:23:39,626 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-07-28 15:23:39,626 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,626 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,662 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-28 15:23:39,720 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-07-28 15:23:39,721 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,721 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,742 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-07-28 15:23:39,802 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-07-28 15:23:39,802 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,802 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,824 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-07-28 15:23:39,882 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-28 15:23:39,882 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,882 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,906 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-07-28 15:23:39,963 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-07-28 15:23:39,963 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:39,964 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:39,985 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-07-28 15:23:40,041 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-07-28 15:23:40,042 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:40,042 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:40,063 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-07-28 15:23:40,131 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-07-28 15:23:40,131 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:40,131 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:40,154 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-07-28 15:23:40,218 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-07-28 15:23:40,218 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:40,218 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:40,241 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-07-28 15:23:40,307 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-07-28 15:23:40,307 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:40,307 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:40,329 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-07-28 15:23:40,386 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-07-28 15:23:40,386 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:40,386 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:40,411 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-07-28 15:23:40,471 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-07-28 15:23:40,471 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:40,471 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:40,493 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-07-28 15:23:40,603 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-07-28 15:23:40,604 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 20001, 'msg': '用户信息已过期，请重新登陆！', 'data': None}
2020-07-28 15:23:40,604 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-07-28 15:23:40,776 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-28 15:23:40,821 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-28 15:23:40,822 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-28 15:23:40,823 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-28 15:23:40,969 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-28 15:23:40,999 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-28 15:23:40,999 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-28 15:23:41,000 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-28 15:23:41,106 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-28 15:23:41,135 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-28 15:23:41,135 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-28 15:23:41,136 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-28 15:23:41,245 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-28 15:23:41,283 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-28 15:23:41,283 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-28 15:23:41,284 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-28 15:23:41,315 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-28 15:23:41,381 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-28 15:23:41,381 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'msg': 'deviceNumber为空', 'data': None}
2020-07-28 15:23:41,382 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-07-28 15:23:41,404 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-28 15:23:41,475 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-28 15:23:41,475 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'msg': 'deviceNumber为空', 'data': None}
2020-07-28 15:23:41,475 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-07-28 15:23:41,496 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-28 15:23:41,565 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-28 15:23:41,566 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required String parameter 'loginUsername' is not present", 'data': None}
2020-07-28 15:23:41,566 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-07-28 15:23:41,589 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-28 15:23:41,783 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-28 15:23:41,783 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10004, 'msg': "参数未传或丢失：Required String parameter 'loginPassword' is not present", 'data': None}
2020-07-28 15:23:41,783 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-07-28 15:23:41,806 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-28 15:23:41,873 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-28 15:23:41,873 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'msg': 'deviceNumber为空', 'data': None}
2020-07-28 15:23:41,873 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-07-28 15:23:41,894 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-28 15:23:41,962 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-28 15:23:41,962 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'msg': 'deviceNumber为空', 'data': None}
2020-07-28 15:23:41,962 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-07-28 15:23:41,984 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-28 15:23:42,044 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-28 15:23:42,044 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'msg': 'deviceNumber为空', 'data': None}
2020-07-28 15:23:42,044 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-07-28 15:23:43,041 - run.py - [line:40] - INFO: 邮件发送成功
2020-07-30 14:06:25,447 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-30 14:06:25,653 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-30 14:06:25,654 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-30 14:06:25,654 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-30 14:06:26,103 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-30 14:06:26,136 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-30 14:06:26,136 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-30 14:06:26,136 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-30 14:06:26,524 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-30 14:06:26,559 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-30 14:06:26,559 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-30 14:06:26,559 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-30 14:06:26,801 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-30 14:06:26,840 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-30 14:06:26,840 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-30 14:06:26,841 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-30 16:14:19,615 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-30 16:14:20,133 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-30 16:14:20,133 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 1, 'ip': '', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}}
2020-07-30 16:14:20,134 - test_login.py - [line:40] - INFO: 用例执行通过
2020-07-30 16:14:20,207 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-30 16:14:20,395 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-07-30 16:14:20,396 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册', 'data': None}
2020-07-30 16:14:20,396 - test_login.py - [line:40] - INFO: 用例执行通过
2020-07-30 16:14:20,443 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-30 16:14:20,608 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-07-30 16:14:20,608 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 30005, 'msg': '手机号码不能为空', 'data': None}
2020-07-30 16:14:20,608 - test_login.py - [line:40] - INFO: 用例执行通过
2020-07-30 16:14:20,655 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-30 16:14:20,979 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-07-30 16:14:20,979 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'msg': '密码不能为空', 'data': None}
2020-07-30 16:14:20,979 - test_login.py - [line:40] - INFO: 用例执行通过
2020-07-30 16:14:21,026 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-07-30 16:14:21,262 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-30 16:14:21,262 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-30 16:14:21,262 - test_login.py - [line:40] - INFO: 用例执行通过
2020-07-30 16:14:21,318 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-07-30 16:14:21,412 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-30 16:14:21,413 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-30 16:14:21,413 - test_login.py - [line:40] - INFO: 用例执行通过
2020-07-30 16:14:21,460 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-07-30 16:14:21,533 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-07-30 16:14:21,533 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12005, 'msg': '密码错误', 'data': None}
2020-07-30 16:14:21,533 - test_login.py - [line:40] - INFO: 用例执行通过
2020-07-30 16:15:10,510 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-07-30 16:15:10,593 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-07-30 16:15:10,593 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-30 16:15:10,593 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-07-30 16:15:11,874 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-07-30 16:15:11,918 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-30 16:15:11,919 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-30 16:15:11,919 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-30 16:15:12,104 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-07-30 16:15:12,141 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-07-30 16:15:12,141 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-30 16:15:12,142 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-07-30 16:15:12,317 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-07-30 16:15:12,424 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-07-30 16:15:12,424 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'msg': '成功', 'data': None}
2020-07-30 16:15:12,425 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-08-26 15:23:49,513 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 15:23:50,350 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 16:44:32,973 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 16:44:33,386 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 16:46:12,171 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 16:48:17,842 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 16:56:49,877 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 17:00:51,831 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 17:04:44,725 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 17:06:04,839 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 17:06:59,296 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 17:06:59,676 - test_buyNowCreateOrder.py - [line:64] - INFO: 测试用例执行通过
2020-08-26 17:43:40,104 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 17:43:40,413 - test_buyNowCreateOrder.py - [line:64] - INFO: 测试用例执行通过
2020-08-26 17:43:40,478 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 17:43:40,847 - test_buyNowCreateOrder.py - [line:64] - INFO: 测试用例执行通过
2020-08-26 17:48:05,196 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 17:48:05,534 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-26 17:48:05,534 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-26 17:48:05,534 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例执行通过
2020-08-26 17:48:05,598 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 17:48:05,920 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-26 17:48:05,920 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-26 17:48:05,921 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例执行通过
2020-08-26 19:06:55,461 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:06:55,461 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，未用优惠券
2020-08-26 19:06:55,809 - test_buyNowCreateOrder.py - [line:60] - INFO: 订单实付金额为：69.0000
2020-08-26 19:06:55,809 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的积分为：34
2020-08-26 19:06:55,809 - test_buyNowCreateOrder.py - [line:68] - INFO: 测试用例执行通过
2020-08-26 19:06:55,882 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:06:55,882 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，用全场可用优惠券
2020-08-26 19:06:56,236 - test_buyNowCreateOrder.py - [line:60] - INFO: 订单实付金额为：207.0000
2020-08-26 19:06:56,236 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的积分为：103
2020-08-26 19:06:56,236 - test_buyNowCreateOrder.py - [line:68] - INFO: 测试用例执行通过
2020-08-26 19:06:56,302 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-26 19:06:56,302 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，未用优惠券
2020-08-26 19:06:56,711 - test_buyNowCreateOrder.py - [line:60] - INFO: 订单实付金额为：99.0000
2020-08-26 19:06:56,711 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的积分为：99
2020-08-26 19:06:56,711 - test_buyNowCreateOrder.py - [line:68] - INFO: 测试用例执行通过
2020-08-26 19:07:24,702 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:07:24,703 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，未用优惠券
2020-08-26 19:07:25,054 - test_buyNowCreateOrder.py - [line:60] - INFO: 订单实付金额为：69.0000
2020-08-26 19:07:25,054 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的积分为：34
2020-08-26 19:07:25,054 - test_buyNowCreateOrder.py - [line:68] - INFO: 测试用例执行通过
2020-08-26 19:07:25,123 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:07:25,123 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，用全场可用优惠券
2020-08-26 19:07:25,482 - test_buyNowCreateOrder.py - [line:60] - INFO: 订单实付金额为：207.0000
2020-08-26 19:07:25,483 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的积分为：103
2020-08-26 19:07:25,483 - test_buyNowCreateOrder.py - [line:68] - INFO: 测试用例执行通过
2020-08-26 19:07:25,537 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-26 19:07:25,537 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，未用优惠券
2020-08-26 19:07:25,900 - test_buyNowCreateOrder.py - [line:60] - INFO: 订单实付金额为：99.0000
2020-08-26 19:07:25,900 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的积分为：99
2020-08-26 19:07:25,900 - test_buyNowCreateOrder.py - [line:72] - ERROR: 测试用例执行失败
2020-08-26 19:28:36,186 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:28:36,186 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，未用优惠券
2020-08-26 19:28:36,633 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:28:36,633 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，用全场可用优惠券
2020-08-26 19:28:37,055 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-26 19:28:37,056 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，未用优惠券
2020-08-26 19:33:21,693 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:33:21,693 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-26 19:33:22,139 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:33:22,139 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-26 19:34:45,902 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:34:45,902 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-26 19:34:46,346 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:34:46,346 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-26 19:34:46,784 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:34:46,784 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-26 19:34:47,247 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-26 19:34:47,247 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-26 19:36:13,493 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:36:13,493 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-26 19:36:13,915 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:36:13,916 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-26 19:36:14,357 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:36:14,357 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-26 19:36:14,848 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-26 19:36:14,848 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-26 19:40:38,500 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:40:38,500 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-26 19:40:38,941 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:40:38,941 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-26 19:40:39,346 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:40:39,346 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-26 19:40:39,787 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-26 19:40:39,788 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-26 19:41:23,765 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:41:23,765 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-26 19:41:24,171 - test_buyNowCreateOrder.py - [line:80] - INFO: 测试用例执行通过
2020-08-26 19:41:24,238 - test_buyNowCreateOrder.py - [line:42] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:41:24,238 - test_buyNowCreateOrder.py - [line:43] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-26 19:56:32,716 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:56:32,716 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-26 19:56:33,055 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-26 19:56:33,055 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-26 19:56:33,068 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：
2020-08-26 19:56:33,068 - test_buyNowCreateOrder.py - [line:82] - INFO: 测试用例执行通过
2020-08-26 19:56:33,124 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:56:33,124 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-26 19:56:33,485 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-26 19:56:33,485 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-26 19:56:33,496 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：
2020-08-26 19:56:33,508 - test_buyNowCreateOrder.py - [line:78] - INFO: 优惠券的金额为：50.00
2020-08-26 19:56:33,508 - test_buyNowCreateOrder.py - [line:86] - ERROR: 测试用例执行失败
2020-08-26 19:56:33,587 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-26 19:56:33,587 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-26 19:56:33,930 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-26 19:56:33,930 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-26 19:56:33,940 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：
2020-08-26 19:56:33,954 - test_buyNowCreateOrder.py - [line:78] - INFO: 优惠券的金额为：50.00
2020-08-26 19:56:33,954 - test_buyNowCreateOrder.py - [line:86] - ERROR: 测试用例执行失败
2020-08-26 19:56:34,057 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-26 19:56:34,058 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-26 19:56:34,425 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：99.0000
2020-08-26 19:56:34,426 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：99
2020-08-26 19:56:34,438 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：
2020-08-26 19:56:34,438 - test_buyNowCreateOrder.py - [line:82] - INFO: 测试用例执行通过
2020-08-26 19:58:44,399 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-26 19:58:44,400 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-26 19:58:44,807 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-26 19:58:44,807 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-27 09:38:27,093 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 09:38:27,093 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 09:38:27,977 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-27 09:38:27,978 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-27 09:38:27,989 - test_buyNowCreateOrder.py - [line:74] - INFO: 订单的原价格为：
2020-08-27 09:38:27,989 - test_buyNowCreateOrder.py - [line:84] - INFO: 测试用例执行通过
2020-08-27 09:38:28,044 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:38:28,044 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 09:38:28,439 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:38:28,439 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:38:28,451 - test_buyNowCreateOrder.py - [line:74] - INFO: 订单的原价格为：
2020-08-27 09:38:28,478 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:38:28,478 - test_buyNowCreateOrder.py - [line:88] - ERROR: 测试用例执行失败
2020-08-27 09:38:28,541 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:38:28,541 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 09:38:28,908 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:38:28,909 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:38:28,921 - test_buyNowCreateOrder.py - [line:74] - INFO: 订单的原价格为：
2020-08-27 09:38:28,934 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:38:28,935 - test_buyNowCreateOrder.py - [line:88] - ERROR: 测试用例执行失败
2020-08-27 09:38:29,031 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 09:38:29,031 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 09:38:29,394 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：99.0000
2020-08-27 09:38:29,394 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：99
2020-08-27 09:38:29,404 - test_buyNowCreateOrder.py - [line:74] - INFO: 订单的原价格为：
2020-08-27 09:38:29,404 - test_buyNowCreateOrder.py - [line:84] - INFO: 测试用例执行通过
2020-08-27 09:44:44,966 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 09:44:44,966 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 09:44:45,346 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-27 09:44:45,346 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-27 09:44:45,357 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：69.00
2020-08-27 09:44:45,358 - test_buyNowCreateOrder.py - [line:84] - INFO: 测试用例执行通过
2020-08-27 09:44:45,411 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:44:45,412 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 09:44:45,747 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:44:45,747 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:44:45,757 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：69.00
2020-08-27 09:44:45,769 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:44:45,769 - test_buyNowCreateOrder.py - [line:88] - ERROR: 测试用例执行失败
2020-08-27 09:44:45,828 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:44:45,828 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 09:44:46,158 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:44:46,158 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:44:46,167 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：69.00
2020-08-27 09:44:46,180 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:44:46,180 - test_buyNowCreateOrder.py - [line:88] - ERROR: 测试用例执行失败
2020-08-27 09:44:46,281 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 09:44:46,281 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 09:44:46,672 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：99.0000
2020-08-27 09:44:46,672 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：99
2020-08-27 09:44:46,682 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：99.00
2020-08-27 09:44:46,683 - test_buyNowCreateOrder.py - [line:84] - INFO: 测试用例执行通过
2020-08-27 09:45:34,517 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 09:45:34,517 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 09:45:34,891 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-27 09:45:34,891 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-27 09:45:34,903 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：69.00
2020-08-27 09:45:34,904 - test_buyNowCreateOrder.py - [line:84] - INFO: 测试用例执行通过
2020-08-27 09:45:34,963 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:45:34,963 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 09:45:35,336 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:45:35,336 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:45:35,348 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 09:45:35,360 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:45:35,360 - test_buyNowCreateOrder.py - [line:88] - ERROR: 测试用例执行失败
2020-08-27 09:45:35,423 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:45:35,424 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 09:45:35,754 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:45:35,754 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:45:35,768 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 09:45:35,781 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:45:35,781 - test_buyNowCreateOrder.py - [line:88] - ERROR: 测试用例执行失败
2020-08-27 09:45:35,866 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 09:45:35,866 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 09:45:36,203 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：99.0000
2020-08-27 09:45:36,204 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：99
2020-08-27 09:45:36,215 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：99.00
2020-08-27 09:45:36,215 - test_buyNowCreateOrder.py - [line:84] - INFO: 测试用例执行通过
2020-08-27 09:48:46,889 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 09:48:46,889 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 09:48:47,209 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-27 09:48:47,209 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-27 09:48:47,220 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：69.00
2020-08-27 09:48:47,279 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:48:47,279 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 09:48:47,645 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:48:47,645 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:48:47,655 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 09:48:47,668 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:48:47,668 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：19.00
2020-08-27 09:48:47,668 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 09:48:47,725 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:48:47,726 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 09:48:48,061 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:48:48,061 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:48:48,072 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 09:48:48,085 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:48:48,085 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：19.00
2020-08-27 09:48:48,085 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 09:48:48,172 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 09:48:48,172 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 09:48:48,505 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：99.0000
2020-08-27 09:48:48,505 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：99
2020-08-27 09:48:48,515 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：99.00
2020-08-27 09:49:20,188 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 09:49:20,188 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 09:49:20,583 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-27 09:49:20,584 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-27 09:49:20,596 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：69.00
2020-08-27 09:49:20,596 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 09:49:20,859 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:49:20,859 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 09:49:21,211 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:49:21,211 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:49:21,222 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 09:49:21,234 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:49:21,234 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：19.00
2020-08-27 09:49:21,234 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 09:49:21,297 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:49:21,297 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 09:49:21,659 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:49:21,659 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:49:21,671 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 09:49:21,684 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:49:21,684 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：19.00
2020-08-27 09:49:21,685 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 09:49:21,778 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 09:49:21,778 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 09:49:22,214 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：99.0000
2020-08-27 09:49:22,214 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：99
2020-08-27 09:49:22,226 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：99.00
2020-08-27 09:49:22,226 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 09:55:27,753 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 09:55:27,753 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 09:55:28,118 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-27 09:55:28,119 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-27 09:55:28,129 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：69.00
2020-08-27 09:55:28,129 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 09:55:28,202 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:55:28,202 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 09:55:28,557 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:55:28,557 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:55:28,567 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 09:55:28,579 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:55:28,580 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：157.00
2020-08-27 09:55:28,580 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 09:55:28,649 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 09:55:28,649 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 09:55:28,969 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 09:55:28,969 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 09:55:28,980 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 09:55:28,993 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 09:55:28,993 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：157.00
2020-08-27 09:55:28,994 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 09:55:29,091 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 09:55:29,091 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 09:55:29,438 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：99.0000
2020-08-27 09:55:29,438 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：99
2020-08-27 09:55:29,449 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：99.00
2020-08-27 09:55:29,450 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 10:00:03,749 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:00:03,749 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:00:04,121 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：69.0000
2020-08-27 10:00:04,122 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：34
2020-08-27 10:00:04,132 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：69.00
2020-08-27 10:00:04,132 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 10:00:04,191 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:00:04,192 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:00:04,569 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 10:00:04,569 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 10:00:04,580 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 10:00:04,592 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 10:00:04,592 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：157.00
2020-08-27 10:00:04,592 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 10:00:04,661 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:00:04,661 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:00:05,025 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：207.0000
2020-08-27 10:00:05,025 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：103
2020-08-27 10:00:05,037 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：207.00
2020-08-27 10:00:05,050 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 10:00:05,050 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：157.00
2020-08-27 10:00:05,050 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 10:00:05,146 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:00:05,146 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:00:05,489 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单实付金额为：99.0000
2020-08-27 10:00:05,490 - test_buyNowCreateOrder.py - [line:62] - INFO: 订单的积分为：99
2020-08-27 10:00:05,499 - test_buyNowCreateOrder.py - [line:67] - INFO: 订单的原价格为：99.00
2020-08-27 10:00:05,500 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 10:00:52,920 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:00:52,920 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:03:24,060 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:03:24,060 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:14:21,682 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:14:21,682 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:14:22,030 - test_buyNowCreateOrder.py - [line:65] - INFO: 订单实付金额为：69.0000
2020-08-27 10:14:22,030 - test_buyNowCreateOrder.py - [line:66] - INFO: 订单的积分为：34
2020-08-27 10:14:22,041 - test_buyNowCreateOrder.py - [line:71] - INFO: 订单的原价格为：69.00
2020-08-27 10:14:22,041 - test_buyNowCreateOrder.py - [line:91] - INFO: 测试用例执行通过
2020-08-27 10:14:22,111 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:14:22,112 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:14:22,473 - test_buyNowCreateOrder.py - [line:65] - INFO: 订单实付金额为：207.0000
2020-08-27 10:14:22,473 - test_buyNowCreateOrder.py - [line:66] - INFO: 订单的积分为：103
2020-08-27 10:14:22,485 - test_buyNowCreateOrder.py - [line:71] - INFO: 订单的原价格为：207.00
2020-08-27 10:14:22,500 - test_buyNowCreateOrder.py - [line:77] - INFO: 优惠券的金额为：50.00
2020-08-27 10:14:22,500 - test_buyNowCreateOrder.py - [line:81] - INFO: 订单的实付金额为：157.00
2020-08-27 10:14:22,500 - test_buyNowCreateOrder.py - [line:95] - ERROR: 测试用例执行失败
2020-08-27 10:14:22,579 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:14:22,579 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:14:22,925 - test_buyNowCreateOrder.py - [line:65] - INFO: 订单实付金额为：207.0000
2020-08-27 10:14:22,925 - test_buyNowCreateOrder.py - [line:66] - INFO: 订单的积分为：103
2020-08-27 10:14:22,936 - test_buyNowCreateOrder.py - [line:71] - INFO: 订单的原价格为：207.00
2020-08-27 10:14:22,966 - test_buyNowCreateOrder.py - [line:77] - INFO: 优惠券的金额为：50.00
2020-08-27 10:14:22,966 - test_buyNowCreateOrder.py - [line:81] - INFO: 订单的实付金额为：157.00
2020-08-27 10:14:22,966 - test_buyNowCreateOrder.py - [line:95] - ERROR: 测试用例执行失败
2020-08-27 10:14:23,065 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:14:23,065 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:14:23,410 - test_buyNowCreateOrder.py - [line:65] - INFO: 订单实付金额为：99.0000
2020-08-27 10:14:23,410 - test_buyNowCreateOrder.py - [line:66] - INFO: 订单的积分为：99
2020-08-27 10:14:23,423 - test_buyNowCreateOrder.py - [line:71] - INFO: 订单的原价格为：99.00
2020-08-27 10:14:23,423 - test_buyNowCreateOrder.py - [line:91] - INFO: 测试用例执行通过
2020-08-27 10:28:09,848 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:28:09,848 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:28:10,250 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:28:10,250 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:28:10,663 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:28:10,664 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:28:11,123 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:28:11,123 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:28:57,983 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:28:57,983 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:28:58,300 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：69.00
2020-08-27 10:28:58,312 - test_buyNowCreateOrder.py - [line:86] - INFO: 测试用例执行通过
2020-08-27 10:28:58,371 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:28:58,371 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:28:58,726 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：207.00
2020-08-27 10:28:58,761 - test_buyNowCreateOrder.py - [line:70] - INFO: 优惠券的金额为：50.00
2020-08-27 10:28:58,761 - test_buyNowCreateOrder.py - [line:74] - INFO: 订单的实付金额为：157.00
2020-08-27 10:28:58,761 - test_buyNowCreateOrder.py - [line:90] - ERROR: 测试用例执行失败
2020-08-27 10:28:58,829 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:28:58,830 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:28:59,185 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：207.00
2020-08-27 10:28:59,208 - test_buyNowCreateOrder.py - [line:70] - INFO: 优惠券的金额为：50.00
2020-08-27 10:28:59,208 - test_buyNowCreateOrder.py - [line:74] - INFO: 订单的实付金额为：157.00
2020-08-27 10:28:59,208 - test_buyNowCreateOrder.py - [line:90] - ERROR: 测试用例执行失败
2020-08-27 10:28:59,314 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:28:59,314 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:28:59,721 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：99.00
2020-08-27 10:28:59,732 - test_buyNowCreateOrder.py - [line:86] - INFO: 测试用例执行通过
2020-08-27 10:29:35,562 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:29:35,562 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:29:35,901 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：69.00
2020-08-27 10:29:35,914 - test_buyNowCreateOrder.py - [line:86] - INFO: 测试用例执行通过
2020-08-27 10:29:35,988 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:29:35,988 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:29:36,482 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：207.00
2020-08-27 10:29:36,520 - test_buyNowCreateOrder.py - [line:70] - INFO: 优惠券的金额为：50.00
2020-08-27 10:29:36,521 - test_buyNowCreateOrder.py - [line:74] - INFO: 订单的实付金额为：157.00
2020-08-27 10:29:36,521 - test_buyNowCreateOrder.py - [line:90] - ERROR: 测试用例执行失败
2020-08-27 10:29:36,589 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:29:36,590 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:29:36,949 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：207.00
2020-08-27 10:29:36,980 - test_buyNowCreateOrder.py - [line:70] - INFO: 优惠券的金额为：50.00
2020-08-27 10:29:36,980 - test_buyNowCreateOrder.py - [line:74] - INFO: 订单的实付金额为：157.00
2020-08-27 10:29:36,980 - test_buyNowCreateOrder.py - [line:90] - ERROR: 测试用例执行失败
2020-08-27 10:29:37,062 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:29:37,062 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:29:37,406 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：99.00
2020-08-27 10:29:37,417 - test_buyNowCreateOrder.py - [line:86] - INFO: 测试用例执行通过
2020-08-27 10:31:33,499 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:31:33,500 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:31:33,852 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：69.00
2020-08-27 10:31:33,863 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 10:31:33,925 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:31:33,925 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:31:34,271 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：207.00
2020-08-27 10:31:34,340 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:31:34,340 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:31:34,685 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：207.00
2020-08-27 10:31:34,797 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:31:34,797 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:31:35,127 - test_buyNowCreateOrder.py - [line:61] - INFO: 订单的原价格为：99.00
2020-08-27 10:31:35,137 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 10:37:18,681 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:37:18,681 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:37:19,069 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:37:19,069 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:37:19,462 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:37:19,463 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:37:19,898 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:37:19,898 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:37:53,768 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:37:53,768 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:37:54,181 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:37:54,181 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:37:54,597 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:37:54,597 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:37:55,059 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:37:55,059 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:43:11,404 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 10:43:11,404 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 10:43:11,757 - test_buyNowCreateOrder.py - [line:64] - INFO: 订单的原价格为：69.00
2020-08-27 10:43:11,768 - test_buyNowCreateOrder.py - [line:89] - INFO: 测试用例执行通过
2020-08-27 10:43:11,824 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:43:11,824 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 10:43:12,178 - test_buyNowCreateOrder.py - [line:64] - INFO: 订单的原价格为：207.00
2020-08-27 10:43:12,210 - test_buyNowCreateOrder.py - [line:81] - INFO: 优惠券的金额为：50.00
2020-08-27 10:43:12,210 - test_buyNowCreateOrder.py - [line:85] - INFO: 订单的实付金额为：157.00
2020-08-27 10:43:12,210 - test_buyNowCreateOrder.py - [line:93] - ERROR: 测试用例执行失败
2020-08-27 10:43:12,294 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 10:43:12,294 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 10:43:12,629 - test_buyNowCreateOrder.py - [line:64] - INFO: 订单的原价格为：207.00
2020-08-27 10:43:12,670 - test_buyNowCreateOrder.py - [line:81] - INFO: 优惠券的金额为：50.00
2020-08-27 10:43:12,670 - test_buyNowCreateOrder.py - [line:85] - INFO: 订单的实付金额为：157.00
2020-08-27 10:43:12,670 - test_buyNowCreateOrder.py - [line:93] - ERROR: 测试用例执行失败
2020-08-27 10:43:12,759 - test_buyNowCreateOrder.py - [line:43] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 10:43:12,759 - test_buyNowCreateOrder.py - [line:44] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 10:43:13,107 - test_buyNowCreateOrder.py - [line:64] - INFO: 订单的原价格为：99.00
2020-08-27 10:43:13,117 - test_buyNowCreateOrder.py - [line:89] - INFO: 测试用例执行通过
2020-08-27 11:06:53,960 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 11:06:53,960 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 11:06:54,313 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：69.00
2020-08-27 11:06:54,324 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 11:06:54,390 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:06:54,390 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 11:06:54,736 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：207.00
2020-08-27 11:06:54,768 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 11:06:54,768 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：157.00
2020-08-27 11:06:54,768 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 11:06:54,840 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:06:54,840 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 11:06:55,184 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：207.00
2020-08-27 11:06:55,429 - test_buyNowCreateOrder.py - [line:80] - INFO: 优惠券的金额为：50.00
2020-08-27 11:06:55,430 - test_buyNowCreateOrder.py - [line:84] - INFO: 订单的实付金额为：157.00
2020-08-27 11:06:55,430 - test_buyNowCreateOrder.py - [line:92] - ERROR: 测试用例执行失败
2020-08-27 11:06:55,524 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 11:06:55,524 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 11:06:55,859 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：99.00
2020-08-27 11:06:55,870 - test_buyNowCreateOrder.py - [line:88] - INFO: 测试用例执行通过
2020-08-27 11:08:37,004 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 11:08:37,005 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 11:08:37,342 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：69.00
2020-08-27 11:08:37,353 - test_buyNowCreateOrder.py - [line:92] - INFO: 测试用例执行通过
2020-08-27 11:08:37,412 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:08:37,412 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 11:08:37,776 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：207.00
2020-08-27 11:08:37,834 - test_buyNowCreateOrder.py - [line:84] - INFO: 优惠券的金额为：50.00
2020-08-27 11:08:37,834 - test_buyNowCreateOrder.py - [line:88] - INFO: 订单的实付金额为：157.00
2020-08-27 11:08:37,834 - test_buyNowCreateOrder.py - [line:96] - ERROR: 测试用例执行失败
2020-08-27 11:08:37,935 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:08:37,935 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 11:08:38,276 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：207.00
2020-08-27 11:08:38,311 - test_buyNowCreateOrder.py - [line:84] - INFO: 优惠券的金额为：50.00
2020-08-27 11:08:38,311 - test_buyNowCreateOrder.py - [line:88] - INFO: 订单的实付金额为：157.00
2020-08-27 11:08:38,311 - test_buyNowCreateOrder.py - [line:96] - ERROR: 测试用例执行失败
2020-08-27 11:08:38,414 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 11:08:38,414 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 11:08:38,775 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：99.00
2020-08-27 11:08:38,788 - test_buyNowCreateOrder.py - [line:92] - INFO: 测试用例执行通过
2020-08-27 11:10:34,431 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 11:10:34,431 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 11:10:34,784 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：69.00
2020-08-27 11:10:34,795 - test_buyNowCreateOrder.py - [line:96] - INFO: 测试用例执行通过
2020-08-27 11:10:34,849 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:10:34,849 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 11:10:35,189 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：207.00
2020-08-27 11:10:35,221 - test_buyNowCreateOrder.py - [line:88] - INFO: 优惠券的金额为：50.00
2020-08-27 11:10:35,221 - test_buyNowCreateOrder.py - [line:92] - INFO: 订单的实付金额为：157.00
2020-08-27 11:10:35,221 - test_buyNowCreateOrder.py - [line:100] - ERROR: 测试用例执行失败
2020-08-27 11:10:35,287 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:10:35,288 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 11:10:35,637 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：207.00
2020-08-27 11:10:35,671 - test_buyNowCreateOrder.py - [line:88] - INFO: 优惠券的金额为：50.00
2020-08-27 11:10:35,672 - test_buyNowCreateOrder.py - [line:92] - INFO: 订单的实付金额为：157.00
2020-08-27 11:10:35,672 - test_buyNowCreateOrder.py - [line:100] - ERROR: 测试用例执行失败
2020-08-27 11:10:35,777 - test_buyNowCreateOrder.py - [line:45] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 11:10:35,777 - test_buyNowCreateOrder.py - [line:46] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 11:10:36,107 - test_buyNowCreateOrder.py - [line:63] - INFO: 订单的原价格为：99.00
2020-08-27 11:10:36,125 - test_buyNowCreateOrder.py - [line:96] - INFO: 测试用例执行通过
2020-08-27 11:29:16,106 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 11:29:16,106 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 11:29:16,467 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：69.00
2020-08-27 11:29:16,477 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 11:29:16,595 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:29:16,595 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 11:29:16,641 - test_buyNowCreateOrder.py - [line:102] - ERROR: 测试用例执行失败
2020-08-27 11:29:16,735 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 11:29:16,735 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 11:29:17,068 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：99.00
2020-08-27 11:29:17,093 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 11:29:50,347 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 11:29:50,347 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 11:29:50,706 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：69.00
2020-08-27 11:29:50,717 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 11:29:50,823 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:29:50,823 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 11:29:50,869 - test_buyNowCreateOrder.py - [line:102] - ERROR: 测试用例执行失败
2020-08-27 11:29:50,968 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 11:29:50,968 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 11:29:51,307 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：99.00
2020-08-27 11:29:51,318 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 11:30:17,034 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 11:30:17,035 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 11:30:17,355 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：69.00
2020-08-27 11:30:17,366 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 11:30:17,444 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:30:17,445 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 11:30:17,826 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：207.00
2020-08-27 11:30:17,919 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 11:30:17,919 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 11:30:17,972 - test_buyNowCreateOrder.py - [line:102] - ERROR: 测试用例执行失败
2020-08-27 11:30:18,072 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 11:30:18,072 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 11:30:18,400 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：99.00
2020-08-27 11:30:18,412 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 13:08:57,844 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:08:57,844 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:08:58,176 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：69.00
2020-08-27 13:08:58,186 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 13:08:58,268 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:08:58,268 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:08:58,614 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：207.00
2020-08-27 13:08:58,712 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:08:58,712 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 13:08:58,763 - test_buyNowCreateOrder.py - [line:102] - ERROR: 测试用例执行失败
2020-08-27 13:08:58,868 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:08:58,868 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:08:59,422 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：99.00
2020-08-27 13:08:59,434 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 13:09:37,377 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:09:37,378 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:09:37,759 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：69.00
2020-08-27 13:09:37,770 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 13:09:37,836 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:09:37,836 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:09:38,201 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：207.00
2020-08-27 13:09:38,283 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:09:38,284 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 13:09:38,328 - test_buyNowCreateOrder.py - [line:102] - ERROR: 测试用例执行失败
2020-08-27 13:09:38,424 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:09:38,424 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:09:38,779 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：99.00
2020-08-27 13:09:38,797 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 13:15:27,077 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:15:27,077 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:15:27,426 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：69.00
2020-08-27 13:15:27,440 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 13:15:27,613 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:15:27,613 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单第三方商品，使用指定商品可用优惠券
2020-08-27 13:15:27,658 - test_buyNowCreateOrder.py - [line:102] - ERROR: 测试用例执行失败
2020-08-27 13:15:27,743 - test_buyNowCreateOrder.py - [line:52] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:15:27,744 - test_buyNowCreateOrder.py - [line:53] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:15:28,081 - test_buyNowCreateOrder.py - [line:69] - INFO: 订单的原价格为：99.00
2020-08-27 13:15:28,091 - test_buyNowCreateOrder.py - [line:98] - INFO: 测试用例执行通过
2020-08-27 13:17:12,563 - test_buyNowCreateOrder.py - [line:56] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:17:12,563 - test_buyNowCreateOrder.py - [line:57] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:17:12,902 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：69.00
2020-08-27 13:17:12,915 - test_buyNowCreateOrder.py - [line:102] - INFO: 测试用例执行通过
2020-08-27 13:18:21,939 - test_buyNowCreateOrder.py - [line:56] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:18:21,940 - test_buyNowCreateOrder.py - [line:57] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:18:22,295 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：69.00
2020-08-27 13:18:22,311 - test_buyNowCreateOrder.py - [line:102] - INFO: 测试用例执行通过
2020-08-27 13:19:19,446 - test_buyNowCreateOrder.py - [line:56] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:19:20,466 - test_buyNowCreateOrder.py - [line:57] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:19:50,031 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：207.00
2020-08-27 13:22:17,839 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:22:17,839 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:22:18,221 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：69.00
2020-08-27 13:22:18,232 - test_buyNowCreateOrder.py - [line:101] - INFO: 测试用例执行通过
2020-08-27 13:22:18,297 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:22:18,297 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:22:18,700 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：207.00
2020-08-27 13:22:18,865 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:22:18,865 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:22:19,206 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：99.00
2020-08-27 13:22:19,219 - test_buyNowCreateOrder.py - [line:101] - INFO: 测试用例执行通过
2020-08-27 13:22:58,252 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:22:58,253 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:22:58,670 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：69.00
2020-08-27 13:22:58,695 - test_buyNowCreateOrder.py - [line:101] - INFO: 测试用例执行通过
2020-08-27 13:22:58,784 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:22:58,784 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:22:59,160 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：207.00
2020-08-27 13:22:59,367 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:22:59,367 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:22:59,730 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：99.00
2020-08-27 13:22:59,740 - test_buyNowCreateOrder.py - [line:101] - INFO: 测试用例执行通过
2020-08-27 13:25:41,812 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:25:41,812 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:25:42,164 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：69.00
2020-08-27 13:25:42,177 - test_buyNowCreateOrder.py - [line:103] - INFO: 测试用例执行通过
2020-08-27 13:25:42,251 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:25:42,251 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:25:42,628 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：207.00
2020-08-27 13:25:42,793 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:25:42,793 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:25:43,118 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：99.00
2020-08-27 13:25:43,130 - test_buyNowCreateOrder.py - [line:103] - INFO: 测试用例执行通过
2020-08-27 13:27:29,934 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:27:29,934 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:27:30,264 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：69.00
2020-08-27 13:27:30,274 - test_buyNowCreateOrder.py - [line:103] - INFO: 测试用例执行通过
2020-08-27 13:27:30,339 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:27:30,339 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:27:30,704 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：207.00
2020-08-27 13:27:30,724 - test_buyNowCreateOrder.py - [line:85] - INFO: 优惠券的金额为：50.00
2020-08-27 13:27:30,724 - test_buyNowCreateOrder.py - [line:89] - INFO: 订单的实付金额为：157.00
2020-08-27 13:27:30,724 - test_buyNowCreateOrder.py - [line:103] - INFO: 测试用例执行通过
2020-08-27 13:27:30,866 - test_buyNowCreateOrder.py - [line:54] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:27:30,866 - test_buyNowCreateOrder.py - [line:55] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:27:31,221 - test_buyNowCreateOrder.py - [line:72] - INFO: 订单的原价格为：99.00
2020-08-27 13:27:31,238 - test_buyNowCreateOrder.py - [line:103] - INFO: 测试用例执行通过
2020-08-27 13:34:01,011 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:34:01,012 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:34:01,348 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：69.00
2020-08-27 13:34:01,360 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 13:34:01,433 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:34:01,433 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:34:01,799 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：207.00
2020-08-27 13:34:01,823 - test_buyNowCreateOrder.py - [line:86] - INFO: 优惠券的金额为：50.00
2020-08-27 13:34:01,823 - test_buyNowCreateOrder.py - [line:90] - INFO: 订单的实付金额为：157.00
2020-08-27 13:34:01,823 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 13:34:01,900 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-27 13:34:01,900 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品可用优惠券商品，使用指定商品可用优惠券
2020-08-27 13:34:02,259 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：207.00
2020-08-27 13:34:02,282 - test_buyNowCreateOrder.py - [line:86] - INFO: 优惠券的金额为：99.00
2020-08-27 13:34:02,282 - test_buyNowCreateOrder.py - [line:90] - INFO: 订单的实付金额为：108.00
2020-08-27 13:34:02,282 - test_buyNowCreateOrder.py - [line:108] - ERROR: 测试用例执行失败
2020-08-27 13:34:02,361 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-27 13:34:02,361 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品不可用优惠券商品，使用指定商品可用优惠券
2020-08-27 13:34:02,529 - test_buyNowCreateOrder.py - [line:108] - ERROR: 测试用例执行失败
2020-08-27 13:34:02,588 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:34:02,589 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:34:02,950 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：99.00
2020-08-27 13:34:02,963 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 13:39:03,039 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 13:39:03,039 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 13:39:03,395 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：69.00
2020-08-27 13:39:03,406 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 13:39:03,478 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 13:39:03,479 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 13:39:03,851 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：207.00
2020-08-27 13:39:03,875 - test_buyNowCreateOrder.py - [line:86] - INFO: 优惠券的金额为：50.00
2020-08-27 13:39:03,876 - test_buyNowCreateOrder.py - [line:90] - INFO: 订单的实付金额为：157.00
2020-08-27 13:39:03,876 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 13:39:03,975 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-27 13:39:03,975 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品可用优惠券商品，使用指定商品可用优惠券
2020-08-27 13:39:04,356 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：207.00
2020-08-27 13:39:04,379 - test_buyNowCreateOrder.py - [line:86] - INFO: 优惠券的金额为：99.00
2020-08-27 13:39:04,380 - test_buyNowCreateOrder.py - [line:90] - INFO: 订单的实付金额为：108.00
2020-08-27 13:39:04,380 - test_buyNowCreateOrder.py - [line:108] - ERROR: 测试用例执行失败
2020-08-27 13:39:04,451 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-27 13:39:04,451 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品不可用优惠券商品，使用指定商品可用优惠券
2020-08-27 13:39:04,584 - test_buyNowCreateOrder.py - [line:108] - ERROR: 测试用例执行失败
2020-08-27 13:39:04,642 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 13:39:04,643 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 13:39:04,993 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：99.00
2020-08-27 13:39:05,003 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 15:01:34,725 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 15:01:34,726 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 15:01:35,080 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：69.00
2020-08-27 15:01:35,104 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 15:01:35,175 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 15:01:35,175 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 15:01:35,555 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：207.00
2020-08-27 15:01:35,586 - test_buyNowCreateOrder.py - [line:86] - INFO: 优惠券的金额为：50.00
2020-08-27 15:01:35,586 - test_buyNowCreateOrder.py - [line:90] - INFO: 订单的实付金额为：157.00
2020-08-27 15:01:35,586 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 15:01:35,685 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-27 15:01:35,685 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品可用优惠券商品，使用指定商品可用优惠券
2020-08-27 15:01:36,065 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：279.00
2020-08-27 15:01:36,091 - test_buyNowCreateOrder.py - [line:86] - INFO: 优惠券的金额为：99.00
2020-08-27 15:01:36,091 - test_buyNowCreateOrder.py - [line:90] - INFO: 订单的实付金额为：180.00
2020-08-27 15:01:36,091 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 15:01:36,180 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-27 15:01:36,181 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单第三方商品不可用优惠券商品，使用指定商品可用优惠券
2020-08-27 15:01:36,690 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：89.00
2020-08-27 15:01:36,700 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 15:01:36,760 - test_buyNowCreateOrder.py - [line:55] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 15:01:36,760 - test_buyNowCreateOrder.py - [line:56] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 15:01:37,115 - test_buyNowCreateOrder.py - [line:73] - INFO: 订单的原价格为：99.00
2020-08-27 15:01:37,125 - test_buyNowCreateOrder.py - [line:104] - INFO: 测试用例执行通过
2020-08-27 16:30:35,018 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 16:30:35,018 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 16:30:35,371 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：69.00
2020-08-27 16:30:35,382 - test_buyNowCreateOrder.py - [line:113] - INFO: 第1条用例执行通过
2020-08-27 16:30:35,449 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 16:30:35,449 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 16:30:35,810 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：207.00
2020-08-27 16:30:36,043 - test_buyNowCreateOrder.py - [line:90] - INFO: 优惠券的金额为：50.00
2020-08-27 16:30:36,044 - test_buyNowCreateOrder.py - [line:94] - INFO: 订单的实付金额为：157.00
2020-08-27 16:30:36,044 - test_buyNowCreateOrder.py - [line:113] - INFO: 第2条用例执行通过
2020-08-27 16:30:36,125 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-27 16:30:36,125 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单第三方商品可用优惠券商品，使用指定商品可用优惠券
2020-08-27 16:30:36,525 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：279.00
2020-08-27 16:30:36,555 - test_buyNowCreateOrder.py - [line:90] - INFO: 优惠券的金额为：99.00
2020-08-27 16:30:36,555 - test_buyNowCreateOrder.py - [line:94] - INFO: 订单的实付金额为：180.00
2020-08-27 16:30:36,555 - test_buyNowCreateOrder.py - [line:113] - INFO: 第3条用例执行通过
2020-08-27 16:30:36,626 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-27 16:30:36,627 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单第三方商品不可用优惠券商品，使用指定商品可用优惠券
2020-08-27 16:30:36,986 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：89.00
2020-08-27 16:30:36,999 - test_buyNowCreateOrder.py - [line:113] - INFO: 第4条用例执行通过
2020-08-27 16:30:37,060 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 16:30:37,060 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 16:30:37,445 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：99.00
2020-08-27 16:30:37,458 - test_buyNowCreateOrder.py - [line:113] - INFO: 第5条用例执行通过
2020-08-27 16:30:37,525 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 16:30:37,525 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 16:30:37,896 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：198.00
2020-08-27 16:30:37,908 - test_buyNowCreateOrder.py - [line:113] - INFO: 第5条用例执行通过
2020-08-27 18:18:50,790 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-27 18:18:50,791 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-27 18:18:53,266 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：69.00
2020-08-27 18:18:53,277 - test_buyNowCreateOrder.py - [line:114] - INFO: 购买第三方商品，期望的积分是：34
2020-08-27 18:18:53,278 - test_buyNowCreateOrder.py - [line:117] - INFO: 第1条用例执行通过
2020-08-27 18:18:53,360 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-27 18:18:53,360 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-27 18:18:53,768 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：207.00
2020-08-27 18:18:53,797 - test_buyNowCreateOrder.py - [line:90] - INFO: 优惠券的金额为：50.00
2020-08-27 18:18:53,797 - test_buyNowCreateOrder.py - [line:94] - INFO: 计算后的订单实付金额为：157.00
2020-08-27 18:18:53,797 - test_buyNowCreateOrder.py - [line:102] - INFO: 购买第三方商品，期望的积分是：78
2020-08-27 18:18:53,797 - test_buyNowCreateOrder.py - [line:117] - INFO: 第2条用例执行通过
2020-08-27 18:18:53,881 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-27 18:18:53,882 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-27 18:18:54,261 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：279.00
2020-08-27 18:18:54,290 - test_buyNowCreateOrder.py - [line:90] - INFO: 优惠券的金额为：99.00
2020-08-27 18:18:54,290 - test_buyNowCreateOrder.py - [line:94] - INFO: 计算后的订单实付金额为：180.00
2020-08-27 18:18:54,291 - test_buyNowCreateOrder.py - [line:102] - INFO: 购买第三方商品，期望的积分是：90
2020-08-27 18:18:54,291 - test_buyNowCreateOrder.py - [line:117] - INFO: 第3条用例执行通过
2020-08-27 18:18:54,365 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-27 18:18:54,365 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-27 18:18:54,729 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：89.00
2020-08-27 18:18:54,740 - test_buyNowCreateOrder.py - [line:114] - INFO: 购买第三方商品，期望的积分是：44
2020-08-27 18:18:54,740 - test_buyNowCreateOrder.py - [line:117] - INFO: 第4条用例执行通过
2020-08-27 18:18:54,805 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-27 18:18:54,805 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-27 18:18:55,137 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：99.00
2020-08-27 18:18:55,148 - test_buyNowCreateOrder.py - [line:111] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-27 18:18:55,148 - test_buyNowCreateOrder.py - [line:117] - INFO: 第5条用例执行通过
2020-08-27 18:18:55,229 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-27 18:18:55,229 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-27 18:18:55,630 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：198.00
2020-08-27 18:18:55,651 - test_buyNowCreateOrder.py - [line:90] - INFO: 优惠券的金额为：50.00
2020-08-27 18:18:55,651 - test_buyNowCreateOrder.py - [line:94] - INFO: 计算后的订单实付金额为：148.00
2020-08-27 18:18:55,651 - test_buyNowCreateOrder.py - [line:99] - INFO: 购买自营商品，期望的积分是：148.00
2020-08-27 18:18:55,651 - test_buyNowCreateOrder.py - [line:117] - INFO: 第6条用例执行通过
2020-08-27 18:18:55,725 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-27 18:18:55,725 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-27 18:18:56,115 - test_buyNowCreateOrder.py - [line:80] - INFO: 订单的原价格为：198.00
2020-08-27 18:18:56,150 - test_buyNowCreateOrder.py - [line:90] - INFO: 优惠券的金额为：50.00
2020-08-27 18:18:56,150 - test_buyNowCreateOrder.py - [line:94] - INFO: 计算后的订单实付金额为：148.00
2020-08-27 18:18:56,150 - test_buyNowCreateOrder.py - [line:99] - INFO: 购买自营商品，期望的积分是：148.00
2020-08-27 18:18:56,150 - test_buyNowCreateOrder.py - [line:117] - INFO: 第7条用例执行通过
2020-08-27 18:18:56,239 - test_buyNowCreateOrder.py - [line:62] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-27 18:18:56,239 - test_buyNowCreateOrder.py - [line:63] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-27 18:18:56,298 - test_buyNowCreateOrder.py - [line:120] - ERROR: 第7条用例执行失败： :: 17000 != 0
2020-08-28 09:56:12,907 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 09:56:12,907 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 09:56:12,908 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 09:56:13,312 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：69.00
2020-08-28 09:56:13,323 - test_buyNowCreateOrder.py - [line:116] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 09:56:13,323 - test_buyNowCreateOrder.py - [line:119] - INFO: 第1条用例执行通过
2020-08-28 09:56:13,403 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3144}
2020-08-28 09:56:13,403 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 09:56:13,404 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 09:56:13,862 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：207.00
2020-08-28 09:56:13,897 - test_buyNowCreateOrder.py - [line:92] - INFO: 优惠券的金额为：50.00
2020-08-28 09:56:13,897 - test_buyNowCreateOrder.py - [line:96] - INFO: 计算后的订单实付金额为：157.00
2020-08-28 09:56:13,898 - test_buyNowCreateOrder.py - [line:104] - INFO: 购买第三方商品，期望的积分是：78
2020-08-28 09:56:13,898 - test_buyNowCreateOrder.py - [line:119] - INFO: 第2条用例执行通过
2020-08-28 09:56:13,981 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3145}
2020-08-28 09:56:13,982 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 09:56:13,982 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 09:56:14,346 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：279.00
2020-08-28 09:56:14,374 - test_buyNowCreateOrder.py - [line:92] - INFO: 优惠券的金额为：99.00
2020-08-28 09:56:14,374 - test_buyNowCreateOrder.py - [line:96] - INFO: 计算后的订单实付金额为：180.00
2020-08-28 09:56:14,374 - test_buyNowCreateOrder.py - [line:104] - INFO: 购买第三方商品，期望的积分是：90
2020-08-28 09:56:14,374 - test_buyNowCreateOrder.py - [line:119] - INFO: 第3条用例执行通过
2020-08-28 09:56:14,459 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-28 09:56:14,459 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 09:56:14,459 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 09:56:14,821 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：89.00
2020-08-28 09:56:14,835 - test_buyNowCreateOrder.py - [line:116] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 09:56:14,835 - test_buyNowCreateOrder.py - [line:119] - INFO: 第4条用例执行通过
2020-08-28 09:56:14,895 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 09:56:14,895 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 09:56:14,895 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 09:56:15,315 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：99.00
2020-08-28 09:56:15,328 - test_buyNowCreateOrder.py - [line:113] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 09:56:15,328 - test_buyNowCreateOrder.py - [line:119] - INFO: 第5条用例执行通过
2020-08-28 09:56:15,403 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3147}
2020-08-28 09:56:15,403 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 09:56:15,403 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 09:56:15,801 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：198.00
2020-08-28 09:56:15,830 - test_buyNowCreateOrder.py - [line:92] - INFO: 优惠券的金额为：50.00
2020-08-28 09:56:15,830 - test_buyNowCreateOrder.py - [line:96] - INFO: 计算后的订单实付金额为：148.00
2020-08-28 09:56:15,830 - test_buyNowCreateOrder.py - [line:101] - INFO: 购买自营商品，期望的积分是：148.00
2020-08-28 09:56:15,830 - test_buyNowCreateOrder.py - [line:119] - INFO: 第6条用例执行通过
2020-08-28 09:56:15,904 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3148}
2020-08-28 09:56:15,905 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 09:56:15,905 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 09:56:16,262 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：198.00
2020-08-28 09:56:16,293 - test_buyNowCreateOrder.py - [line:92] - INFO: 优惠券的金额为：50.00
2020-08-28 09:56:16,293 - test_buyNowCreateOrder.py - [line:96] - INFO: 计算后的订单实付金额为：148.00
2020-08-28 09:56:16,293 - test_buyNowCreateOrder.py - [line:101] - INFO: 购买自营商品，期望的积分是：148.00
2020-08-28 09:56:16,293 - test_buyNowCreateOrder.py - [line:119] - INFO: 第7条用例执行通过
2020-08-28 09:56:16,372 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3149}
2020-08-28 09:56:16,373 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 09:56:16,373 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 09:56:16,432 - test_buyNowCreateOrder.py - [line:122] - ERROR: 第7条用例执行失败： :: 17000 != 0
2020-08-28 09:57:30,703 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 09:57:30,703 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 09:57:30,703 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 09:57:31,051 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：69.00
2020-08-28 09:57:31,065 - test_buyNowCreateOrder.py - [line:116] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 09:57:31,067 - test_buyNowCreateOrder.py - [line:119] - INFO: 第1条用例执行通过
2020-08-28 09:57:31,142 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3149}
2020-08-28 09:57:31,142 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 09:57:31,142 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 09:57:31,508 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：207.00
2020-08-28 09:57:31,529 - test_buyNowCreateOrder.py - [line:92] - INFO: 优惠券的金额为：50.00
2020-08-28 09:57:31,529 - test_buyNowCreateOrder.py - [line:96] - INFO: 计算后的订单实付金额为：157.00
2020-08-28 09:57:31,529 - test_buyNowCreateOrder.py - [line:104] - INFO: 购买第三方商品，期望的积分是：78
2020-08-28 09:57:31,529 - test_buyNowCreateOrder.py - [line:119] - INFO: 第2条用例执行通过
2020-08-28 09:57:31,640 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-28 09:57:31,640 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 09:57:31,640 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 09:57:32,067 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：279.00
2020-08-28 09:57:32,088 - test_buyNowCreateOrder.py - [line:92] - INFO: 优惠券的金额为：99.00
2020-08-28 09:57:32,089 - test_buyNowCreateOrder.py - [line:96] - INFO: 计算后的订单实付金额为：180.00
2020-08-28 09:57:32,089 - test_buyNowCreateOrder.py - [line:104] - INFO: 购买第三方商品，期望的积分是：90
2020-08-28 09:57:32,089 - test_buyNowCreateOrder.py - [line:119] - INFO: 第3条用例执行通过
2020-08-28 09:57:32,172 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-28 09:57:32,172 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 09:57:32,172 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 09:57:32,543 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：89.00
2020-08-28 09:57:32,556 - test_buyNowCreateOrder.py - [line:116] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 09:57:32,556 - test_buyNowCreateOrder.py - [line:119] - INFO: 第4条用例执行通过
2020-08-28 09:57:32,619 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 09:57:32,619 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 09:57:32,620 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 09:57:33,005 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：99.00
2020-08-28 09:57:33,015 - test_buyNowCreateOrder.py - [line:113] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 09:57:33,016 - test_buyNowCreateOrder.py - [line:119] - INFO: 第5条用例执行通过
2020-08-28 09:57:33,097 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3150}
2020-08-28 09:57:33,098 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 09:57:33,098 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 09:57:33,485 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：198.00
2020-08-28 09:57:33,518 - test_buyNowCreateOrder.py - [line:92] - INFO: 优惠券的金额为：50.00
2020-08-28 09:57:33,518 - test_buyNowCreateOrder.py - [line:96] - INFO: 计算后的订单实付金额为：148.00
2020-08-28 09:57:33,518 - test_buyNowCreateOrder.py - [line:101] - INFO: 购买自营商品，期望的积分是：148.00
2020-08-28 09:57:33,518 - test_buyNowCreateOrder.py - [line:119] - INFO: 第6条用例执行通过
2020-08-28 09:57:33,589 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3151}
2020-08-28 09:57:33,590 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 09:57:33,590 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 09:57:34,020 - test_buyNowCreateOrder.py - [line:82] - INFO: 订单的原价格为：198.00
2020-08-28 09:57:34,044 - test_buyNowCreateOrder.py - [line:92] - INFO: 优惠券的金额为：50.00
2020-08-28 09:57:34,044 - test_buyNowCreateOrder.py - [line:96] - INFO: 计算后的订单实付金额为：148.00
2020-08-28 09:57:34,044 - test_buyNowCreateOrder.py - [line:101] - INFO: 购买自营商品，期望的积分是：148.00
2020-08-28 09:57:34,044 - test_buyNowCreateOrder.py - [line:119] - INFO: 第7条用例执行通过
2020-08-28 09:57:34,121 - test_buyNowCreateOrder.py - [line:62] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-08-28 09:57:34,121 - test_buyNowCreateOrder.py - [line:64] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 09:57:34,121 - test_buyNowCreateOrder.py - [line:65] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 09:57:34,179 - test_buyNowCreateOrder.py - [line:122] - ERROR: 第8条用例执行失败： :: 17000 != 0
2020-08-28 10:03:00,898 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 10:03:00,898 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 10:03:00,898 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 10:03:00,899 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 10:03:01,230 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：69.00
2020-08-28 10:03:01,241 - test_buyNowCreateOrder.py - [line:117] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 10:03:01,241 - test_buyNowCreateOrder.py - [line:120] - INFO: 第1条用例执行通过
2020-08-28 10:03:01,309 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 10:03:01,309 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 10:03:01,309 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3153}
2020-08-28 10:03:01,310 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 10:03:01,702 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：207.00
2020-08-28 10:03:01,726 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 10:03:01,726 - test_buyNowCreateOrder.py - [line:97] - INFO: 计算后的订单实付金额为：157.00
2020-08-28 10:03:01,726 - test_buyNowCreateOrder.py - [line:105] - INFO: 购买第三方商品，期望的积分是：78
2020-08-28 10:03:01,726 - test_buyNowCreateOrder.py - [line:120] - INFO: 第2条用例执行通过
2020-08-28 10:03:01,812 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 10:03:01,812 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 10:03:01,812 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-28 10:03:01,812 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 10:03:02,194 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：279.00
2020-08-28 10:03:02,220 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：99.00
2020-08-28 10:03:02,220 - test_buyNowCreateOrder.py - [line:97] - INFO: 计算后的订单实付金额为：180.00
2020-08-28 10:03:02,221 - test_buyNowCreateOrder.py - [line:105] - INFO: 购买第三方商品，期望的积分是：90
2020-08-28 10:03:02,221 - test_buyNowCreateOrder.py - [line:120] - INFO: 第3条用例执行通过
2020-08-28 10:03:02,313 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 10:03:02,313 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 10:03:02,313 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3269}
2020-08-28 10:03:02,314 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 10:03:02,678 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：89.00
2020-08-28 10:03:02,691 - test_buyNowCreateOrder.py - [line:117] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 10:03:02,691 - test_buyNowCreateOrder.py - [line:120] - INFO: 第4条用例执行通过
2020-08-28 10:03:02,745 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 10:03:02,745 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 10:03:02,745 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 10:03:02,745 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 10:03:03,058 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：99.00
2020-08-28 10:03:03,071 - test_buyNowCreateOrder.py - [line:114] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 10:03:03,071 - test_buyNowCreateOrder.py - [line:120] - INFO: 第5条用例执行通过
2020-08-28 10:03:03,147 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 10:03:03,147 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 10:03:03,147 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3154}
2020-08-28 10:03:03,148 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 10:03:03,526 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 10:03:03,552 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 10:03:03,552 - test_buyNowCreateOrder.py - [line:97] - INFO: 计算后的订单实付金额为：148.00
2020-08-28 10:03:03,552 - test_buyNowCreateOrder.py - [line:102] - INFO: 购买自营商品，期望的积分是：148.00
2020-08-28 10:03:03,553 - test_buyNowCreateOrder.py - [line:120] - INFO: 第6条用例执行通过
2020-08-28 10:03:03,630 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 10:03:03,630 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 10:03:03,630 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3155}
2020-08-28 10:03:03,630 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 10:03:03,997 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 10:03:04,028 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 10:03:04,028 - test_buyNowCreateOrder.py - [line:97] - INFO: 计算后的订单实付金额为：148.00
2020-08-28 10:03:04,028 - test_buyNowCreateOrder.py - [line:102] - INFO: 购买自营商品，期望的积分是：148.00
2020-08-28 10:03:04,028 - test_buyNowCreateOrder.py - [line:120] - INFO: 第7条用例执行通过
2020-08-28 10:03:04,106 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 10:03:04,107 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': '2adb3e5207038b2a8fe0d633c0a726e8'}
2020-08-28 10:03:04,107 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3156}
2020-08-28 10:03:04,107 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 10:03:04,160 - test_buyNowCreateOrder.py - [line:123] - ERROR: 第8条用例执行失败： :: 17000 != 0
2020-08-28 13:51:36,271 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 13:51:36,272 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 13:51:36,272 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 13:51:36,272 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 13:51:36,598 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：69.00
2020-08-28 13:51:36,607 - test_buyNowCreateOrder.py - [line:137] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 13:51:36,608 - test_buyNowCreateOrder.py - [line:140] - INFO: 第1条用例执行通过
2020-08-28 13:51:36,672 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 13:51:36,672 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 13:51:36,672 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3144}
2020-08-28 13:51:36,673 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 13:51:37,024 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：207.00
2020-08-28 13:51:37,046 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 13:51:37,046 - test_buyNowCreateOrder.py - [line:99] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 13:51:37,046 - test_buyNowCreateOrder.py - [line:125] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 13:51:37,047 - test_buyNowCreateOrder.py - [line:140] - INFO: 第2条用例执行通过
2020-08-28 13:51:37,133 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 13:51:37,133 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 13:51:37,133 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3145}
2020-08-28 13:51:37,134 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 13:51:37,492 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：279.00
2020-08-28 13:51:37,530 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：99.00
2020-08-28 13:51:37,530 - test_buyNowCreateOrder.py - [line:99] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 13:51:37,530 - test_buyNowCreateOrder.py - [line:125] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 13:51:37,530 - test_buyNowCreateOrder.py - [line:140] - INFO: 第3条用例执行通过
2020-08-28 13:51:37,637 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 13:51:37,637 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 13:51:37,638 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-28 13:51:37,638 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 13:51:37,965 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：89.00
2020-08-28 13:51:37,975 - test_buyNowCreateOrder.py - [line:137] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 13:51:37,975 - test_buyNowCreateOrder.py - [line:140] - INFO: 第4条用例执行通过
2020-08-28 13:51:38,035 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 13:51:38,035 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 13:51:38,035 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 13:51:38,035 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 13:51:38,359 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：99.00
2020-08-28 13:51:38,369 - test_buyNowCreateOrder.py - [line:134] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 13:51:38,370 - test_buyNowCreateOrder.py - [line:140] - INFO: 第5条用例执行通过
2020-08-28 13:51:38,436 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 13:51:38,436 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 13:51:38,436 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3147}
2020-08-28 13:51:38,436 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 13:51:38,793 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 13:51:38,815 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 13:51:38,816 - test_buyNowCreateOrder.py - [line:99] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 13:51:38,816 - test_buyNowCreateOrder.py - [line:122] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 13:51:38,816 - test_buyNowCreateOrder.py - [line:140] - INFO: 第6条用例执行通过
2020-08-28 13:51:38,886 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 13:51:38,886 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 13:51:38,886 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3148}
2020-08-28 13:51:38,886 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 13:51:39,259 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 13:51:39,281 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 13:51:39,281 - test_buyNowCreateOrder.py - [line:99] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 13:51:39,281 - test_buyNowCreateOrder.py - [line:122] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 13:51:39,281 - test_buyNowCreateOrder.py - [line:140] - INFO: 第7条用例执行通过
2020-08-28 13:51:39,358 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 13:51:39,358 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': '2adb3e5207038b2a8fe0d633c0a726e8'}
2020-08-28 13:51:39,358 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3149}
2020-08-28 13:51:39,358 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 13:51:39,710 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 13:51:39,731 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 13:51:39,731 - test_buyNowCreateOrder.py - [line:105] - INFO: L1用户计算后的订单实付金额为：148.00
2020-08-28 13:51:39,732 - test_buyNowCreateOrder.py - [line:143] - ERROR: 第8条用例执行失败： :: Decimal('190.0000') != Decimal('148.00')
2020-08-28 14:50:00,548 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 14:50:00,548 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:50:00,548 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 14:50:00,548 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 14:50:00,925 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：69.00
2020-08-28 14:50:00,949 - test_buyNowCreateOrder.py - [line:133] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 14:50:00,949 - test_buyNowCreateOrder.py - [line:136] - INFO: 第1条用例执行通过
2020-08-28 14:50:02,087 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 14:50:02,087 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:50:02,087 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3149}
2020-08-28 14:50:02,087 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 14:50:02,463 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：207.00
2020-08-28 14:50:02,489 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 14:50:02,489 - test_buyNowCreateOrder.py - [line:99] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 14:50:02,489 - test_buyNowCreateOrder.py - [line:121] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 14:50:02,489 - test_buyNowCreateOrder.py - [line:136] - INFO: 第2条用例执行通过
2020-08-28 14:50:02,643 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 14:50:02,643 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:50:02,643 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-28 14:50:02,644 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 14:50:03,013 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：279.00
2020-08-28 14:50:03,034 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：99.00
2020-08-28 14:50:03,034 - test_buyNowCreateOrder.py - [line:99] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 14:50:03,034 - test_buyNowCreateOrder.py - [line:121] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 14:50:03,034 - test_buyNowCreateOrder.py - [line:136] - INFO: 第3条用例执行通过
2020-08-28 14:50:03,100 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 14:50:03,100 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:50:03,100 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-28 14:50:03,100 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 14:50:03,491 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：89.00
2020-08-28 14:50:03,502 - test_buyNowCreateOrder.py - [line:133] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 14:50:03,502 - test_buyNowCreateOrder.py - [line:136] - INFO: 第4条用例执行通过
2020-08-28 14:50:03,558 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 14:50:03,559 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:50:03,559 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 14:50:03,559 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 14:50:03,924 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：99.00
2020-08-28 14:50:03,944 - test_buyNowCreateOrder.py - [line:130] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 14:50:03,944 - test_buyNowCreateOrder.py - [line:136] - INFO: 第5条用例执行通过
2020-08-28 14:50:04,018 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 14:50:04,018 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:50:04,018 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3150}
2020-08-28 14:50:04,018 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 14:50:04,406 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 14:50:04,431 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 14:50:04,431 - test_buyNowCreateOrder.py - [line:99] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 14:50:04,431 - test_buyNowCreateOrder.py - [line:118] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 14:50:04,431 - test_buyNowCreateOrder.py - [line:136] - INFO: 第6条用例执行通过
2020-08-28 14:50:04,506 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 14:50:04,506 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:50:04,506 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3151}
2020-08-28 14:50:04,506 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 14:50:04,883 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 14:50:04,932 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 14:50:04,932 - test_buyNowCreateOrder.py - [line:99] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 14:50:04,932 - test_buyNowCreateOrder.py - [line:118] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 14:50:04,932 - test_buyNowCreateOrder.py - [line:136] - INFO: 第7条用例执行通过
2020-08-28 14:50:06,001 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 14:50:06,002 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': '2adb3e5207038b2a8fe0d633c0a726e8'}
2020-08-28 14:50:06,002 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3152}
2020-08-28 14:50:06,002 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 14:50:06,369 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 14:50:06,393 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 14:50:06,393 - test_buyNowCreateOrder.py - [line:104] - INFO: L1用户计算后的订单实付金额为：148.00
2020-08-28 14:50:06,394 - test_buyNowCreateOrder.py - [line:139] - ERROR: 第8条用例执行失败： :: Decimal('190.0000') != Decimal('148.00')
2020-08-28 14:57:59,007 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 14:57:59,007 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:57:59,007 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 14:57:59,007 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 14:57:59,324 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：69.00
2020-08-28 14:57:59,336 - test_buyNowCreateOrder.py - [line:135] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 14:57:59,337 - test_buyNowCreateOrder.py - [line:138] - INFO: 第1条用例执行通过
2020-08-28 14:57:59,416 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 14:57:59,417 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:57:59,417 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3144}
2020-08-28 14:57:59,417 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 14:57:59,786 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：207.00
2020-08-28 14:57:59,809 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 14:57:59,809 - test_buyNowCreateOrder.py - [line:98] - INFO: 订单实付金额：157.00; 订单的原价：207.00; 优惠券的金额为：50.00;
2020-08-28 14:57:59,809 - test_buyNowCreateOrder.py - [line:101] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 14:57:59,809 - test_buyNowCreateOrder.py - [line:123] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 14:57:59,809 - test_buyNowCreateOrder.py - [line:138] - INFO: 第2条用例执行通过
2020-08-28 14:57:59,880 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 14:57:59,880 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:57:59,880 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3145}
2020-08-28 14:57:59,881 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 14:58:00,291 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：279.00
2020-08-28 14:58:00,313 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：99.00
2020-08-28 14:58:00,313 - test_buyNowCreateOrder.py - [line:98] - INFO: 订单实付金额：180.00; 订单的原价：279.00; 优惠券的金额为：99.00;
2020-08-28 14:58:00,313 - test_buyNowCreateOrder.py - [line:101] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 14:58:00,314 - test_buyNowCreateOrder.py - [line:123] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 14:58:00,314 - test_buyNowCreateOrder.py - [line:138] - INFO: 第3条用例执行通过
2020-08-28 14:58:00,387 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 14:58:00,388 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:58:00,388 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-28 14:58:00,388 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 14:58:00,696 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：89.00
2020-08-28 14:58:00,709 - test_buyNowCreateOrder.py - [line:135] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 14:58:00,709 - test_buyNowCreateOrder.py - [line:138] - INFO: 第4条用例执行通过
2020-08-28 14:58:00,763 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 14:58:00,763 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:58:00,763 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 14:58:00,763 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 14:58:01,115 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：99.00
2020-08-28 14:58:01,136 - test_buyNowCreateOrder.py - [line:132] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 14:58:01,136 - test_buyNowCreateOrder.py - [line:138] - INFO: 第5条用例执行通过
2020-08-28 14:58:01,201 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 14:58:01,201 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:58:01,201 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3147}
2020-08-28 14:58:01,201 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 14:58:01,577 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 14:58:01,610 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 14:58:01,610 - test_buyNowCreateOrder.py - [line:98] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 14:58:01,610 - test_buyNowCreateOrder.py - [line:101] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 14:58:01,611 - test_buyNowCreateOrder.py - [line:120] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 14:58:01,611 - test_buyNowCreateOrder.py - [line:138] - INFO: 第6条用例执行通过
2020-08-28 14:58:01,679 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 14:58:01,679 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 14:58:01,679 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3148}
2020-08-28 14:58:01,679 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 14:58:02,044 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 14:58:02,068 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 14:58:02,068 - test_buyNowCreateOrder.py - [line:98] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 14:58:02,069 - test_buyNowCreateOrder.py - [line:101] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 14:58:02,069 - test_buyNowCreateOrder.py - [line:120] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 14:58:02,069 - test_buyNowCreateOrder.py - [line:138] - INFO: 第7条用例执行通过
2020-08-28 14:58:02,130 - test_buyNowCreateOrder.py - [line:63] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 14:58:02,130 - test_buyNowCreateOrder.py - [line:64] - INFO: headers：{'appDevice': '5', 'userToken': '2adb3e5207038b2a8fe0d633c0a726e8'}
2020-08-28 14:58:02,130 - test_buyNowCreateOrder.py - [line:65] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3152}
2020-08-28 14:58:02,130 - test_buyNowCreateOrder.py - [line:66] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 14:58:02,500 - test_buyNowCreateOrder.py - [line:83] - INFO: 订单的原价格为：198.00
2020-08-28 14:58:02,521 - test_buyNowCreateOrder.py - [line:93] - INFO: 优惠券的金额为：50.00
2020-08-28 14:58:02,522 - test_buyNowCreateOrder.py - [line:98] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 14:58:02,522 - test_buyNowCreateOrder.py - [line:106] - INFO: L1用户计算后的订单实付金额为：148.00
2020-08-28 14:58:02,522 - test_buyNowCreateOrder.py - [line:141] - ERROR: 第8条用例执行失败： :: Decimal('190.0000') != Decimal('148.00')
2020-08-28 19:08:06,806 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:08:06,806 - test_buyNowCreateOrder.py - [line:141] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:08:06,806 - test_buyNowCreateOrder.py - [line:142] - INFO: 参数为：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:08:06,806 - test_buyNowCreateOrder.py - [line:143] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:08:07,107 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：69.00
2020-08-28 19:08:07,127 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 19:08:07,127 - test_buyNowCreateOrder.py - [line:214] - INFO: 第1条用例执行通过
2020-08-28 19:08:07,362 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:08:07,363 - test_buyNowCreateOrder.py - [line:141] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:08:07,363 - test_buyNowCreateOrder.py - [line:142] - INFO: 参数为：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3144}
2020-08-28 19:08:07,363 - test_buyNowCreateOrder.py - [line:143] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:08:07,725 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：207.00
2020-08-28 19:08:07,748 - test_buyNowCreateOrder.py - [line:170] - INFO: 优惠券的金额为：50.00
2020-08-28 19:08:07,748 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单实付金额：157.00; 订单的原价：207.00; 优惠券的金额为：50.00;
2020-08-28 19:08:07,748 - test_buyNowCreateOrder.py - [line:178] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 19:08:07,748 - test_buyNowCreateOrder.py - [line:199] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 19:08:07,749 - test_buyNowCreateOrder.py - [line:214] - INFO: 第2条用例执行通过
2020-08-28 19:08:07,954 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:08:07,955 - test_buyNowCreateOrder.py - [line:141] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:08:07,955 - test_buyNowCreateOrder.py - [line:142] - INFO: 参数为：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3145}
2020-08-28 19:08:07,955 - test_buyNowCreateOrder.py - [line:143] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:08:08,298 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：279.00
2020-08-28 19:08:08,332 - test_buyNowCreateOrder.py - [line:170] - INFO: 优惠券的金额为：99.00
2020-08-28 19:08:08,332 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单实付金额：180.00; 订单的原价：279.00; 优惠券的金额为：99.00;
2020-08-28 19:08:08,332 - test_buyNowCreateOrder.py - [line:178] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 19:08:08,332 - test_buyNowCreateOrder.py - [line:199] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 19:08:08,332 - test_buyNowCreateOrder.py - [line:214] - INFO: 第3条用例执行通过
2020-08-28 19:08:08,540 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:08:08,540 - test_buyNowCreateOrder.py - [line:141] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:08:08,540 - test_buyNowCreateOrder.py - [line:142] - INFO: 参数为：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-28 19:08:08,540 - test_buyNowCreateOrder.py - [line:143] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:08:08,892 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：89.00
2020-08-28 19:08:08,904 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 19:08:08,904 - test_buyNowCreateOrder.py - [line:214] - INFO: 第4条用例执行通过
2020-08-28 19:08:08,980 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:08:08,981 - test_buyNowCreateOrder.py - [line:141] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:08:08,981 - test_buyNowCreateOrder.py - [line:142] - INFO: 参数为：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:08:08,981 - test_buyNowCreateOrder.py - [line:143] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:08:09,318 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-08-28 19:08:09,332 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 19:08:09,332 - test_buyNowCreateOrder.py - [line:214] - INFO: 第5条用例执行通过
2020-08-28 19:08:09,535 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:08:09,535 - test_buyNowCreateOrder.py - [line:141] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:08:09,535 - test_buyNowCreateOrder.py - [line:142] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3147}
2020-08-28 19:08:09,536 - test_buyNowCreateOrder.py - [line:143] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:08:09,926 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：198.00
2020-08-28 19:08:09,947 - test_buyNowCreateOrder.py - [line:170] - INFO: 优惠券的金额为：50.00
2020-08-28 19:08:09,947 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:08:09,948 - test_buyNowCreateOrder.py - [line:178] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:08:09,948 - test_buyNowCreateOrder.py - [line:196] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:08:09,948 - test_buyNowCreateOrder.py - [line:214] - INFO: 第6条用例执行通过
2020-08-28 19:08:10,135 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:08:10,135 - test_buyNowCreateOrder.py - [line:141] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:08:10,136 - test_buyNowCreateOrder.py - [line:142] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3148}
2020-08-28 19:08:10,136 - test_buyNowCreateOrder.py - [line:143] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:08:10,521 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：198.00
2020-08-28 19:08:10,545 - test_buyNowCreateOrder.py - [line:170] - INFO: 优惠券的金额为：50.00
2020-08-28 19:08:10,545 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:08:10,545 - test_buyNowCreateOrder.py - [line:178] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:08:10,545 - test_buyNowCreateOrder.py - [line:196] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:08:10,545 - test_buyNowCreateOrder.py - [line:214] - INFO: 第7条用例执行通过
2020-08-28 19:08:10,749 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:08:10,749 - test_buyNowCreateOrder.py - [line:141] - INFO: headers：{'appDevice': '5', 'userToken': '2adb3e5207038b2a8fe0d633c0a726e8'}
2020-08-28 19:08:10,749 - test_buyNowCreateOrder.py - [line:142] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-08-28 19:08:10,750 - test_buyNowCreateOrder.py - [line:143] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:08:11,106 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：198.00
2020-08-28 19:08:11,129 - test_buyNowCreateOrder.py - [line:170] - INFO: 优惠券的金额为：50.00
2020-08-28 19:08:11,129 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:08:11,129 - test_buyNowCreateOrder.py - [line:182] - INFO: L1用户计算后的订单实付金额为：148.00
2020-08-28 19:08:11,129 - test_buyNowCreateOrder.py - [line:217] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('148.00')
2020-08-28 19:14:44,849 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:14:44,851 - test_buyNowCreateOrder.py - [line:134] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:14:44,852 - test_buyNowCreateOrder.py - [line:135] - INFO: 参数为：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:14:44,853 - test_buyNowCreateOrder.py - [line:136] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:14:45,218 - test_buyNowCreateOrder.py - [line:153] - INFO: 订单的原价格为：69.00
2020-08-28 19:14:45,229 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 19:14:45,229 - test_buyNowCreateOrder.py - [line:207] - INFO: 第1条用例执行通过
2020-08-28 19:14:45,431 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:14:45,431 - test_buyNowCreateOrder.py - [line:134] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:14:45,431 - test_buyNowCreateOrder.py - [line:135] - INFO: 参数为：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3149}
2020-08-28 19:14:45,431 - test_buyNowCreateOrder.py - [line:136] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:14:45,778 - test_buyNowCreateOrder.py - [line:153] - INFO: 订单的原价格为：207.00
2020-08-28 19:14:45,802 - test_buyNowCreateOrder.py - [line:163] - INFO: 优惠券的金额为：50.00
2020-08-28 19:14:45,802 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单实付金额：157.00; 订单的原价：207.00; 优惠券的金额为：50.00;
2020-08-28 19:14:45,803 - test_buyNowCreateOrder.py - [line:171] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 19:14:45,803 - test_buyNowCreateOrder.py - [line:192] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 19:14:45,803 - test_buyNowCreateOrder.py - [line:207] - INFO: 第2条用例执行通过
2020-08-28 19:14:45,997 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:14:45,997 - test_buyNowCreateOrder.py - [line:134] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:14:45,997 - test_buyNowCreateOrder.py - [line:135] - INFO: 参数为：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-28 19:14:45,997 - test_buyNowCreateOrder.py - [line:136] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:14:46,342 - test_buyNowCreateOrder.py - [line:153] - INFO: 订单的原价格为：279.00
2020-08-28 19:14:46,366 - test_buyNowCreateOrder.py - [line:163] - INFO: 优惠券的金额为：99.00
2020-08-28 19:14:46,366 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单实付金额：180.00; 订单的原价：279.00; 优惠券的金额为：99.00;
2020-08-28 19:14:46,366 - test_buyNowCreateOrder.py - [line:171] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 19:14:46,366 - test_buyNowCreateOrder.py - [line:192] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 19:14:46,366 - test_buyNowCreateOrder.py - [line:207] - INFO: 第3条用例执行通过
2020-08-28 19:14:46,557 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:14:46,557 - test_buyNowCreateOrder.py - [line:134] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:14:46,557 - test_buyNowCreateOrder.py - [line:135] - INFO: 参数为：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-28 19:14:46,557 - test_buyNowCreateOrder.py - [line:136] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:14:46,929 - test_buyNowCreateOrder.py - [line:153] - INFO: 订单的原价格为：89.00
2020-08-28 19:14:46,940 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 19:14:46,940 - test_buyNowCreateOrder.py - [line:207] - INFO: 第4条用例执行通过
2020-08-28 19:14:46,991 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:14:46,991 - test_buyNowCreateOrder.py - [line:134] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:14:46,992 - test_buyNowCreateOrder.py - [line:135] - INFO: 参数为：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:14:46,992 - test_buyNowCreateOrder.py - [line:136] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:14:47,349 - test_buyNowCreateOrder.py - [line:153] - INFO: 订单的原价格为：99.00
2020-08-28 19:14:47,359 - test_buyNowCreateOrder.py - [line:201] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 19:14:47,359 - test_buyNowCreateOrder.py - [line:207] - INFO: 第5条用例执行通过
2020-08-28 19:14:47,559 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:14:47,559 - test_buyNowCreateOrder.py - [line:134] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:14:47,559 - test_buyNowCreateOrder.py - [line:135] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3150}
2020-08-28 19:14:47,559 - test_buyNowCreateOrder.py - [line:136] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:14:47,906 - test_buyNowCreateOrder.py - [line:153] - INFO: 订单的原价格为：198.00
2020-08-28 19:14:47,926 - test_buyNowCreateOrder.py - [line:163] - INFO: 优惠券的金额为：50.00
2020-08-28 19:14:47,926 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:14:47,926 - test_buyNowCreateOrder.py - [line:171] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:14:47,926 - test_buyNowCreateOrder.py - [line:189] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:14:47,927 - test_buyNowCreateOrder.py - [line:207] - INFO: 第6条用例执行通过
2020-08-28 19:14:48,130 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:14:48,130 - test_buyNowCreateOrder.py - [line:134] - INFO: headers：{'appDevice': '5', 'userToken': 'd2d260bf9f6677615e54ea2cd88e172b'}
2020-08-28 19:14:48,130 - test_buyNowCreateOrder.py - [line:135] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3151}
2020-08-28 19:14:48,130 - test_buyNowCreateOrder.py - [line:136] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:14:48,488 - test_buyNowCreateOrder.py - [line:153] - INFO: 订单的原价格为：198.00
2020-08-28 19:14:48,517 - test_buyNowCreateOrder.py - [line:163] - INFO: 优惠券的金额为：50.00
2020-08-28 19:14:48,518 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:14:48,518 - test_buyNowCreateOrder.py - [line:171] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:14:48,518 - test_buyNowCreateOrder.py - [line:189] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:14:48,518 - test_buyNowCreateOrder.py - [line:207] - INFO: 第7条用例执行通过
2020-08-28 19:14:48,704 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:14:48,704 - test_buyNowCreateOrder.py - [line:134] - INFO: headers：{'appDevice': '5', 'userToken': '2adb3e5207038b2a8fe0d633c0a726e8'}
2020-08-28 19:14:48,704 - test_buyNowCreateOrder.py - [line:135] - INFO: 参数为：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3688}
2020-08-28 19:14:48,704 - test_buyNowCreateOrder.py - [line:136] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:14:49,047 - test_buyNowCreateOrder.py - [line:153] - INFO: 订单的原价格为：198.00
2020-08-28 19:14:49,069 - test_buyNowCreateOrder.py - [line:163] - INFO: 优惠券的金额为：50.00
2020-08-28 19:14:49,069 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单实付金额：148.00; 订单的原价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:14:49,069 - test_buyNowCreateOrder.py - [line:175] - INFO: L1用户计算后的订单实付金额为：148.00
2020-08-28 19:14:49,069 - test_buyNowCreateOrder.py - [line:210] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('148.00')
2020-08-28 19:21:11,670 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:21:11,671 - test_buyNowCreateOrder.py - [line:134] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:21:11,671 - test_buyNowCreateOrder.py - [line:135] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:21:12,031 - test_buyNowCreateOrder.py - [line:152] - INFO: 订单的原价格为：69.00
2020-08-28 19:21:12,043 - test_buyNowCreateOrder.py - [line:203] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 19:21:12,043 - test_buyNowCreateOrder.py - [line:206] - INFO: 第1条用例执行通过
2020-08-28 19:21:12,259 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:21:12,259 - test_buyNowCreateOrder.py - [line:134] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3152}
2020-08-28 19:21:12,259 - test_buyNowCreateOrder.py - [line:135] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:21:12,618 - test_buyNowCreateOrder.py - [line:152] - INFO: 订单的原价格为：207.00
2020-08-28 19:21:12,639 - test_buyNowCreateOrder.py - [line:162] - INFO: 优惠券的金额为：50.00
2020-08-28 19:21:12,639 - test_buyNowCreateOrder.py - [line:167] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 19:21:12,640 - test_buyNowCreateOrder.py - [line:170] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 19:21:12,640 - test_buyNowCreateOrder.py - [line:191] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 19:21:12,640 - test_buyNowCreateOrder.py - [line:206] - INFO: 第2条用例执行通过
2020-08-28 19:21:12,823 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:21:12,823 - test_buyNowCreateOrder.py - [line:134] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-28 19:21:12,823 - test_buyNowCreateOrder.py - [line:135] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:21:13,154 - test_buyNowCreateOrder.py - [line:152] - INFO: 订单的原价格为：279.00
2020-08-28 19:21:13,178 - test_buyNowCreateOrder.py - [line:162] - INFO: 优惠券的金额为：99.00
2020-08-28 19:21:13,178 - test_buyNowCreateOrder.py - [line:167] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 19:21:13,178 - test_buyNowCreateOrder.py - [line:170] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 19:21:13,178 - test_buyNowCreateOrder.py - [line:191] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 19:21:13,178 - test_buyNowCreateOrder.py - [line:206] - INFO: 第3条用例执行通过
2020-08-28 19:21:13,359 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:21:13,360 - test_buyNowCreateOrder.py - [line:134] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3269}
2020-08-28 19:21:13,360 - test_buyNowCreateOrder.py - [line:135] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:21:13,696 - test_buyNowCreateOrder.py - [line:152] - INFO: 订单的原价格为：89.00
2020-08-28 19:21:13,707 - test_buyNowCreateOrder.py - [line:203] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 19:21:13,707 - test_buyNowCreateOrder.py - [line:206] - INFO: 第4条用例执行通过
2020-08-28 19:21:13,762 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:21:13,762 - test_buyNowCreateOrder.py - [line:134] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:21:13,762 - test_buyNowCreateOrder.py - [line:135] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:21:14,089 - test_buyNowCreateOrder.py - [line:152] - INFO: 订单的原价格为：99.00
2020-08-28 19:21:14,100 - test_buyNowCreateOrder.py - [line:200] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 19:21:14,101 - test_buyNowCreateOrder.py - [line:206] - INFO: 第5条用例执行通过
2020-08-28 19:21:14,302 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:21:14,302 - test_buyNowCreateOrder.py - [line:134] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3153}
2020-08-28 19:21:14,302 - test_buyNowCreateOrder.py - [line:135] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:21:14,649 - test_buyNowCreateOrder.py - [line:152] - INFO: 订单的原价格为：198.00
2020-08-28 19:21:14,670 - test_buyNowCreateOrder.py - [line:162] - INFO: 优惠券的金额为：50.00
2020-08-28 19:21:14,670 - test_buyNowCreateOrder.py - [line:167] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:21:14,670 - test_buyNowCreateOrder.py - [line:170] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:21:14,670 - test_buyNowCreateOrder.py - [line:188] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:21:14,670 - test_buyNowCreateOrder.py - [line:206] - INFO: 第6条用例执行通过
2020-08-28 19:21:14,863 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:21:14,864 - test_buyNowCreateOrder.py - [line:134] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3154}
2020-08-28 19:21:14,864 - test_buyNowCreateOrder.py - [line:135] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:21:15,234 - test_buyNowCreateOrder.py - [line:152] - INFO: 订单的原价格为：198.00
2020-08-28 19:21:15,278 - test_buyNowCreateOrder.py - [line:162] - INFO: 优惠券的金额为：50.00
2020-08-28 19:21:15,278 - test_buyNowCreateOrder.py - [line:167] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:21:15,278 - test_buyNowCreateOrder.py - [line:170] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:21:15,278 - test_buyNowCreateOrder.py - [line:188] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:21:15,279 - test_buyNowCreateOrder.py - [line:206] - INFO: 第7条用例执行通过
2020-08-28 19:21:15,468 - test_buyNowCreateOrder.py - [line:133] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:21:15,468 - test_buyNowCreateOrder.py - [line:134] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3689}
2020-08-28 19:21:15,468 - test_buyNowCreateOrder.py - [line:135] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:21:15,816 - test_buyNowCreateOrder.py - [line:152] - INFO: 订单的原价格为：198.00
2020-08-28 19:21:15,848 - test_buyNowCreateOrder.py - [line:162] - INFO: 优惠券的金额为：50.00
2020-08-28 19:21:15,848 - test_buyNowCreateOrder.py - [line:167] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:21:15,848 - test_buyNowCreateOrder.py - [line:174] - INFO: L1用户计算后的订单实付金额为：148.00
2020-08-28 19:21:15,848 - test_buyNowCreateOrder.py - [line:209] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('148.00')
2020-08-28 19:45:57,108 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:45:57,108 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:45:57,108 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:45:57,637 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:45:57,637 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3155}
2020-08-28 19:45:57,637 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:45:58,166 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:45:58,166 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3269}
2020-08-28 19:45:58,166 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:45:58,710 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:45:58,710 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3270}
2020-08-28 19:45:58,710 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:45:59,108 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:45:59,108 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:45:59,108 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:46:01,176 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:46:01,176 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3156}
2020-08-28 19:46:01,177 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:46:01,866 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:46:01,867 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3157}
2020-08-28 19:46:01,867 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:46:02,568 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:46:02,568 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3690}
2020-08-28 19:46:02,569 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:46:41,710 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:46:41,710 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:46:41,711 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:46:42,245 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:46:42,245 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3158}
2020-08-28 19:46:42,245 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:46:42,810 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:46:42,810 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3270}
2020-08-28 19:46:42,810 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:46:43,327 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:46:43,327 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3271}
2020-08-28 19:46:43,327 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:46:43,764 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:46:43,765 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:46:43,765 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:46:44,407 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:46:44,407 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3159}
2020-08-28 19:46:44,407 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:46:45,100 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:46:45,100 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3160}
2020-08-28 19:46:45,101 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:46:45,744 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:46:45,744 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3691}
2020-08-28 19:46:45,744 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:47:37,576 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:47:37,576 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:47:37,576 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:47:37,898 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 19:47:37,908 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 19:47:37,908 - test_buyNowCreateOrder.py - [line:220] - INFO: 第1条用例执行通过
2020-08-28 19:47:38,086 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:47:38,086 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3161}
2020-08-28 19:47:38,086 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:47:38,468 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 19:47:38,490 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:47:38,490 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 19:47:38,490 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 19:47:38,490 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 19:47:38,490 - test_buyNowCreateOrder.py - [line:220] - INFO: 第2条用例执行通过
2020-08-28 19:47:38,641 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:47:38,641 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3271}
2020-08-28 19:47:38,641 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:47:38,995 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 19:47:39,023 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 19:47:39,023 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 19:47:39,023 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 19:47:39,023 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 19:47:39,023 - test_buyNowCreateOrder.py - [line:220] - INFO: 第3条用例执行通过
2020-08-28 19:47:39,184 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:47:39,184 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3272}
2020-08-28 19:47:39,185 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:47:39,529 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 19:47:39,541 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 19:47:39,541 - test_buyNowCreateOrder.py - [line:220] - INFO: 第4条用例执行通过
2020-08-28 19:47:39,598 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:47:39,598 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:47:39,598 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:47:40,080 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 19:47:40,093 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 19:47:40,093 - test_buyNowCreateOrder.py - [line:220] - INFO: 第5条用例执行通过
2020-08-28 19:47:40,262 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:47:40,262 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3162}
2020-08-28 19:47:40,262 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:47:40,758 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:47:40,782 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:47:40,782 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:47:40,783 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:47:40,783 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:47:40,783 - test_buyNowCreateOrder.py - [line:220] - INFO: 第6条用例执行通过
2020-08-28 19:47:40,936 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:47:40,936 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3163}
2020-08-28 19:47:40,936 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:47:41,432 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:47:41,459 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:47:41,459 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:47:41,459 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:47:41,460 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:47:41,460 - test_buyNowCreateOrder.py - [line:220] - INFO: 第7条用例执行通过
2020-08-28 19:47:41,616 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:47:41,617 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3692}
2020-08-28 19:47:41,617 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:47:42,145 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:47:42,168 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:47:42,168 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:49:15,156 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:49:15,156 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:49:15,156 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:49:15,478 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 19:49:15,489 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 19:49:15,490 - test_buyNowCreateOrder.py - [line:220] - INFO: 第1条用例执行通过
2020-08-28 19:49:15,664 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:49:15,664 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3164}
2020-08-28 19:49:15,665 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:49:16,024 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 19:49:16,050 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:49:16,050 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 19:49:16,050 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 19:49:16,050 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 19:49:16,050 - test_buyNowCreateOrder.py - [line:220] - INFO: 第2条用例执行通过
2020-08-28 19:49:16,207 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:49:16,207 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3272}
2020-08-28 19:49:16,207 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:49:16,559 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 19:49:16,583 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 19:49:16,583 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 19:49:16,583 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 19:49:16,583 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 19:49:16,583 - test_buyNowCreateOrder.py - [line:220] - INFO: 第3条用例执行通过
2020-08-28 19:49:16,736 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:49:16,736 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3273}
2020-08-28 19:49:16,736 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:49:17,103 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 19:49:17,118 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 19:49:17,118 - test_buyNowCreateOrder.py - [line:220] - INFO: 第4条用例执行通过
2020-08-28 19:49:17,178 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:49:17,178 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:49:17,178 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:49:17,652 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 19:49:17,665 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 19:49:17,666 - test_buyNowCreateOrder.py - [line:220] - INFO: 第5条用例执行通过
2020-08-28 19:49:17,821 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:49:17,821 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3165}
2020-08-28 19:49:17,821 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:49:18,347 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:49:18,376 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:49:18,376 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:49:18,376 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:49:18,376 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:49:18,376 - test_buyNowCreateOrder.py - [line:220] - INFO: 第6条用例执行通过
2020-08-28 19:49:18,534 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:49:18,534 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3166}
2020-08-28 19:49:18,534 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:49:19,026 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:49:19,048 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:49:19,048 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:49:19,048 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:49:19,048 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:49:19,049 - test_buyNowCreateOrder.py - [line:220] - INFO: 第7条用例执行通过
2020-08-28 19:49:19,199 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:49:19,199 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3693}
2020-08-28 19:49:19,199 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:49:19,701 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:49:19,744 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:49:19,744 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:53:50,042 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:53:50,042 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:53:50,042 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:53:50,396 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 19:53:50,408 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 19:53:50,408 - test_buyNowCreateOrder.py - [line:220] - INFO: 第1条用例执行通过
2020-08-28 19:53:50,587 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:53:50,587 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3167}
2020-08-28 19:53:50,587 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:53:50,947 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 19:53:50,968 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:53:50,968 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 19:53:50,969 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 19:53:50,969 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 19:53:50,969 - test_buyNowCreateOrder.py - [line:220] - INFO: 第2条用例执行通过
2020-08-28 19:53:51,132 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:53:51,132 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3273}
2020-08-28 19:53:51,132 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:53:51,521 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 19:53:51,543 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 19:53:51,544 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 19:53:51,544 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 19:53:51,544 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 19:53:51,544 - test_buyNowCreateOrder.py - [line:220] - INFO: 第3条用例执行通过
2020-08-28 19:53:51,722 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:53:51,722 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3274}
2020-08-28 19:53:51,722 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:53:52,051 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 19:53:52,064 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 19:53:52,064 - test_buyNowCreateOrder.py - [line:220] - INFO: 第4条用例执行通过
2020-08-28 19:53:52,123 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:53:52,123 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:53:52,123 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:53:52,620 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 19:53:52,634 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 19:53:52,634 - test_buyNowCreateOrder.py - [line:220] - INFO: 第5条用例执行通过
2020-08-28 19:53:52,789 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:53:52,789 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3168}
2020-08-28 19:53:52,789 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:53:53,255 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:53:53,278 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:53:53,278 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:53:53,278 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:53:53,278 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:53:53,278 - test_buyNowCreateOrder.py - [line:220] - INFO: 第6条用例执行通过
2020-08-28 19:53:53,424 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:53:53,425 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3169}
2020-08-28 19:53:53,425 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:53:53,895 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:53:53,919 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:53:53,920 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:53:53,920 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:53:53,920 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:53:53,920 - test_buyNowCreateOrder.py - [line:220] - INFO: 第7条用例执行通过
2020-08-28 19:53:54,070 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:53:54,071 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3694}
2020-08-28 19:53:54,071 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:53:54,563 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:53:54,586 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:53:54,586 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:55:11,958 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:55:11,958 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:55:11,958 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:55:12,294 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 19:55:12,306 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 19:55:12,306 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 19:55:12,512 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:55:12,512 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3170}
2020-08-28 19:55:12,512 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:55:12,857 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 19:55:12,879 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:55:12,880 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 19:55:12,880 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 19:55:12,880 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 19:55:12,880 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 19:55:13,047 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:55:13,047 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3274}
2020-08-28 19:55:13,048 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:55:13,419 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 19:55:13,441 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 19:55:13,441 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 19:55:13,441 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 19:55:13,441 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 19:55:13,441 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 19:55:13,634 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:55:13,634 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3275}
2020-08-28 19:55:13,635 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:55:13,984 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 19:55:13,995 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 19:55:13,996 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 19:55:14,064 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:55:14,064 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:55:14,064 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:55:14,940 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 19:55:14,955 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 19:55:14,955 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 19:55:15,127 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:55:15,127 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3171}
2020-08-28 19:55:15,128 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:55:16,040 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:55:16,066 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:55:16,066 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:55:16,067 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:55:16,067 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:55:16,067 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 19:55:16,253 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:55:16,254 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3172}
2020-08-28 19:55:16,254 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:55:17,139 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:55:17,164 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:55:17,164 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:55:17,164 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:55:17,164 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:55:17,165 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 19:55:17,328 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:55:17,328 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3695}
2020-08-28 19:55:17,328 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:55:18,255 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:55:18,279 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:55:18,279 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:59:28,679 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 19:59:28,680 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:59:28,680 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 19:59:29,016 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 19:59:29,029 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 19:59:29,029 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 19:59:29,203 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 19:59:29,203 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3173}
2020-08-28 19:59:29,203 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 19:59:29,570 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 19:59:29,591 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:59:29,592 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 19:59:29,592 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 19:59:29,592 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 19:59:29,592 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 19:59:29,769 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 19:59:29,770 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3275}
2020-08-28 19:59:29,770 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 19:59:30,110 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 19:59:30,141 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 19:59:30,141 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 19:59:30,141 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 19:59:30,142 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 19:59:30,142 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 19:59:30,293 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 19:59:30,293 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3276}
2020-08-28 19:59:30,293 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 19:59:30,623 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 19:59:30,634 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 19:59:30,635 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 19:59:30,698 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 19:59:30,698 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 19:59:30,698 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 19:59:31,201 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 19:59:31,214 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 19:59:31,214 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 19:59:31,371 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 19:59:31,371 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3174}
2020-08-28 19:59:31,371 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 19:59:31,911 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:59:31,938 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:59:31,939 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:59:31,939 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:59:31,939 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:59:31,939 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 19:59:32,096 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 19:59:32,096 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3175}
2020-08-28 19:59:32,096 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 19:59:32,619 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:59:32,644 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:59:32,644 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:59:32,644 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 19:59:32,644 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 19:59:32,644 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 19:59:32,804 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 19:59:32,804 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3696}
2020-08-28 19:59:32,805 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 19:59:33,315 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 19:59:33,345 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 19:59:33,346 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 19:59:33,346 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：5.92000
2020-08-28 19:59:33,346 - test_buyNowCreateOrder.py - [line:225] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('5.92000')
2020-08-28 20:00:55,147 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:00:55,147 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:00:55,147 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:00:55,474 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:00:55,486 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:00:55,486 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 20:00:55,676 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:00:55,676 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3176}
2020-08-28 20:00:55,676 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:00:56,014 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 20:00:56,042 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:00:56,042 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 20:00:56,042 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 20:00:56,042 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:00:56,043 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 20:00:56,185 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:00:56,185 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3276}
2020-08-28 20:00:56,186 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:00:56,529 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:00:56,554 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:00:56,554 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:00:56,554 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 20:00:56,554 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:00:56,554 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 20:00:56,723 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:00:56,723 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3277}
2020-08-28 20:00:56,723 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:00:57,040 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:00:57,052 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:00:57,052 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 20:00:57,124 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:00:57,124 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:00:57,124 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:00:57,636 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:00:57,649 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:00:57,649 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 20:00:57,795 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:00:57,795 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3177}
2020-08-28 20:00:57,795 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:00:58,285 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:00:58,309 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:00:58,309 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:00:58,309 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:00:58,309 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:00:58,309 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 20:00:58,456 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:00:58,456 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3178}
2020-08-28 20:00:58,456 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:00:58,964 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:00:58,990 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:00:58,990 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:00:58,990 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:00:58,990 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:00:58,990 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 20:00:59,133 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:00:59,133 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3697}
2020-08-28 20:00:59,133 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:00:59,601 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:00:59,624 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:00:59,625 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:00:59,625 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：192.08000
2020-08-28 20:00:59,625 - test_buyNowCreateOrder.py - [line:225] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('192.08000')
2020-08-28 20:02:59,773 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:02:59,773 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:02:59,774 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:03:00,211 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:03:00,223 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:03:00,223 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 20:03:00,397 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:03:00,397 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3179}
2020-08-28 20:03:00,397 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:03:00,740 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 20:03:00,764 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:03:00,764 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 20:03:00,764 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 20:03:00,765 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:03:00,765 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 20:03:00,945 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:03:00,946 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3277}
2020-08-28 20:03:00,946 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:03:01,273 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:03:01,295 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:03:01,295 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:03:01,295 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 20:03:01,295 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:03:01,295 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 20:03:01,453 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:03:01,453 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3278}
2020-08-28 20:03:01,453 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:03:01,798 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:03:01,812 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:03:01,812 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 20:03:01,878 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:03:01,878 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:03:01,878 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:03:02,347 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:03:02,361 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:03:02,362 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 20:03:02,517 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:03:02,518 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3180}
2020-08-28 20:03:02,518 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:03:03,015 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:03:03,037 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:03:03,037 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:03:03,037 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:03:03,037 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:03:03,037 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 20:03:03,177 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:03:03,177 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3181}
2020-08-28 20:03:03,177 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:03:03,659 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:03:03,682 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:03:03,682 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:03:03,682 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:03:03,682 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:03:03,682 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 20:03:03,836 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:03:03,836 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3698}
2020-08-28 20:03:03,836 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:03:04,292 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:03:04,315 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:03:04,315 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:03:04,316 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：142.08000
2020-08-28 20:03:04,316 - test_buyNowCreateOrder.py - [line:225] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('142.08000')
2020-08-28 20:05:29,661 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:05:29,662 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:05:29,663 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:05:30,068 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:05:30,090 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:05:30,090 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 20:05:30,330 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:05:30,331 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3182}
2020-08-28 20:05:30,331 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:05:30,783 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 20:05:30,824 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:05:30,824 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 20:05:30,824 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 20:05:30,824 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:05:30,825 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 20:05:31,040 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:05:31,040 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3278}
2020-08-28 20:05:31,040 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:05:31,500 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:05:31,539 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:05:31,540 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:05:31,540 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 20:05:31,540 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:05:31,540 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 20:05:31,776 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:05:31,777 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3279}
2020-08-28 20:05:31,777 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:05:32,218 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:05:32,240 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:05:32,240 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 20:05:32,326 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:05:32,326 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:05:32,326 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:05:32,848 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:05:32,869 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:05:32,869 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 20:05:33,096 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:05:33,096 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3183}
2020-08-28 20:05:33,096 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:05:33,610 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:05:33,669 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:05:33,669 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:05:33,670 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:05:33,670 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:05:33,670 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 20:05:33,910 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:05:33,910 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3184}
2020-08-28 20:05:33,910 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:05:34,414 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:05:34,461 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:05:34,462 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:05:34,462 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:05:34,462 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:05:34,462 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 20:05:34,714 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:05:34,714 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3699}
2020-08-28 20:05:34,714 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:05:35,205 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:05:35,258 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:05:35,258 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:05:35,258 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：142.08000
2020-08-28 20:05:35,259 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:05:35,259 - test_buyNowCreateOrder.py - [line:225] - ERROR: 第8条用例执行失败： :: Decimal('148.00') != Decimal('142')
2020-08-28 20:07:36,607 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:07:36,608 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:07:36,608 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:07:36,953 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:07:36,974 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:07:36,974 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 20:07:37,204 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:07:37,204 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3185}
2020-08-28 20:07:37,205 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:07:37,660 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 20:07:37,699 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:07:37,699 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 20:07:37,699 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 20:07:37,699 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:07:37,700 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 20:07:37,936 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:07:37,936 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3279}
2020-08-28 20:07:37,936 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:07:38,374 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:07:38,413 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:07:38,413 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:07:38,414 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 20:07:38,414 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:07:38,414 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 20:07:38,639 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:07:38,639 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3280}
2020-08-28 20:07:38,639 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:07:38,995 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:07:39,016 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:07:39,016 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 20:07:39,299 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:07:39,299 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:07:39,299 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:07:40,032 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:07:40,135 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:07:40,135 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 20:07:40,447 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:07:40,447 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3186}
2020-08-28 20:07:40,448 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:07:40,969 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:07:41,012 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:07:41,012 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:07:41,013 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:07:41,013 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:07:41,013 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 20:07:41,226 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:07:41,226 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3187}
2020-08-28 20:07:41,226 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:07:41,793 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:07:41,841 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:07:41,842 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:07:41,842 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:07:41,842 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:07:41,842 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 20:07:42,078 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:07:42,078 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3700}
2020-08-28 20:07:42,078 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:07:43,511 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:07:43,555 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:07:43,555 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:07:43,556 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：142.08000
2020-08-28 20:07:43,558 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:07:43,558 - test_buyNowCreateOrder.py - [line:225] - ERROR: 第8条用例执行失败： :: Decimal('148.00') != Decimal('142')
2020-08-28 20:12:49,225 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:12:49,226 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:12:49,226 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:12:49,603 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:12:49,627 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:12:49,627 - test_buyNowCreateOrder.py - [line:221] - INFO: 第1条用例执行通过
2020-08-28 20:12:49,861 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:12:49,862 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3144}
2020-08-28 20:12:49,862 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:12:52,459 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：207.00
2020-08-28 20:12:52,499 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:12:52,499 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.00; 实际订单支付金额157.0000; 订单的市场价：207.00; 优惠券的金额为：50.00;
2020-08-28 20:12:52,500 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.00
2020-08-28 20:12:52,500 - test_buyNowCreateOrder.py - [line:206] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:12:52,500 - test_buyNowCreateOrder.py - [line:221] - INFO: 第2条用例执行通过
2020-08-28 20:12:52,723 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:12:52,723 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3145}
2020-08-28 20:12:52,723 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:12:53,094 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:12:53,144 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:12:53,144 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:12:53,145 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 20:12:53,145 - test_buyNowCreateOrder.py - [line:206] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:12:53,145 - test_buyNowCreateOrder.py - [line:221] - INFO: 第3条用例执行通过
2020-08-28 20:12:53,365 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:12:53,365 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3280}
2020-08-28 20:12:53,365 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:12:53,775 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:12:53,795 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:12:53,795 - test_buyNowCreateOrder.py - [line:221] - INFO: 第4条用例执行通过
2020-08-28 20:12:53,885 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:12:53,885 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:12:53,885 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:12:54,408 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:12:54,431 - test_buyNowCreateOrder.py - [line:215] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:12:54,432 - test_buyNowCreateOrder.py - [line:221] - INFO: 第5条用例执行通过
2020-08-28 20:12:54,665 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:12:54,665 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3147}
2020-08-28 20:12:54,665 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:12:55,223 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:12:55,265 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:12:55,265 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:12:55,266 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:12:55,266 - test_buyNowCreateOrder.py - [line:203] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:12:55,266 - test_buyNowCreateOrder.py - [line:221] - INFO: 第6条用例执行通过
2020-08-28 20:12:55,509 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:12:55,509 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3148}
2020-08-28 20:12:55,509 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:12:56,240 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:12:56,317 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:12:56,317 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:12:56,317 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00
2020-08-28 20:12:56,317 - test_buyNowCreateOrder.py - [line:203] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:12:56,317 - test_buyNowCreateOrder.py - [line:221] - INFO: 第7条用例执行通过
2020-08-28 20:12:56,553 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:12:56,553 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-08-28 20:12:56,553 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:12:57,076 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：198.00
2020-08-28 20:12:57,122 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:12:57,123 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：198.00; 优惠券的金额为：50.00;
2020-08-28 20:12:57,123 - test_buyNowCreateOrder.py - [line:186] - INFO: L1用户计算后的订单实付金额为：-1036.00000
2020-08-28 20:12:57,124 - test_buyNowCreateOrder.py - [line:203] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:12:57,124 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第8条用例执行失败： :: Decimal('148.00') != Decimal('142')
2020-08-28 20:30:04,684 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:30:04,684 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:30:04,684 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:30:05,146 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:30:05,167 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:30:05,168 - test_buyNowCreateOrder.py - [line:221] - INFO: 第1条用例执行通过
2020-08-28 20:30:05,441 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:30:05,441 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3149}
2020-08-28 20:30:05,442 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:30:05,863 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:30:05,914 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:30:06,145 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:30:06,145 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-28 20:30:06,145 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:30:06,585 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:30:06,628 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:30:06,864 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:30:06,864 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-28 20:30:06,865 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:30:07,294 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:30:07,313 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:30:07,313 - test_buyNowCreateOrder.py - [line:221] - INFO: 第4条用例执行通过
2020-08-28 20:30:07,405 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:30:07,405 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:30:07,405 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:30:07,971 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:30:07,997 - test_buyNowCreateOrder.py - [line:215] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:30:07,997 - test_buyNowCreateOrder.py - [line:221] - INFO: 第5条用例执行通过
2020-08-28 20:30:08,226 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:30:08,227 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3150}
2020-08-28 20:30:08,227 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:30:08,723 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:30:08,763 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:30:08,996 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:30:08,996 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3151}
2020-08-28 20:30:08,996 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:30:09,580 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:30:09,623 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:30:10,759 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:30:10,760 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3688}
2020-08-28 20:30:10,760 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:30:11,315 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:30:11,358 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:31:57,322 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:31:57,322 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:31:57,323 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:31:57,702 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:31:57,721 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:31:57,721 - test_buyNowCreateOrder.py - [line:221] - INFO: 第1条用例执行通过
2020-08-28 20:31:57,978 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:31:57,979 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3152}
2020-08-28 20:31:57,979 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:31:58,413 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:31:58,456 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:31:58,457 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：19.00; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：50.00;
2020-08-28 20:31:58,457 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：19.00
2020-08-28 20:31:58,457 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第2条用例执行失败： :: Decimal('157.0000') != Decimal('19.00')
2020-08-28 20:31:58,682 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:31:58,682 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-28 20:31:58,683 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:31:59,115 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:31:59,163 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:31:59,163 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:31:59,164 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 20:31:59,164 - test_buyNowCreateOrder.py - [line:206] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:31:59,164 - test_buyNowCreateOrder.py - [line:221] - INFO: 第3条用例执行通过
2020-08-28 20:31:59,373 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:31:59,373 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3280}
2020-08-28 20:31:59,373 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:31:59,828 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:31:59,848 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:31:59,849 - test_buyNowCreateOrder.py - [line:221] - INFO: 第4条用例执行通过
2020-08-28 20:31:59,945 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:31:59,945 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:31:59,945 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:32:00,508 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:32:00,532 - test_buyNowCreateOrder.py - [line:215] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:32:00,533 - test_buyNowCreateOrder.py - [line:221] - INFO: 第5条用例执行通过
2020-08-28 20:32:00,757 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:32:00,757 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3153}
2020-08-28 20:32:00,757 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:32:01,283 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:32:01,325 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:32:01,325 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：49.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：50.00;
2020-08-28 20:32:01,325 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：49.00
2020-08-28 20:32:01,326 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第6条用例执行失败： :: Decimal('148.0000') != Decimal('49.00')
2020-08-28 20:32:01,545 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:32:01,546 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3154}
2020-08-28 20:32:01,546 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:32:02,116 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:32:02,166 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:32:02,166 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：49.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：50.00;
2020-08-28 20:32:02,167 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：49.00
2020-08-28 20:32:02,167 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第7条用例执行失败： :: Decimal('148.0000') != Decimal('49.00')
2020-08-28 20:32:02,426 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:32:02,426 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3689}
2020-08-28 20:32:02,426 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:32:03,044 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:32:03,087 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：50.00
2020-08-28 20:32:03,087 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：49.00; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：50.00;
2020-08-28 20:32:03,088 - test_buyNowCreateOrder.py - [line:186] - INFO: L1用户计算后的订单实付金额为：90.08080808080808080808080808
2020-08-28 20:32:03,088 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第8条用例执行失败：False is not true
2020-08-28 20:34:19,955 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:34:19,955 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:34:19,956 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:34:20,317 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:34:20,338 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:34:20,339 - test_buyNowCreateOrder.py - [line:221] - INFO: 第1条用例执行通过
2020-08-28 20:34:20,556 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:34:20,557 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3188}
2020-08-28 20:34:20,557 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:34:20,939 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:34:20,975 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 20:34:20,975 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：52.33333333333333333333333333; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 20:34:20,976 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：52.33333333333333333333333333
2020-08-28 20:34:20,976 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第2条用例执行失败： :: Decimal('157.0000') != Decimal('52.33333333333333333333333333')
2020-08-28 20:34:21,188 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:34:21,188 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3280}
2020-08-28 20:34:21,188 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:34:21,573 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:34:21,616 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:34:21,616 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:34:21,617 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00
2020-08-28 20:34:21,617 - test_buyNowCreateOrder.py - [line:206] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:34:21,617 - test_buyNowCreateOrder.py - [line:221] - INFO: 第3条用例执行通过
2020-08-28 20:34:21,831 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:34:21,831 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3281}
2020-08-28 20:34:21,831 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:34:22,267 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:34:22,286 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:34:22,287 - test_buyNowCreateOrder.py - [line:221] - INFO: 第4条用例执行通过
2020-08-28 20:34:22,383 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:34:22,383 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:34:22,383 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:34:22,921 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:34:22,943 - test_buyNowCreateOrder.py - [line:215] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:34:22,944 - test_buyNowCreateOrder.py - [line:221] - INFO: 第5条用例执行通过
2020-08-28 20:34:24,346 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:34:24,346 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3189}
2020-08-28 20:34:24,346 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:34:25,080 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:34:25,131 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:34:25,131 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:34:25,132 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：74.00
2020-08-28 20:34:25,132 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第6条用例执行失败： :: Decimal('148.0000') != Decimal('74.00')
2020-08-28 20:34:25,376 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:34:25,376 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3190}
2020-08-28 20:34:25,376 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:34:25,967 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:34:26,014 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:34:26,014 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:34:26,014 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：74.00
2020-08-28 20:34:26,014 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第7条用例执行失败： :: Decimal('148.0000') != Decimal('74.00')
2020-08-28 20:34:26,232 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:34:26,232 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3701}
2020-08-28 20:34:26,232 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:34:26,788 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:34:26,831 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:34:26,831 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:34:26,831 - test_buyNowCreateOrder.py - [line:186] - INFO: L1用户计算后的订单实付金额为：136.0404040404040404040404040
2020-08-28 20:34:26,831 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第8条用例执行失败：False is not true
2020-08-28 20:37:30,799 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:37:30,800 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:37:30,800 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:37:31,142 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:37:31,161 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:37:31,161 - test_buyNowCreateOrder.py - [line:221] - INFO: 第1条用例执行通过
2020-08-28 20:37:31,389 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:37:31,389 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3191}
2020-08-28 20:37:31,389 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:37:32,732 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:37:33,687 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 20:37:33,687 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：52.33333333333333333333333333; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 20:37:33,688 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：52.33333333333333333333333333; 抵扣金额
2020-08-28 20:37:33,688 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第2条用例执行失败： :: Decimal('157.0000') != Decimal('52.33333333333333333333333333')
2020-08-28 20:37:33,912 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:37:33,912 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3281}
2020-08-28 20:37:33,913 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:37:34,251 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:37:34,407 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:37:34,407 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:37:34,407 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00; 抵扣金额
2020-08-28 20:37:34,407 - test_buyNowCreateOrder.py - [line:206] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:37:34,408 - test_buyNowCreateOrder.py - [line:221] - INFO: 第3条用例执行通过
2020-08-28 20:37:35,031 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:37:35,032 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3282}
2020-08-28 20:37:35,032 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:37:35,425 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:37:35,445 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:37:35,446 - test_buyNowCreateOrder.py - [line:221] - INFO: 第4条用例执行通过
2020-08-28 20:37:35,534 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:37:35,534 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:37:35,534 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:37:36,049 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:37:36,071 - test_buyNowCreateOrder.py - [line:215] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:37:36,071 - test_buyNowCreateOrder.py - [line:221] - INFO: 第5条用例执行通过
2020-08-28 20:37:36,304 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:37:36,304 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3192}
2020-08-28 20:37:36,304 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:37:36,851 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:37:36,900 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:37:36,901 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:37:36,901 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：74.00; 抵扣金额
2020-08-28 20:37:36,901 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第6条用例执行失败： :: Decimal('148.0000') != Decimal('74.00')
2020-08-28 20:37:37,141 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:37:37,141 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3193}
2020-08-28 20:37:37,141 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:37:37,690 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:37:37,735 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:37:37,735 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:37:37,736 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：74.00; 抵扣金额
2020-08-28 20:37:37,736 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第7条用例执行失败： :: Decimal('148.0000') != Decimal('74.00')
2020-08-28 20:37:37,967 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:37:37,967 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3702}
2020-08-28 20:37:37,967 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:37:38,484 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:37:38,525 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:37:38,526 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:37:38,526 - test_buyNowCreateOrder.py - [line:186] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020
2020-08-28 20:37:38,526 - test_buyNowCreateOrder.py - [line:203] - INFO: 购买自营商品，预期的积分是：74.00
2020-08-28 20:37:38,526 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第8条用例执行失败： :: Decimal('74.00') != Decimal('142')
2020-08-28 20:39:56,774 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:39:56,775 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:39:56,775 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:39:57,144 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:39:57,166 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:39:57,166 - test_buyNowCreateOrder.py - [line:223] - INFO: 第1条用例执行通过
2020-08-28 20:39:57,733 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:39:57,733 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3194}
2020-08-28 20:39:57,733 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:39:58,353 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:39:58,389 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 20:39:58,390 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：52.33333333333333333333333333; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 20:39:58,390 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：52.33333333333333333333333333; 抵扣金额
2020-08-28 20:39:58,390 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第2条用例执行失败： :: Decimal('157.0000') != Decimal('52.33333333333333333333333333')
2020-08-28 20:39:58,829 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:39:58,829 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3282}
2020-08-28 20:39:58,830 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:39:59,370 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:39:59,412 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:39:59,412 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:39:59,413 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00; 抵扣金额
2020-08-28 20:39:59,413 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:39:59,413 - test_buyNowCreateOrder.py - [line:223] - INFO: 第3条用例执行通过
2020-08-28 20:39:59,622 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:39:59,622 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3283}
2020-08-28 20:39:59,622 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:39:59,981 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:40:00,002 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:40:00,002 - test_buyNowCreateOrder.py - [line:223] - INFO: 第4条用例执行通过
2020-08-28 20:40:02,209 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:40:02,209 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:40:02,210 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:40:02,713 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:40:02,737 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:40:02,737 - test_buyNowCreateOrder.py - [line:223] - INFO: 第5条用例执行通过
2020-08-28 20:40:02,954 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:40:02,954 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3195}
2020-08-28 20:40:02,954 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:40:03,489 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:40:03,533 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:40:03,533 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:40:03,533 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：74.00; 抵扣金额
2020-08-28 20:40:03,534 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第6条用例执行失败： :: Decimal('148.0000') != Decimal('74.00')
2020-08-28 20:40:03,752 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:40:03,752 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3196}
2020-08-28 20:40:03,753 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:40:04,295 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:40:04,340 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:40:04,340 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:40:04,340 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：74.00; 抵扣金额
2020-08-28 20:40:04,340 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第7条用例执行失败： :: Decimal('148.0000') != Decimal('74.00')
2020-08-28 20:40:04,693 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:40:04,694 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3703}
2020-08-28 20:40:04,694 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:40:05,425 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:40:05,556 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:40:05,556 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：74.00; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:40:05,557 - test_buyNowCreateOrder.py - [line:188] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; a:71.01010101010101010101010101
2020-08-28 20:40:05,557 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买自营商品，预期的积分是：74.00
2020-08-28 20:40:05,557 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第8条用例执行失败： :: Decimal('74.00') != Decimal('142')
2020-08-28 20:42:33,016 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:42:33,016 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:42:33,016 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:42:33,380 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:42:33,410 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:42:33,410 - test_buyNowCreateOrder.py - [line:223] - INFO: 第1条用例执行通过
2020-08-28 20:42:33,649 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:42:33,650 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3197}
2020-08-28 20:42:33,650 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:42:34,099 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:42:34,138 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 20:42:34,138 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：157.0000000000000000000000000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 20:42:34,138 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 抵扣金额
2020-08-28 20:42:34,138 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:42:34,139 - test_buyNowCreateOrder.py - [line:223] - INFO: 第2条用例执行通过
2020-08-28 20:42:34,355 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:42:34,355 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3283}
2020-08-28 20:42:34,355 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:42:34,812 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:42:34,858 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:42:34,858 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：180.00; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:42:34,858 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：180.00; 抵扣金额
2020-08-28 20:42:34,859 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:42:34,859 - test_buyNowCreateOrder.py - [line:223] - INFO: 第3条用例执行通过
2020-08-28 20:42:35,491 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:42:35,491 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3284}
2020-08-28 20:42:35,491 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:42:35,874 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:42:35,896 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:42:35,896 - test_buyNowCreateOrder.py - [line:223] - INFO: 第4条用例执行通过
2020-08-28 20:42:36,107 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:42:36,108 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:42:36,108 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:42:36,679 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:42:36,716 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:42:36,716 - test_buyNowCreateOrder.py - [line:223] - INFO: 第5条用例执行通过
2020-08-28 20:42:36,949 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:42:36,949 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3198}
2020-08-28 20:42:36,950 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:42:37,486 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:42:37,529 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:42:37,529 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:42:37,529 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00; 抵扣金额
2020-08-28 20:42:37,530 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:42:37,530 - test_buyNowCreateOrder.py - [line:223] - INFO: 第6条用例执行通过
2020-08-28 20:42:37,755 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:42:37,756 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3199}
2020-08-28 20:42:37,756 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:42:38,311 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:42:38,352 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:42:38,352 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:42:38,352 - test_buyNowCreateOrder.py - [line:177] - INFO: L0用户计算后的订单实付金额为：148.00; 抵扣金额
2020-08-28 20:42:38,352 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:42:38,352 - test_buyNowCreateOrder.py - [line:223] - INFO: 第7条用例执行通过
2020-08-28 20:42:38,560 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:42:38,560 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3704}
2020-08-28 20:42:38,560 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:42:39,069 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:42:39,115 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:42:39,116 - test_buyNowCreateOrder.py - [line:174] - INFO: 预期订单实付金额：148.00; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:42:39,116 - test_buyNowCreateOrder.py - [line:188] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; a:71.01010101010101010101010101
2020-08-28 20:42:39,116 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买自营商品，预期的积分是：148.00
2020-08-28 20:42:39,116 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第8条用例执行失败： :: Decimal('148.00') != Decimal('142')
2020-08-28 20:43:20,267 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:43:20,268 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:43:20,268 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:43:20,694 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:43:20,713 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:43:20,714 - test_buyNowCreateOrder.py - [line:220] - INFO: 第1条用例执行通过
2020-08-28 20:43:20,951 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:43:20,952 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3200}
2020-08-28 20:43:20,952 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:43:21,411 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:43:21,452 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 20:43:21,667 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:43:21,667 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3284}
2020-08-28 20:43:21,668 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:43:22,121 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:43:22,162 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：99.00
2020-08-28 20:43:22,378 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:43:22,378 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3285}
2020-08-28 20:43:22,378 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:43:22,752 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:43:22,773 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:43:22,774 - test_buyNowCreateOrder.py - [line:220] - INFO: 第4条用例执行通过
2020-08-28 20:43:22,872 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:43:22,872 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:43:22,872 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:43:23,346 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:43:23,379 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:43:23,379 - test_buyNowCreateOrder.py - [line:220] - INFO: 第5条用例执行通过
2020-08-28 20:43:23,587 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:43:23,587 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3201}
2020-08-28 20:43:23,587 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:43:24,097 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:43:24,160 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:43:24,371 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:43:24,371 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3202}
2020-08-28 20:43:24,371 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:43:24,953 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:43:24,999 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:43:25,398 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:43:25,399 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3705}
2020-08-28 20:43:25,399 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:43:26,106 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:43:26,260 - test_buyNowCreateOrder.py - [line:169] - INFO: 优惠券的金额为：25.00
2020-08-28 20:44:36,414 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:44:36,414 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:44:36,414 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:44:36,776 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:44:36,798 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:44:36,799 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 20:44:37,940 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:44:37,940 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3203}
2020-08-28 20:44:37,941 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:44:38,412 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:44:38,460 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 20:44:38,460 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：157.0000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 20:44:38,461 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：157.0000; 抵扣金额
2020-08-28 20:44:38,461 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:44:38,461 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 20:44:38,682 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:44:38,683 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3285}
2020-08-28 20:44:38,683 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:44:39,128 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:44:39,166 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：99.00
2020-08-28 20:44:39,167 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：180.0000; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:44:39,167 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：180.0000; 抵扣金额
2020-08-28 20:44:39,167 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:44:39,167 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 20:44:39,372 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:44:39,373 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3286}
2020-08-28 20:44:39,373 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:44:39,846 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:44:39,865 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:44:39,866 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 20:44:39,953 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:44:39,953 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:44:39,953 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:44:40,495 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:44:40,519 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:44:40,520 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 20:44:40,751 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:44:40,751 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3204}
2020-08-28 20:44:40,751 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:44:41,304 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:44:41,350 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:44:41,350 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:44:41,350 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 20:44:41,350 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 20:44:41,351 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 20:44:41,576 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:44:41,577 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3205}
2020-08-28 20:44:41,577 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:44:42,086 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:44:42,131 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:44:42,131 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:44:42,132 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 20:44:42,132 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 20:44:42,132 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 20:44:42,345 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:44:42,345 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3706}
2020-08-28 20:44:42,345 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:44:42,863 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:44:42,908 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:44:42,908 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：142.0200; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:44:42,908 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; a:71.01010101010101010101010101
2020-08-28 20:44:42,908 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：142.0200
2020-08-28 20:44:42,909 - test_buyNowCreateOrder.py - [line:225] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('142')
2020-08-28 20:49:33,937 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:49:33,937 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:49:33,937 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:49:34,349 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:49:34,369 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:49:34,369 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 20:49:34,594 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:49:34,595 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3155}
2020-08-28 20:49:34,595 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:49:34,964 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:49:35,001 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 20:49:35,001 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：157.0000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 20:49:35,001 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：157.0000; 抵扣金额
2020-08-28 20:49:35,001 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:49:35,001 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 20:49:35,190 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:49:35,190 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3269}
2020-08-28 20:49:35,190 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:49:35,571 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:49:35,613 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：99.00
2020-08-28 20:49:35,614 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：180.0000; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:49:35,614 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：180.0000; 抵扣金额
2020-08-28 20:49:35,614 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:49:35,615 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 20:49:35,828 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:49:35,829 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3270}
2020-08-28 20:49:35,829 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:49:36,191 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:49:36,212 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:49:36,212 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 20:49:36,312 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:49:36,312 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:49:36,312 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:49:37,188 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:49:37,330 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:49:37,330 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 20:49:37,791 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:49:37,791 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3156}
2020-08-28 20:49:37,792 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:49:38,365 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:49:38,407 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:49:38,408 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:49:38,408 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 20:49:38,408 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 20:49:38,408 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 20:49:38,659 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:49:38,659 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3157}
2020-08-28 20:49:38,659 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:49:40,099 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:49:41,059 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:49:41,059 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:49:41,059 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 20:49:41,059 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 20:49:41,059 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 20:49:42,207 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:49:42,208 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3690}
2020-08-28 20:49:42,208 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:49:42,752 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:49:42,797 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:49:42,797 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：142.0200; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:49:42,798 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; a:71.01010101010101010101010101
2020-08-28 20:49:42,798 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：142.0200
2020-08-28 20:49:42,799 - test_buyNowCreateOrder.py - [line:225] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('142')
2020-08-28 20:51:44,756 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 20:51:44,756 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:51:44,756 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 20:51:45,231 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:51:45,251 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 20:51:45,251 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 20:51:45,512 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 20:51:45,513 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3158}
2020-08-28 20:51:45,513 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 20:51:45,948 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 20:51:45,993 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 20:51:45,995 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：157.0000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 20:51:45,995 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：157.0000; 抵扣金额
2020-08-28 20:51:45,995 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 20:51:45,995 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 20:51:46,238 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 20:51:46,238 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3270}
2020-08-28 20:51:46,239 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 20:51:46,757 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 20:51:47,230 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：99.00
2020-08-28 20:51:47,230 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：180.0000; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 20:51:47,230 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：180.0000; 抵扣金额
2020-08-28 20:51:47,231 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 20:51:47,231 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 20:51:48,641 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 20:51:48,641 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3271}
2020-08-28 20:51:48,642 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 20:51:49,023 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 20:51:49,044 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 20:51:49,045 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 20:51:49,158 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 20:51:49,159 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 20:51:49,159 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 20:51:49,895 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:51:49,930 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 20:51:49,931 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 20:51:50,188 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 20:51:50,189 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3159}
2020-08-28 20:51:50,189 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 20:51:51,030 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:51:51,072 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:51:51,073 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:51:51,074 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 20:51:51,074 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 20:51:51,075 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 20:51:51,335 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 20:51:51,336 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3160}
2020-08-28 20:51:51,336 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 20:51:52,443 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:51:52,488 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:51:52,488 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:51:52,489 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 20:51:52,489 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 20:51:52,489 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 20:51:52,726 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 20:51:52,726 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3691}
2020-08-28 20:51:52,726 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 20:51:53,450 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 20:51:53,497 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 20:51:53,498 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：142.0200; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 20:52:17,782 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; a:71.01010101010101010101010101
2020-08-28 21:02:46,892 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 21:02:46,893 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 21:02:46,893 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 21:02:47,258 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 21:02:47,285 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 21:02:47,286 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 21:02:47,555 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 21:02:47,555 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3161}
2020-08-28 21:02:47,556 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 21:02:47,964 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 21:02:48,015 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 21:02:48,015 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：157.0000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 21:02:48,015 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：157.0000; 抵扣金额
2020-08-28 21:02:48,016 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 21:02:48,017 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 21:02:48,261 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 21:02:48,261 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3271}
2020-08-28 21:02:48,262 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 21:02:48,883 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 21:02:49,024 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：99.00
2020-08-28 21:02:49,024 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：180.0000; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 21:02:49,025 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：180.0000; 抵扣金额
2020-08-28 21:02:49,025 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 21:02:49,026 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 21:02:49,694 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 21:02:49,695 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3272}
2020-08-28 21:02:49,695 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 21:02:50,099 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 21:02:50,127 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 21:02:50,127 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 21:02:50,233 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 21:02:50,235 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 21:02:50,235 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 21:02:51,125 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:02:51,148 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 21:02:51,149 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 21:02:51,423 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 21:02:51,423 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3162}
2020-08-28 21:02:51,424 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 21:02:52,324 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:02:52,379 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 21:02:52,379 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 21:02:52,379 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 21:02:52,380 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 21:02:52,380 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 21:02:52,656 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 21:02:52,657 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3163}
2020-08-28 21:02:52,658 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 21:02:53,567 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:02:53,628 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 21:02:53,629 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 21:02:53,629 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 21:02:53,630 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 21:02:53,630 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 21:02:53,877 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 21:02:53,878 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3692}
2020-08-28 21:02:53,878 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 21:03:55,827 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 21:03:55,828 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 21:03:55,828 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 21:03:56,514 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 21:03:56,554 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 21:03:56,554 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 21:03:57,022 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 21:03:57,022 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3164}
2020-08-28 21:03:57,022 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 21:03:57,511 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 21:03:57,710 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 21:03:57,710 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：157.0000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 21:03:57,711 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：157.0000; 抵扣金额
2020-08-28 21:03:57,711 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 21:03:57,712 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 21:03:59,444 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 21:03:59,445 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3272}
2020-08-28 21:03:59,446 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 21:04:03,266 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 21:04:03,348 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：99.00
2020-08-28 21:04:03,349 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：180.0000; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 21:04:03,350 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：180.0000; 抵扣金额
2020-08-28 21:04:03,350 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 21:04:03,351 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 21:04:03,812 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 21:04:03,813 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3273}
2020-08-28 21:04:03,813 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 21:04:04,350 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 21:04:04,374 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 21:04:04,375 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 21:04:04,537 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 21:04:04,538 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 21:04:04,538 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 21:04:06,936 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:04:07,008 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 21:04:07,009 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 21:04:10,677 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 21:04:10,678 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3165}
2020-08-28 21:04:10,678 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 21:04:11,999 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:04:12,130 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 21:04:12,130 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 21:04:12,131 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 21:04:12,131 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 21:04:12,132 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 21:04:12,506 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 21:04:12,506 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3166}
2020-08-28 21:04:12,507 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 21:04:13,333 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:04:13,498 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 21:04:13,498 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 21:04:13,498 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 21:04:13,499 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 21:04:13,499 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 21:04:13,845 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 21:04:13,846 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3693}
2020-08-28 21:04:13,846 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 21:04:14,805 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:04:14,911 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 21:04:14,911 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：142.0200; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 21:04:26,265 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; a:71.01010101010101010101010101
2020-08-28 21:07:08,098 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-28 21:07:08,098 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-28 21:07:08,099 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-28 21:07:08,563 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 21:07:08,586 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：34
2020-08-28 21:07:08,587 - test_buyNowCreateOrder.py - [line:222] - INFO: 第1条用例执行通过
2020-08-28 21:07:08,820 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-28 21:07:08,821 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3167}
2020-08-28 21:07:08,821 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-28 21:07:09,274 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-28 21:07:09,438 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-28 21:07:09,438 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：157.0000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-28 21:07:09,438 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：157.0000; 抵扣金额
2020-08-28 21:07:09,438 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：78
2020-08-28 21:07:09,439 - test_buyNowCreateOrder.py - [line:222] - INFO: 第2条用例执行通过
2020-08-28 21:07:10,194 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-28 21:07:10,195 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3273}
2020-08-28 21:07:10,195 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-28 21:07:10,708 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-28 21:07:10,747 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：99.00
2020-08-28 21:07:10,748 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：180.0000; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-28 21:07:10,748 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：180.0000; 抵扣金额
2020-08-28 21:07:10,748 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买第三方商品，预期的积分是：90
2020-08-28 21:07:10,748 - test_buyNowCreateOrder.py - [line:222] - INFO: 第3条用例执行通过
2020-08-28 21:07:10,971 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-28 21:07:10,971 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3274}
2020-08-28 21:07:10,971 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-28 21:07:11,339 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-28 21:07:11,360 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，期望的积分是：44
2020-08-28 21:07:11,360 - test_buyNowCreateOrder.py - [line:222] - INFO: 第4条用例执行通过
2020-08-28 21:07:11,444 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-28 21:07:11,444 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-28 21:07:11,445 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-28 21:07:11,978 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:07:12,002 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-28 21:07:12,002 - test_buyNowCreateOrder.py - [line:222] - INFO: 第5条用例执行通过
2020-08-28 21:07:12,238 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-28 21:07:12,238 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3168}
2020-08-28 21:07:12,238 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-28 21:07:12,792 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:07:12,838 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 21:07:12,838 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 21:07:12,838 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 21:07:12,838 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 21:07:12,838 - test_buyNowCreateOrder.py - [line:222] - INFO: 第6条用例执行通过
2020-08-28 21:07:13,073 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-28 21:07:13,073 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3169}
2020-08-28 21:07:13,075 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-28 21:07:13,605 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:07:13,650 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 21:07:13,650 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 21:07:13,650 - test_buyNowCreateOrder.py - [line:176] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-28 21:07:13,650 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-28 21:07:13,650 - test_buyNowCreateOrder.py - [line:222] - INFO: 第7条用例执行通过
2020-08-28 21:07:13,881 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-28 21:07:13,881 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3694}
2020-08-28 21:07:13,882 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-28 21:07:14,408 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-28 21:07:14,450 - test_buyNowCreateOrder.py - [line:171] - INFO: 优惠券的金额为：25.00
2020-08-28 21:07:14,451 - test_buyNowCreateOrder.py - [line:173] - INFO: 预期订单实付金额：142.0200; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-28 21:07:14,451 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; a:71.01010101010101010101010101
2020-08-28 21:07:14,451 - test_buyNowCreateOrder.py - [line:204] - INFO: 购买自营商品，预期的积分是：142.0200
2020-08-28 21:07:14,451 - test_buyNowCreateOrder.py - [line:225] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('142')
2020-08-31 10:24:01,199 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-31 10:24:01,200 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-31 10:24:01,200 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-31 10:24:01,657 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-31 10:24:01,669 - test_buyNowCreateOrder.py - [line:221] - INFO: 购买第三方商品，期望的积分是：34
2020-08-31 10:24:01,670 - test_buyNowCreateOrder.py - [line:224] - INFO: 第1条用例执行通过
2020-08-31 10:24:01,898 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-31 10:24:01,899 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3144}
2020-08-31 10:24:01,899 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-31 10:24:02,255 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-31 10:24:02,276 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-31 10:24:02,276 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：157.0000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-31 10:24:02,277 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：157.0000; 抵扣金额
2020-08-31 10:24:02,277 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买第三方商品，预期的积分是：78
2020-08-31 10:24:02,277 - test_buyNowCreateOrder.py - [line:224] - INFO: 第2条用例执行通过
2020-08-31 10:24:02,453 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-31 10:24:02,453 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3145}
2020-08-31 10:24:02,454 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-31 10:24:02,865 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-31 10:24:02,887 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：99.00
2020-08-31 10:24:02,887 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：180.0000; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-31 10:24:02,887 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：180.0000; 抵扣金额
2020-08-31 10:24:02,887 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买第三方商品，预期的积分是：90
2020-08-31 10:24:02,887 - test_buyNowCreateOrder.py - [line:224] - INFO: 第3条用例执行通过
2020-08-31 10:24:03,039 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-31 10:24:03,039 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-31 10:24:03,039 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-31 10:24:03,432 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-31 10:24:03,443 - test_buyNowCreateOrder.py - [line:221] - INFO: 购买第三方商品，期望的积分是：44
2020-08-31 10:24:03,444 - test_buyNowCreateOrder.py - [line:224] - INFO: 第4条用例执行通过
2020-08-31 10:24:03,502 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-31 10:24:03,502 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-31 10:24:03,502 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-31 10:24:05,974 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-31 10:24:05,987 - test_buyNowCreateOrder.py - [line:218] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-31 10:24:05,987 - test_buyNowCreateOrder.py - [line:224] - INFO: 第5条用例执行通过
2020-08-31 10:24:06,170 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-31 10:24:06,170 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3147}
2020-08-31 10:24:06,170 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-31 10:24:06,707 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-31 10:24:06,733 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：25.00
2020-08-31 10:24:06,733 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-31 10:24:06,734 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-31 10:24:06,734 - test_buyNowCreateOrder.py - [line:206] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-31 10:24:06,734 - test_buyNowCreateOrder.py - [line:224] - INFO: 第6条用例执行通过
2020-08-31 10:24:06,887 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-31 10:24:06,887 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3148}
2020-08-31 10:24:06,888 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-31 10:24:07,400 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-31 10:24:07,422 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：25.00
2020-08-31 10:24:07,422 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-31 10:24:07,422 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-31 10:24:07,423 - test_buyNowCreateOrder.py - [line:206] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-31 10:24:07,423 - test_buyNowCreateOrder.py - [line:224] - INFO: 第7条用例执行通过
2020-08-31 10:24:07,569 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-31 10:24:07,569 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-08-31 10:24:07,569 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-31 10:24:08,101 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-31 10:24:08,125 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：25.00
2020-08-31 10:24:08,125 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：142.0200; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-31 10:24:08,125 - test_buyNowCreateOrder.py - [line:189] - INFO: L1用户计算后的订单实付金额为：284.0404040404040404040404040; a:142.0202020202020202020202020
2020-08-31 10:24:08,126 - test_buyNowCreateOrder.py - [line:227] - ERROR: 第8条用例执行失败：False is not true
2020-08-31 10:49:13,267 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第1条测试用例==================================
2020-08-31 10:49:13,267 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-08-31 10:49:13,267 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-08-31 10:49:13,619 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-31 10:49:13,630 - test_buyNowCreateOrder.py - [line:222] - INFO: 购买第三方商品，期望的积分是：34
2020-08-31 10:49:13,631 - test_buyNowCreateOrder.py - [line:225] - INFO: 第1条用例执行通过
2020-08-31 10:49:13,789 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第2条测试用例==================================
2020-08-31 10:49:13,789 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3149}
2020-08-31 10:49:13,789 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-08-31 10:49:14,174 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：69.00
2020-08-31 10:49:14,195 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-08-31 10:49:14,195 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：157.0000; 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-08-31 10:49:14,196 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：157.0000; 抵扣金额
2020-08-31 10:49:14,196 - test_buyNowCreateOrder.py - [line:210] - INFO: 购买第三方商品，预期的积分是：78
2020-08-31 10:49:14,196 - test_buyNowCreateOrder.py - [line:225] - INFO: 第2条用例执行通过
2020-08-31 10:49:14,355 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第3条测试用例==================================
2020-08-31 10:49:14,355 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-08-31 10:49:14,355 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-08-31 10:49:14,733 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：279.00
2020-08-31 10:49:14,755 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：99.00
2020-08-31 10:49:14,755 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：180.0000; 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-08-31 10:49:14,755 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：180.0000; 抵扣金额
2020-08-31 10:49:14,755 - test_buyNowCreateOrder.py - [line:210] - INFO: 购买第三方商品，预期的积分是：90
2020-08-31 10:49:14,755 - test_buyNowCreateOrder.py - [line:225] - INFO: 第3条用例执行通过
2020-08-31 10:49:14,917 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第4条测试用例==================================
2020-08-31 10:49:14,917 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-08-31 10:49:14,917 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-08-31 10:49:15,279 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：89.00
2020-08-31 10:49:15,289 - test_buyNowCreateOrder.py - [line:222] - INFO: 购买第三方商品，期望的积分是：44
2020-08-31 10:49:15,290 - test_buyNowCreateOrder.py - [line:225] - INFO: 第4条用例执行通过
2020-08-31 10:49:15,341 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第5条测试用例==================================
2020-08-31 10:49:15,341 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-08-31 10:49:15,341 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-08-31 10:49:15,832 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-31 10:49:15,845 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买自营商品，期望的积分是：99.0000
2020-08-31 10:49:15,845 - test_buyNowCreateOrder.py - [line:225] - INFO: 第5条用例执行通过
2020-08-31 10:49:15,994 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第6条测试用例==================================
2020-08-31 10:49:15,994 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3150}
2020-08-31 10:49:15,994 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-08-31 10:49:16,537 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-31 10:49:16,559 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：25.00
2020-08-31 10:49:16,559 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-31 10:49:16,559 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-31 10:49:16,559 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-31 10:49:16,559 - test_buyNowCreateOrder.py - [line:225] - INFO: 第6条用例执行通过
2020-08-31 10:49:16,720 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第7条测试用例==================================
2020-08-31 10:49:16,720 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3151}
2020-08-31 10:49:16,720 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-08-31 10:49:17,361 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-31 10:49:17,388 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：25.00
2020-08-31 10:49:17,388 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：148.0000; 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-31 10:49:17,388 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：148.0000; 抵扣金额
2020-08-31 10:49:17,389 - test_buyNowCreateOrder.py - [line:207] - INFO: 购买自营商品，预期的积分是：148.0000
2020-08-31 10:49:17,389 - test_buyNowCreateOrder.py - [line:225] - INFO: 第7条用例执行通过
2020-08-31 10:49:17,539 - test_buyNowCreateOrder.py - [line:137] - INFO: ==================================开始执行第8条测试用例==================================
2020-08-31 10:49:17,539 - test_buyNowCreateOrder.py - [line:138] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3688}
2020-08-31 10:49:17,539 - test_buyNowCreateOrder.py - [line:139] - INFO: 测试用例名称：L1用户，下单自营商品
2020-08-31 10:49:18,098 - test_buyNowCreateOrder.py - [line:159] - INFO: 订单的原价格为：99.00
2020-08-31 10:49:18,120 - test_buyNowCreateOrder.py - [line:174] - INFO: 优惠券的金额为：25.00
2020-08-31 10:49:18,120 - test_buyNowCreateOrder.py - [line:176] - INFO: 预期订单实付金额：142.0200; 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-08-31 10:49:18,121 - test_buyNowCreateOrder.py - [line:189] - INFO: L1用户计算后的订单实付金额为：284.0404040404040404040404040; a:142.0202020202020202020202020
2020-08-31 10:49:18,121 - test_buyNowCreateOrder.py - [line:190] - INFO: 订单实际金额：142.0200; 订单预期金额：284.0404040404040404040404040
2020-08-31 10:49:18,121 - test_buyNowCreateOrder.py - [line:228] - ERROR: 第8条用例执行失败：False is not true
2020-09-08 11:01:53,658 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 11:01:53,659 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 11:01:53,660 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 11:01:54,119 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：69.00
2020-09-08 11:01:54,130 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买第三方商品，期望的积分是：34
2020-09-08 11:01:54,131 - test_buyNowCreateOrder.py - [line:223] - INFO: 第1条用例执行通过
2020-09-08 11:01:54,336 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 11:01:54,336 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3144}
2020-09-08 11:01:54,336 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 11:01:54,684 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：69.00
2020-09-08 11:01:54,706 - test_buyNowCreateOrder.py - [line:175] - INFO: 优惠券的金额为：16.66666666666666666666666667
2020-09-08 11:01:54,706 - test_buyNowCreateOrder.py - [line:176] - INFO: 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券的金额为：16.66666666666666666666666667;
2020-09-08 11:01:54,706 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额
2020-09-08 11:01:54,706 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 11:01:54,706 - test_buyNowCreateOrder.py - [line:223] - INFO: 第2条用例执行通过
2020-09-08 11:01:54,860 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 11:01:54,861 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3145}
2020-09-08 11:01:54,861 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 11:01:55,213 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：279.00
2020-09-08 11:01:55,235 - test_buyNowCreateOrder.py - [line:175] - INFO: 优惠券的金额为：99.00
2020-09-08 11:01:55,236 - test_buyNowCreateOrder.py - [line:176] - INFO: 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券的金额为：99.00;
2020-09-08 11:01:55,236 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额
2020-09-08 11:01:55,236 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 11:01:55,236 - test_buyNowCreateOrder.py - [line:223] - INFO: 第3条用例执行通过
2020-09-08 11:01:55,393 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 11:01:55,393 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-09-08 11:01:55,394 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 11:01:55,795 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：89.00
2020-09-08 11:01:55,805 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买第三方商品，期望的积分是：44
2020-09-08 11:01:55,806 - test_buyNowCreateOrder.py - [line:223] - INFO: 第4条用例执行通过
2020-09-08 11:01:55,870 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 11:01:55,871 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 11:01:55,871 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 11:01:58,416 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:01:58,429 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买自营商品，期望的积分是：99.0000
2020-09-08 11:01:58,429 - test_buyNowCreateOrder.py - [line:223] - INFO: 第5条用例执行通过
2020-09-08 11:01:58,584 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 11:01:58,584 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3147}
2020-09-08 11:01:58,585 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 11:01:59,085 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:01:59,108 - test_buyNowCreateOrder.py - [line:175] - INFO: 优惠券的金额为：25.00
2020-09-08 11:01:59,108 - test_buyNowCreateOrder.py - [line:176] - INFO: 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-09-08 11:01:59,108 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额
2020-09-08 11:01:59,108 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买自营商品，预期的积分是：148.0000
2020-09-08 11:01:59,108 - test_buyNowCreateOrder.py - [line:223] - INFO: 第6条用例执行通过
2020-09-08 11:01:59,268 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 11:01:59,268 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3148}
2020-09-08 11:01:59,268 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 11:01:59,762 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:01:59,785 - test_buyNowCreateOrder.py - [line:175] - INFO: 优惠券的金额为：25.00
2020-09-08 11:01:59,785 - test_buyNowCreateOrder.py - [line:176] - INFO: 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-09-08 11:01:59,785 - test_buyNowCreateOrder.py - [line:181] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额
2020-09-08 11:01:59,785 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买自营商品，预期的积分是：148.0000
2020-09-08 11:01:59,786 - test_buyNowCreateOrder.py - [line:223] - INFO: 第7条用例执行通过
2020-09-08 11:01:59,935 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 11:01:59,935 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 11:01:59,935 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 11:02:00,423 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:02:00,447 - test_buyNowCreateOrder.py - [line:175] - INFO: 优惠券的金额为：25.00
2020-09-08 11:02:00,447 - test_buyNowCreateOrder.py - [line:176] - INFO: 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-09-08 11:02:00,447 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：284.0404040404040404040404040; 
2020-09-08 11:02:00,447 - test_buyNowCreateOrder.py - [line:188] - INFO: 订单实际金额：142.0200; 订单预期金额：284.0404040404040404040404040
2020-09-08 11:02:00,447 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第8条用例执行失败：False is not true
2020-09-08 11:02:00,602 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 11:02:00,602 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3688}
2020-09-08 11:02:00,602 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 11:02:01,095 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:02:01,118 - test_buyNowCreateOrder.py - [line:175] - INFO: 优惠券的金额为：25.00
2020-09-08 11:02:01,118 - test_buyNowCreateOrder.py - [line:176] - INFO: 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券的金额为：25.00;
2020-09-08 11:02:01,118 - test_buyNowCreateOrder.py - [line:187] - INFO: L1用户计算后的订单实付金额为：284.0404040404040404040404040; 
2020-09-08 11:02:01,118 - test_buyNowCreateOrder.py - [line:188] - INFO: 订单实际金额：142.0200; 订单预期金额：284.0404040404040404040404040
2020-09-08 11:02:01,118 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第9条用例执行失败：False is not true
2020-09-08 11:09:25,937 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 11:09:25,937 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 11:09:25,937 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 11:09:26,278 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：69.00
2020-09-08 11:09:26,288 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：34
2020-09-08 11:09:26,289 - test_buyNowCreateOrder.py - [line:220] - INFO: 第1条用例执行通过
2020-09-08 11:09:26,458 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 11:09:26,459 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3149}
2020-09-08 11:09:26,459 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 11:09:26,794 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：69.00
2020-09-08 11:09:26,814 - test_buyNowCreateOrder.py - [line:174] - INFO: 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券分摊后的金额为：16.66666666666666666666666667;
2020-09-08 11:09:26,814 - test_buyNowCreateOrder.py - [line:179] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额
2020-09-08 11:09:26,814 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 11:09:26,815 - test_buyNowCreateOrder.py - [line:220] - INFO: 第2条用例执行通过
2020-09-08 11:09:26,978 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 11:09:26,978 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-09-08 11:09:26,978 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 11:09:27,336 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：279.00
2020-09-08 11:09:27,362 - test_buyNowCreateOrder.py - [line:174] - INFO: 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券分摊后的金额为：99.00;
2020-09-08 11:09:27,362 - test_buyNowCreateOrder.py - [line:179] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额
2020-09-08 11:09:27,362 - test_buyNowCreateOrder.py - [line:205] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 11:09:27,362 - test_buyNowCreateOrder.py - [line:220] - INFO: 第3条用例执行通过
2020-09-08 11:09:27,519 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 11:09:27,519 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-08 11:09:27,519 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 11:09:27,833 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：89.00
2020-09-08 11:09:27,844 - test_buyNowCreateOrder.py - [line:217] - INFO: 购买第三方商品，期望的积分是：44
2020-09-08 11:09:27,844 - test_buyNowCreateOrder.py - [line:220] - INFO: 第4条用例执行通过
2020-09-08 11:09:27,921 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 11:09:27,922 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 11:09:27,922 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 11:09:28,403 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:09:28,417 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买自营商品，期望的积分是：99.0000
2020-09-08 11:09:28,417 - test_buyNowCreateOrder.py - [line:220] - INFO: 第5条用例执行通过
2020-09-08 11:09:28,576 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 11:09:28,576 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3150}
2020-09-08 11:09:28,577 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 11:09:29,084 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:09:29,109 - test_buyNowCreateOrder.py - [line:174] - INFO: 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券分摊后的金额为：25.00;
2020-09-08 11:09:29,109 - test_buyNowCreateOrder.py - [line:179] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额
2020-09-08 11:09:29,109 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：148.0000
2020-09-08 11:09:29,109 - test_buyNowCreateOrder.py - [line:220] - INFO: 第6条用例执行通过
2020-09-08 11:09:29,282 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 11:09:29,282 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3151}
2020-09-08 11:09:29,282 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 11:09:29,734 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:09:29,758 - test_buyNowCreateOrder.py - [line:174] - INFO: 实际订单支付金额148.0000; 订单的市场价：99.00; 优惠券分摊后的金额为：25.00;
2020-09-08 11:09:29,758 - test_buyNowCreateOrder.py - [line:179] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额
2020-09-08 11:09:29,758 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：148.0000
2020-09-08 11:09:29,758 - test_buyNowCreateOrder.py - [line:220] - INFO: 第7条用例执行通过
2020-09-08 11:09:29,909 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 11:09:29,909 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3689}
2020-09-08 11:09:29,909 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 11:09:30,433 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:09:30,458 - test_buyNowCreateOrder.py - [line:174] - INFO: 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券分摊后的金额为：25.00;
2020-09-08 11:09:30,458 - test_buyNowCreateOrder.py - [line:184] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; 
2020-09-08 11:09:30,459 - test_buyNowCreateOrder.py - [line:185] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-08 11:09:30,459 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：142.0200
2020-09-08 11:09:30,459 - test_buyNowCreateOrder.py - [line:223] - ERROR: 第8条用例执行失败： :: Decimal('142.0200') != Decimal('142')
2020-09-08 11:09:30,627 - test_buyNowCreateOrder.py - [line:138] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 11:09:30,628 - test_buyNowCreateOrder.py - [line:139] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3690}
2020-09-08 11:09:30,628 - test_buyNowCreateOrder.py - [line:140] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 11:09:31,116 - test_buyNowCreateOrder.py - [line:160] - INFO: 订单的原价格为：99.00
2020-09-08 11:09:31,138 - test_buyNowCreateOrder.py - [line:174] - INFO: 实际订单支付金额142.0200; 订单的市场价：99.00; 优惠券分摊后的金额为：25.00;
2020-09-08 11:09:31,138 - test_buyNowCreateOrder.py - [line:184] - INFO: L1用户计算后的订单实付金额为：142.0202020202020202020202020; 
2020-09-08 11:09:31,138 - test_buyNowCreateOrder.py - [line:185] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-08 11:09:31,139 - test_buyNowCreateOrder.py - [line:202] - INFO: 购买自营商品，预期的积分是：142.0200
2020-09-08 11:09:31,139 - test_buyNowCreateOrder.py - [line:223] - ERROR: 第9条用例执行失败： :: Decimal('142.0200') != Decimal('142')
2020-09-08 13:50:51,087 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 13:50:51,087 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 13:50:51,088 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 13:50:51,417 - test_buyNowCreateOrder.py - [line:161] - INFO: 订单的原价格为：69.00
2020-09-08 13:50:51,428 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买第三方商品，期望的积分是：34
2020-09-08 13:50:51,428 - test_buyNowCreateOrder.py - [line:223] - INFO: 第1条用例执行通过
2020-09-08 13:50:51,601 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 13:50:51,601 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3147}
2020-09-08 13:50:51,601 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 13:50:51,935 - test_buyNowCreateOrder.py - [line:161] - INFO: 订单的原价格为：69.00
2020-09-08 13:50:51,955 - test_buyNowCreateOrder.py - [line:175] - INFO: 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券分摊后的金额为：16.66666666666666666666666667;
2020-09-08 13:50:51,955 - test_buyNowCreateOrder.py - [line:180] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额
2020-09-08 13:50:51,955 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 13:50:51,956 - test_buyNowCreateOrder.py - [line:223] - INFO: 第2条用例执行通过
2020-09-08 13:50:52,110 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 13:50:52,111 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-09-08 13:50:52,111 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 13:50:52,442 - test_buyNowCreateOrder.py - [line:161] - INFO: 订单的原价格为：279.00
2020-09-08 13:50:52,463 - test_buyNowCreateOrder.py - [line:175] - INFO: 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券分摊后的金额为：99.00;
2020-09-08 13:50:52,464 - test_buyNowCreateOrder.py - [line:180] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额
2020-09-08 13:50:52,464 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 13:50:52,464 - test_buyNowCreateOrder.py - [line:223] - INFO: 第3条用例执行通过
2020-09-08 13:50:52,623 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 13:50:52,623 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-08 13:50:52,623 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 13:50:52,910 - test_buyNowCreateOrder.py - [line:161] - INFO: 订单的原价格为：89.00
2020-09-08 13:50:52,921 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买第三方商品，期望的积分是：44
2020-09-08 13:50:52,921 - test_buyNowCreateOrder.py - [line:223] - INFO: 第4条用例执行通过
2020-09-08 13:50:52,986 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 13:50:52,986 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 13:50:52,986 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 13:50:53,101 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第5条用例执行失败： :: 17000 != 0
2020-09-08 13:50:53,267 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 13:50:53,267 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3149}
2020-09-08 13:50:53,267 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 13:50:53,395 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第6条用例执行失败： :: 17000 != 0
2020-09-08 13:50:53,585 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 13:50:53,585 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3149}
2020-09-08 13:50:53,585 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 13:50:53,712 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第7条用例执行失败： :: 17000 != 0
2020-09-08 13:50:53,861 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 13:50:53,862 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 13:50:53,862 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 13:50:53,989 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第8条用例执行失败： :: 17000 != 0
2020-09-08 13:50:54,142 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 13:50:54,142 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 13:50:54,142 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 13:50:54,265 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第9条用例执行失败： :: 17000 != 0
2020-09-08 14:03:01,307 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 14:03:01,307 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:03:01,307 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 14:03:01,625 - test_buyNowCreateOrder.py - [line:161] - INFO: 订单的原价格为：69.00
2020-09-08 14:03:01,815 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 14:03:01,815 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3149}
2020-09-08 14:03:01,815 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 14:03:02,157 - test_buyNowCreateOrder.py - [line:161] - INFO: 订单的原价格为：69.00
2020-09-08 14:03:02,178 - test_buyNowCreateOrder.py - [line:175] - INFO: 实际订单支付金额157.0000; 订单的市场价：69.00; 优惠券分摊后的金额为：16.66666666666666666666666667;
2020-09-08 14:03:02,178 - test_buyNowCreateOrder.py - [line:180] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额
2020-09-08 14:03:02,178 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 14:03:02,179 - test_buyNowCreateOrder.py - [line:223] - INFO: 第2条用例执行通过
2020-09-08 14:03:02,341 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 14:03:02,341 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-08 14:03:02,341 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 14:03:02,696 - test_buyNowCreateOrder.py - [line:161] - INFO: 订单的原价格为：279.00
2020-09-08 14:03:02,729 - test_buyNowCreateOrder.py - [line:175] - INFO: 实际订单支付金额180.0000; 订单的市场价：279.00; 优惠券分摊后的金额为：99.00;
2020-09-08 14:03:02,729 - test_buyNowCreateOrder.py - [line:180] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额
2020-09-08 14:03:02,729 - test_buyNowCreateOrder.py - [line:208] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 14:03:02,730 - test_buyNowCreateOrder.py - [line:223] - INFO: 第3条用例执行通过
2020-09-08 14:03:02,887 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 14:03:02,887 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3269}
2020-09-08 14:03:02,887 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 14:03:03,218 - test_buyNowCreateOrder.py - [line:161] - INFO: 订单的原价格为：89.00
2020-09-08 14:03:03,300 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 14:03:03,300 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:03:03,300 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 14:03:03,415 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第5条用例执行失败： :: 17000 != 0
2020-09-08 14:03:03,582 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 14:03:03,582 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3150}
2020-09-08 14:03:03,583 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 14:03:03,715 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第6条用例执行失败： :: 17000 != 0
2020-09-08 14:03:03,868 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 14:03:03,868 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3150}
2020-09-08 14:03:03,869 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 14:03:03,999 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第7条用例执行失败： :: 17000 != 0
2020-09-08 14:03:04,151 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 14:03:04,152 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:03:04,152 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:03:04,280 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第8条用例执行失败： :: 17000 != 0
2020-09-08 14:03:04,439 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 14:03:04,439 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:03:04,439 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:03:04,566 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第9条用例执行失败： :: 17000 != 0
2020-09-08 14:37:25,315 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 14:37:25,315 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:37:25,315 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 14:37:25,812 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 14:37:25,813 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3150}
2020-09-08 14:37:25,813 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 14:37:26,163 - test_buyNowCreateOrder.py - [line:173] - INFO: 订单的原价格：69.00
2020-09-08 14:37:26,163 - test_buyNowCreateOrder.py - [line:174] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-08 14:37:26,163 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-08 14:37:26,164 - test_buyNowCreateOrder.py - [line:182] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-08 14:37:26,164 - test_buyNowCreateOrder.py - [line:210] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 14:37:26,164 - test_buyNowCreateOrder.py - [line:221] - INFO: 第2条用例执行通过
2020-09-08 14:37:26,369 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 14:37:26,369 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3269}
2020-09-08 14:37:26,369 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 14:37:26,721 - test_buyNowCreateOrder.py - [line:173] - INFO: 订单的原价格：279.00
2020-09-08 14:37:26,721 - test_buyNowCreateOrder.py - [line:174] - INFO: 订单的优惠券：99.00
2020-09-08 14:37:26,721 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-08 14:37:26,721 - test_buyNowCreateOrder.py - [line:182] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-08 14:37:26,722 - test_buyNowCreateOrder.py - [line:210] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 14:37:26,722 - test_buyNowCreateOrder.py - [line:221] - INFO: 第3条用例执行通过
2020-09-08 14:37:26,873 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 14:37:26,873 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3270}
2020-09-08 14:37:26,873 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 14:37:27,206 - test_buyNowCreateOrder.py - [line:173] - INFO: 订单的原价格：89.00
2020-09-08 14:37:27,207 - test_buyNowCreateOrder.py - [line:174] - INFO: 订单的优惠券：99.00
2020-09-08 14:37:27,207 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的返利：-0.8988764044943820224719101120
2020-09-08 14:37:27,207 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，预期的积分是：44
2020-09-08 14:37:27,207 - test_buyNowCreateOrder.py - [line:221] - INFO: 第4条用例执行通过
2020-09-08 14:37:27,271 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 14:37:27,272 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:37:27,272 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 14:37:27,383 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第5条用例执行失败： :: 17000 != 0
2020-09-08 14:37:27,542 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 14:37:27,542 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-08 14:37:27,542 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 14:37:27,673 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第6条用例执行失败： :: 17000 != 0
2020-09-08 14:37:27,829 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 14:37:27,829 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-08 14:37:27,830 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 14:37:27,958 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第7条用例执行失败： :: 17000 != 0
2020-09-08 14:37:28,104 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 14:37:28,104 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:37:28,104 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:37:28,223 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第8条用例执行失败： :: 17000 != 0
2020-09-08 14:37:28,406 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 14:37:28,407 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:37:28,407 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:37:28,538 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第9条用例执行失败： :: 17000 != 0
2020-09-08 14:39:45,531 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 14:39:45,531 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:39:45,532 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 14:39:46,038 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 14:39:46,038 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-08 14:39:46,038 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 14:39:46,408 - test_buyNowCreateOrder.py - [line:173] - INFO: 订单的原价格：69.00
2020-09-08 14:39:46,408 - test_buyNowCreateOrder.py - [line:174] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-08 14:39:46,408 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-08 14:39:46,408 - test_buyNowCreateOrder.py - [line:182] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-08 14:39:46,408 - test_buyNowCreateOrder.py - [line:210] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 14:39:46,409 - test_buyNowCreateOrder.py - [line:221] - INFO: 第2条用例执行通过
2020-09-08 14:39:46,568 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 14:39:46,569 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3270}
2020-09-08 14:39:46,569 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 14:39:46,951 - test_buyNowCreateOrder.py - [line:173] - INFO: 订单的原价格：279.00
2020-09-08 14:39:46,951 - test_buyNowCreateOrder.py - [line:174] - INFO: 订单的优惠券：99.00
2020-09-08 14:39:46,951 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-08 14:39:46,951 - test_buyNowCreateOrder.py - [line:182] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-08 14:39:46,951 - test_buyNowCreateOrder.py - [line:210] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 14:39:46,951 - test_buyNowCreateOrder.py - [line:221] - INFO: 第3条用例执行通过
2020-09-08 14:39:47,112 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 14:39:47,112 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3271}
2020-09-08 14:39:47,112 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 14:39:47,422 - test_buyNowCreateOrder.py - [line:173] - INFO: 订单的原价格：89.00
2020-09-08 14:39:47,423 - test_buyNowCreateOrder.py - [line:174] - INFO: 订单的优惠券：99.00
2020-09-08 14:39:47,423 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的返利：-0.8988764044943820224719101120
2020-09-08 14:39:47,423 - test_buyNowCreateOrder.py - [line:219] - INFO: 购买第三方商品，预期的积分是：44
2020-09-08 14:39:47,423 - test_buyNowCreateOrder.py - [line:221] - INFO: 第4条用例执行通过
2020-09-08 14:39:47,488 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 14:39:47,489 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:39:47,489 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 14:39:47,600 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第5条用例执行失败： :: 17000 != 0
2020-09-08 14:39:47,765 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 14:39:47,765 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3153}
2020-09-08 14:39:47,765 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 14:39:47,889 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第6条用例执行失败： :: 17000 != 0
2020-09-08 14:39:48,053 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 14:39:48,053 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3153}
2020-09-08 14:39:48,053 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 14:39:48,182 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第7条用例执行失败： :: 17000 != 0
2020-09-08 14:39:48,348 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 14:39:48,348 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:39:48,349 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:39:48,469 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第8条用例执行失败： :: 17000 != 0
2020-09-08 14:39:48,627 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 14:39:48,627 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:39:48,628 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:39:48,747 - test_buyNowCreateOrder.py - [line:224] - ERROR: 第9条用例执行失败： :: 17000 != 0
2020-09-08 14:44:17,089 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 14:44:17,090 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:44:17,090 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 14:44:17,752 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306731, 'orderSn': 'XS20200908144445128585', 'orderPayMoney': '69'}}
2020-09-08 14:44:17,966 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 14:44:17,966 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3153}
2020-09-08 14:44:17,966 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 14:44:18,382 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306732, 'orderSn': 'XS20200908144446365109', 'orderPayMoney': '157'}}
2020-09-08 14:44:18,424 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：69.00
2020-09-08 14:44:18,424 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-08 14:44:18,424 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-08 14:44:18,424 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-08 14:44:18,424 - test_buyNowCreateOrder.py - [line:212] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 14:44:18,425 - test_buyNowCreateOrder.py - [line:223] - INFO: 第2条用例执行通过
2020-09-08 14:44:18,584 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 14:44:18,585 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3271}
2020-09-08 14:44:18,585 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 14:44:18,979 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306733, 'orderSn': 'XS20200908144447355903', 'orderPayMoney': '180'}}
2020-09-08 14:44:19,015 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：279.00
2020-09-08 14:44:19,015 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：99.00
2020-09-08 14:44:19,015 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-08 14:44:19,015 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-08 14:44:19,016 - test_buyNowCreateOrder.py - [line:212] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 14:44:19,016 - test_buyNowCreateOrder.py - [line:223] - INFO: 第3条用例执行通过
2020-09-08 14:44:19,188 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 14:44:19,189 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3272}
2020-09-08 14:44:19,189 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 14:44:19,542 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306734, 'orderSn': 'XS20200908144447983805', 'orderPayMoney': '89'}}
2020-09-08 14:44:19,576 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：89.00
2020-09-08 14:44:19,576 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：99.00
2020-09-08 14:44:19,577 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：-0.8988764044943820224719101120
2020-09-08 14:44:19,577 - test_buyNowCreateOrder.py - [line:221] - INFO: 购买第三方商品，预期的积分是：44
2020-09-08 14:44:19,577 - test_buyNowCreateOrder.py - [line:223] - INFO: 第4条用例执行通过
2020-09-08 14:44:19,637 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 14:44:19,637 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:44:19,637 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 14:44:19,805 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 17000, 'msg': '【6包装】干湿两用棉柔巾 洗脸巾【AWESOMEETHINGS】 自营 60抽/包*6 商品库存不足！', 'data': None}
2020-09-08 14:44:19,805 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第5条用例执行失败： :: 17000 != 0
2020-09-08 14:44:19,956 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 14:44:19,957 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3154}
2020-09-08 14:44:19,957 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 14:44:20,168 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 17000, 'msg': '【6包装】干湿两用棉柔巾 洗脸巾【AWESOMEETHINGS】 自营 60抽/包*6 商品库存不足！', 'data': None}
2020-09-08 14:44:20,168 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第6条用例执行失败： :: 17000 != 0
2020-09-08 14:44:20,321 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 14:44:20,321 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3154}
2020-09-08 14:44:20,321 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 14:44:20,486 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 17000, 'msg': '【6包装】干湿两用棉柔巾 洗脸巾【AWESOMEETHINGS】 自营 60抽/包*6 商品库存不足！', 'data': None}
2020-09-08 14:44:20,487 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第7条用例执行失败： :: 17000 != 0
2020-09-08 14:44:20,648 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 14:44:20,648 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:44:20,649 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:44:20,817 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 17000, 'msg': '【6包装】干湿两用棉柔巾 洗脸巾【AWESOMEETHINGS】 自营 60抽/包*6 商品库存不足！', 'data': None}
2020-09-08 14:44:20,818 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第8条用例执行失败： :: 17000 != 0
2020-09-08 14:44:20,997 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 14:44:20,997 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:44:20,997 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:44:21,151 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 17000, 'msg': '【6包装】干湿两用棉柔巾 洗脸巾【AWESOMEETHINGS】 自营 60抽/包*6 商品库存不足！', 'data': None}
2020-09-08 14:44:21,151 - test_buyNowCreateOrder.py - [line:226] - ERROR: 第9条用例执行失败： :: 17000 != 0
2020-09-08 14:46:43,266 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 14:46:43,267 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:46:43,267 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 14:46:43,642 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306735, 'orderSn': 'XS20200908144711849154', 'orderPayMoney': '69'}}
2020-09-08 14:46:43,840 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 14:46:43,841 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3154}
2020-09-08 14:46:43,841 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 14:46:44,177 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306736, 'orderSn': 'XS20200908144712571483', 'orderPayMoney': '157'}}
2020-09-08 14:46:44,217 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：69.00
2020-09-08 14:46:44,217 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-08 14:46:44,218 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-08 14:46:44,218 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-08 14:46:44,218 - test_buyNowCreateOrder.py - [line:212] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 14:46:44,218 - test_buyNowCreateOrder.py - [line:223] - INFO: 第2条用例执行通过
2020-09-08 14:46:44,397 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 14:46:44,397 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3272}
2020-09-08 14:46:44,397 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 14:46:44,788 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306737, 'orderSn': 'XS20200908144712105593', 'orderPayMoney': '180'}}
2020-09-08 14:46:44,824 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：279.00
2020-09-08 14:46:44,824 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：99.00
2020-09-08 14:46:44,824 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-08 14:46:44,824 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-08 14:46:44,824 - test_buyNowCreateOrder.py - [line:212] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 14:46:44,825 - test_buyNowCreateOrder.py - [line:223] - INFO: 第3条用例执行通过
2020-09-08 14:46:44,979 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 14:46:44,980 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3273}
2020-09-08 14:46:44,980 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 14:46:45,343 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306738, 'orderSn': 'XS20200908144713427288', 'orderPayMoney': '89'}}
2020-09-08 14:46:45,376 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：89.00
2020-09-08 14:46:45,376 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：99.00
2020-09-08 14:46:45,376 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：-0.8988764044943820224719101120
2020-09-08 14:46:45,376 - test_buyNowCreateOrder.py - [line:221] - INFO: 购买第三方商品，预期的积分是：44
2020-09-08 14:46:45,376 - test_buyNowCreateOrder.py - [line:223] - INFO: 第4条用例执行通过
2020-09-08 14:46:45,434 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 14:46:45,434 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:46:45,434 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 14:46:45,758 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306739, 'orderSn': 'XS20200908144713349440', 'orderPayMoney': '99'}}
2020-09-08 14:46:47,860 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 14:46:47,860 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3155}
2020-09-08 14:46:47,861 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 14:46:48,230 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306740, 'orderSn': 'XS20200908144716625892', 'orderPayMoney': '148'}}
2020-09-08 14:46:48,416 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：99.00
2020-09-08 14:46:48,416 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：25.00
2020-09-08 14:46:48,416 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:46:48,416 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-08 14:46:48,416 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买自营商品，预期的积分是：148
2020-09-08 14:46:48,417 - test_buyNowCreateOrder.py - [line:223] - INFO: 第6条用例执行通过
2020-09-08 14:46:48,562 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 14:46:48,562 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3156}
2020-09-08 14:46:48,562 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 14:46:48,973 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306741, 'orderSn': 'XS20200908144717354596', 'orderPayMoney': '148'}}
2020-09-08 14:46:49,174 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：99.00
2020-09-08 14:46:49,175 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：25.00
2020-09-08 14:46:49,175 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:46:49,175 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-08 14:46:49,175 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买自营商品，预期的积分是：148
2020-09-08 14:46:49,175 - test_buyNowCreateOrder.py - [line:223] - INFO: 第7条用例执行通过
2020-09-08 14:46:49,336 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 14:46:49,336 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-08 14:46:49,336 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:46:49,742 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306742, 'orderSn': 'XS20200908144717904374', 'orderPayMoney': '142.02'}}
2020-09-08 14:46:49,947 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：99.00
2020-09-08 14:46:49,948 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：25.00
2020-09-08 14:46:49,948 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:46:49,948 - test_buyNowCreateOrder.py - [line:189] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-08 14:46:49,948 - test_buyNowCreateOrder.py - [line:192] - INFO: 订单金额校验通过
2020-09-08 14:46:49,948 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买自营商品，预期的积分是：142
2020-09-08 14:46:49,948 - test_buyNowCreateOrder.py - [line:223] - INFO: 第8条用例执行通过
2020-09-08 14:46:50,116 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 14:46:50,117 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3689}
2020-09-08 14:46:50,117 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:46:50,494 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306743, 'orderSn': 'XS20200908144718256959', 'orderPayMoney': '142.02'}}
2020-09-08 14:46:50,716 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：99.00
2020-09-08 14:46:50,716 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：25.00
2020-09-08 14:46:50,716 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:46:50,717 - test_buyNowCreateOrder.py - [line:189] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-08 14:46:50,717 - test_buyNowCreateOrder.py - [line:192] - INFO: 订单金额校验通过
2020-09-08 14:46:50,717 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买自营商品，预期的积分是：142
2020-09-08 14:46:50,717 - test_buyNowCreateOrder.py - [line:223] - INFO: 第9条用例执行通过
2020-09-08 14:49:52,608 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 14:49:52,609 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:49:52,609 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 14:49:52,918 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306744, 'orderSn': 'XS20200908145021933728', 'orderPayMoney': '69'}}
2020-09-08 14:49:53,124 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 14:49:53,124 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3157}
2020-09-08 14:49:53,124 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 14:49:53,493 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306745, 'orderSn': 'XS20200908145021311769', 'orderPayMoney': '157'}}
2020-09-08 14:49:53,534 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：69.00
2020-09-08 14:49:53,534 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-08 14:49:53,534 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-08 14:49:53,534 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-08 14:49:53,534 - test_buyNowCreateOrder.py - [line:212] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 14:49:53,534 - test_buyNowCreateOrder.py - [line:223] - INFO: 第2条用例执行通过
2020-09-08 14:49:53,689 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 14:49:53,689 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3273}
2020-09-08 14:49:53,689 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 14:49:54,040 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306746, 'orderSn': 'XS20200908145022379753', 'orderPayMoney': '180'}}
2020-09-08 14:49:54,079 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：279.00
2020-09-08 14:49:54,079 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：99.00
2020-09-08 14:49:54,080 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-08 14:49:54,080 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-08 14:49:54,080 - test_buyNowCreateOrder.py - [line:212] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 14:49:54,080 - test_buyNowCreateOrder.py - [line:223] - INFO: 第3条用例执行通过
2020-09-08 14:49:54,226 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 14:49:54,226 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3274}
2020-09-08 14:49:54,226 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 14:49:54,563 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306747, 'orderSn': 'XS20200908145022835206', 'orderPayMoney': '89'}}
2020-09-08 14:49:54,597 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：89.00
2020-09-08 14:49:54,597 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：99.00
2020-09-08 14:49:54,597 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：-0.8988764044943820224719101120
2020-09-08 14:49:54,597 - test_buyNowCreateOrder.py - [line:221] - INFO: 购买第三方商品，预期的积分是：44
2020-09-08 14:49:54,598 - test_buyNowCreateOrder.py - [line:223] - INFO: 第4条用例执行通过
2020-09-08 14:49:54,657 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 14:49:54,657 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:49:54,657 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 14:49:55,027 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306748, 'orderSn': 'XS20200908145023226099', 'orderPayMoney': '99'}}
2020-09-08 14:49:55,375 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 14:49:55,375 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3158}
2020-09-08 14:49:55,375 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 14:49:55,740 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306749, 'orderSn': 'XS20200908145023184444', 'orderPayMoney': '148'}}
2020-09-08 14:49:55,934 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：99.00
2020-09-08 14:49:55,934 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：25.00
2020-09-08 14:49:55,934 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:49:55,934 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-08 14:49:55,934 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买自营商品，预期的积分是：148
2020-09-08 14:49:55,934 - test_buyNowCreateOrder.py - [line:223] - INFO: 第6条用例执行通过
2020-09-08 14:49:56,078 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 14:49:56,078 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3159}
2020-09-08 14:49:56,079 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 14:49:56,420 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306750, 'orderSn': 'XS20200908145024402524', 'orderPayMoney': '148'}}
2020-09-08 14:49:56,608 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：99.00
2020-09-08 14:49:56,609 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：25.00
2020-09-08 14:49:56,609 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:49:56,609 - test_buyNowCreateOrder.py - [line:184] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-08 14:49:56,609 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买自营商品，预期的积分是：148
2020-09-08 14:49:56,610 - test_buyNowCreateOrder.py - [line:223] - INFO: 第7条用例执行通过
2020-09-08 14:49:56,766 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 14:49:56,766 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3690}
2020-09-08 14:49:56,766 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:49:57,104 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306751, 'orderSn': 'XS20200908145025242685', 'orderPayMoney': '142.02'}}
2020-09-08 14:49:57,305 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：99.00
2020-09-08 14:49:57,306 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：25.00
2020-09-08 14:49:57,306 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:49:57,306 - test_buyNowCreateOrder.py - [line:189] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-08 14:49:57,306 - test_buyNowCreateOrder.py - [line:192] - INFO: 订单金额校验通过
2020-09-08 14:49:57,306 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买自营商品，预期的积分是：142
2020-09-08 14:49:57,306 - test_buyNowCreateOrder.py - [line:223] - INFO: 第8条用例执行通过
2020-09-08 14:49:57,468 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 14:49:57,468 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3691}
2020-09-08 14:49:57,468 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:49:57,823 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306752, 'orderSn': 'XS20200908145025826026', 'orderPayMoney': '142.02'}}
2020-09-08 14:49:58,002 - test_buyNowCreateOrder.py - [line:175] - INFO: 订单的原价格：99.00
2020-09-08 14:49:58,002 - test_buyNowCreateOrder.py - [line:176] - INFO: 订单的优惠券：25.00
2020-09-08 14:49:58,002 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:49:58,002 - test_buyNowCreateOrder.py - [line:189] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-08 14:49:58,002 - test_buyNowCreateOrder.py - [line:192] - INFO: 订单金额校验通过
2020-09-08 14:49:58,003 - test_buyNowCreateOrder.py - [line:209] - INFO: 购买自营商品，预期的积分是：142
2020-09-08 14:49:58,003 - test_buyNowCreateOrder.py - [line:223] - INFO: 第9条用例执行通过
2020-09-08 14:52:11,203 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 14:52:11,203 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:52:11,203 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 14:52:11,517 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306753, 'orderSn': 'XS20200908145239484206', 'orderPayMoney': '69'}}
2020-09-08 14:52:11,711 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 14:52:11,711 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3147}
2020-09-08 14:52:11,711 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 14:52:12,068 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306754, 'orderSn': 'XS20200908145240958408', 'orderPayMoney': '157'}}
2020-09-08 14:52:12,241 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 14:52:12,241 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3267}
2020-09-08 14:52:12,242 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 14:52:12,595 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306755, 'orderSn': 'XS20200908145240155914', 'orderPayMoney': '180'}}
2020-09-08 14:52:12,773 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 14:52:12,774 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3274}
2020-09-08 14:52:12,774 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 14:52:13,081 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306756, 'orderSn': 'XS20200908145241818823', 'orderPayMoney': '89'}}
2020-09-08 14:52:13,176 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 14:52:13,177 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:52:13,177 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 14:52:13,503 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306757, 'orderSn': 'XS20200908145241265907', 'orderPayMoney': '99'}}
2020-09-08 14:52:13,890 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 14:52:13,890 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3160}
2020-09-08 14:52:13,890 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 14:52:14,233 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306758, 'orderSn': 'XS20200908145242866486', 'orderPayMoney': '148'}}
2020-09-08 14:52:14,638 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 14:52:14,638 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3161}
2020-09-08 14:52:14,638 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 14:52:14,983 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306759, 'orderSn': 'XS20200908145243563400', 'orderPayMoney': '148'}}
2020-09-08 14:52:15,376 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 14:52:15,376 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3692}
2020-09-08 14:52:15,377 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:52:15,699 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306760, 'orderSn': 'XS20200908145243610396', 'orderPayMoney': '142.02'}}
2020-09-08 14:52:16,063 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 14:52:16,064 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3693}
2020-09-08 14:52:16,064 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:52:16,395 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306761, 'orderSn': 'XS20200908145244108282', 'orderPayMoney': '142.02'}}
2020-09-08 14:55:00,992 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-08 14:55:00,992 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:55:00,992 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-08 14:55:01,321 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306762, 'orderSn': 'XS20200908145529377893', 'orderPayMoney': '69'}}
2020-09-08 14:55:01,351 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：69.00
2020-09-08 14:55:01,352 - test_buyNowCreateOrder.py - [line:225] - INFO: 购买第三方商品，预期的积分是：34
2020-09-08 14:55:01,352 - test_buyNowCreateOrder.py - [line:227] - INFO: 第1条用例执行通过
2020-09-08 14:55:01,512 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-08 14:55:01,512 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3162}
2020-09-08 14:55:01,512 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-08 14:55:01,859 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306763, 'orderSn': 'XS20200908145529200510', 'orderPayMoney': '157'}}
2020-09-08 14:55:01,885 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：69.00
2020-09-08 14:55:01,896 - test_buyNowCreateOrder.py - [line:179] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-08 14:55:01,896 - test_buyNowCreateOrder.py - [line:184] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-08 14:55:01,896 - test_buyNowCreateOrder.py - [line:188] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-08 14:55:01,896 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买第三方商品，预期的积分是：78
2020-09-08 14:55:01,897 - test_buyNowCreateOrder.py - [line:227] - INFO: 第2条用例执行通过
2020-09-08 14:55:02,060 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-08 14:55:02,060 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3274}
2020-09-08 14:55:02,060 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-08 14:55:02,374 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306764, 'orderSn': 'XS20200908145530821010', 'orderPayMoney': '180'}}
2020-09-08 14:55:02,398 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：279.00
2020-09-08 14:55:02,408 - test_buyNowCreateOrder.py - [line:179] - INFO: 订单的优惠券：99.00
2020-09-08 14:55:02,409 - test_buyNowCreateOrder.py - [line:184] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-08 14:55:02,409 - test_buyNowCreateOrder.py - [line:188] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-08 14:55:02,409 - test_buyNowCreateOrder.py - [line:216] - INFO: 购买第三方商品，预期的积分是：90
2020-09-08 14:55:02,409 - test_buyNowCreateOrder.py - [line:227] - INFO: 第3条用例执行通过
2020-09-08 14:55:02,551 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-08 14:55:02,552 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3275}
2020-09-08 14:55:02,552 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-08 14:55:02,863 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306765, 'orderSn': 'XS20200908145530890372', 'orderPayMoney': '89'}}
2020-09-08 14:55:02,886 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：89.00
2020-09-08 14:55:02,887 - test_buyNowCreateOrder.py - [line:225] - INFO: 购买第三方商品，预期的积分是：44
2020-09-08 14:55:02,887 - test_buyNowCreateOrder.py - [line:227] - INFO: 第4条用例执行通过
2020-09-08 14:55:02,946 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-08 14:55:02,946 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-08 14:55:02,946 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-08 14:55:03,276 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306766, 'orderSn': 'XS20200908145531993011', 'orderPayMoney': '99'}}
2020-09-08 14:55:03,464 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-08 14:55:03,464 - test_buyNowCreateOrder.py - [line:222] - INFO: 购买自营商品，预期的积分是：99
2020-09-08 14:55:03,465 - test_buyNowCreateOrder.py - [line:227] - INFO: 第5条用例执行通过
2020-09-08 14:55:03,608 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-08 14:55:03,609 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3163}
2020-09-08 14:55:03,609 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-08 14:55:03,945 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306767, 'orderSn': 'XS20200908145532248838', 'orderPayMoney': '148'}}
2020-09-08 14:55:04,130 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-08 14:55:04,143 - test_buyNowCreateOrder.py - [line:179] - INFO: 订单的优惠券：25.00
2020-09-08 14:55:04,143 - test_buyNowCreateOrder.py - [line:184] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:55:04,143 - test_buyNowCreateOrder.py - [line:188] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-08 14:55:04,143 - test_buyNowCreateOrder.py - [line:213] - INFO: 购买自营商品，预期的积分是：148
2020-09-08 14:55:04,143 - test_buyNowCreateOrder.py - [line:227] - INFO: 第6条用例执行通过
2020-09-08 14:55:04,297 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-08 14:55:04,298 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3164}
2020-09-08 14:55:04,298 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-08 14:55:04,641 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306768, 'orderSn': 'XS20200908145532641433', 'orderPayMoney': '148'}}
2020-09-08 14:55:04,803 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-08 14:55:04,815 - test_buyNowCreateOrder.py - [line:179] - INFO: 订单的优惠券：25.00
2020-09-08 14:55:04,815 - test_buyNowCreateOrder.py - [line:184] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:55:04,815 - test_buyNowCreateOrder.py - [line:188] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-08 14:55:04,815 - test_buyNowCreateOrder.py - [line:213] - INFO: 购买自营商品，预期的积分是：148
2020-09-08 14:55:04,816 - test_buyNowCreateOrder.py - [line:227] - INFO: 第7条用例执行通过
2020-09-08 14:55:04,956 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-08 14:55:04,957 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3694}
2020-09-08 14:55:04,957 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:55:05,298 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306769, 'orderSn': 'XS20200908145533904379', 'orderPayMoney': '142.02'}}
2020-09-08 14:55:05,457 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-08 14:55:05,470 - test_buyNowCreateOrder.py - [line:179] - INFO: 订单的优惠券：25.00
2020-09-08 14:55:05,470 - test_buyNowCreateOrder.py - [line:184] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:55:05,470 - test_buyNowCreateOrder.py - [line:193] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-08 14:55:05,470 - test_buyNowCreateOrder.py - [line:196] - INFO: 订单金额校验通过
2020-09-08 14:55:05,470 - test_buyNowCreateOrder.py - [line:213] - INFO: 购买自营商品，预期的积分是：142
2020-09-08 14:55:05,470 - test_buyNowCreateOrder.py - [line:227] - INFO: 第8条用例执行通过
2020-09-08 14:55:05,631 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-08 14:55:05,631 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3695}
2020-09-08 14:55:05,631 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-08 14:55:05,978 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306770, 'orderSn': 'XS20200908145534738373', 'orderPayMoney': '142.02'}}
2020-09-08 14:55:06,140 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-08 14:55:06,150 - test_buyNowCreateOrder.py - [line:179] - INFO: 订单的优惠券：25.00
2020-09-08 14:55:06,150 - test_buyNowCreateOrder.py - [line:184] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-08 14:55:06,150 - test_buyNowCreateOrder.py - [line:193] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-08 14:55:06,150 - test_buyNowCreateOrder.py - [line:196] - INFO: 订单金额校验通过
2020-09-08 14:55:06,150 - test_buyNowCreateOrder.py - [line:213] - INFO: 购买自营商品，预期的积分是：142
2020-09-08 14:55:06,151 - test_buyNowCreateOrder.py - [line:227] - INFO: 第9条用例执行通过
2020-09-09 14:22:37,897 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-09 14:22:38,163 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-09 14:22:38,179 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-09 14:22:38,195 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-09 14:22:38,210 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-09 14:22:38,226 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-09 14:22:38,241 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-09 14:22:38,256 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-09 14:22:38,272 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-09 14:22:38,288 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-09 14:22:38,335 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-09 14:22:38,350 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-09 14:22:38,365 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-09 14:22:38,380 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-09 14:22:38,394 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-09 14:22:38,410 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-09 14:22:38,425 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-09 14:22:39,907 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-09 14:22:39,907 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-09 14:22:39,907 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-09 14:22:40,268 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306778, 'orderSn': 'XS20200909142240567876', 'orderPayMoney': '69'}}
2020-09-09 14:22:40,336 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：69.00
2020-09-09 14:22:40,337 - test_buyNowCreateOrder.py - [line:223] - INFO: 购买第三方商品，预期的积分是：34
2020-09-09 14:22:40,337 - test_buyNowCreateOrder.py - [line:225] - INFO: 第1条用例执行通过
2020-09-09 14:22:40,500 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-09 14:22:40,500 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-09 14:22:40,500 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-09 14:22:40,869 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306779, 'orderSn': 'XS20200909142241973392', 'orderPayMoney': '157'}}
2020-09-09 14:22:40,901 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：69.00
2020-09-09 14:22:40,917 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-09 14:22:40,917 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-09 14:22:40,917 - test_buyNowCreateOrder.py - [line:186] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-09 14:22:40,918 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买第三方商品，预期的积分是：78
2020-09-09 14:22:40,918 - test_buyNowCreateOrder.py - [line:225] - INFO: 第2条用例执行通过
2020-09-09 14:22:42,264 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-09 14:22:42,264 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-09 14:22:42,265 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-09 14:22:43,631 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306780, 'orderSn': 'XS20200909142244972587', 'orderPayMoney': '180'}}
2020-09-09 14:22:43,705 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：279.00
2020-09-09 14:22:43,717 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：99.00
2020-09-09 14:22:43,717 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-09 14:22:43,717 - test_buyNowCreateOrder.py - [line:186] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-09 14:22:43,717 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买第三方商品，预期的积分是：90
2020-09-09 14:22:43,717 - test_buyNowCreateOrder.py - [line:225] - INFO: 第3条用例执行通过
2020-09-09 14:22:43,881 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-09 14:22:43,881 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3270}
2020-09-09 14:22:43,881 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-09 14:22:44,217 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306781, 'orderSn': 'XS20200909142244234822', 'orderPayMoney': '89'}}
2020-09-09 14:22:44,298 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：89.00
2020-09-09 14:22:44,298 - test_buyNowCreateOrder.py - [line:223] - INFO: 购买第三方商品，预期的积分是：44
2020-09-09 14:22:44,298 - test_buyNowCreateOrder.py - [line:225] - INFO: 第4条用例执行通过
2020-09-09 14:22:44,348 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-09 14:22:44,349 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-09 14:22:44,349 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-09 14:22:44,669 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306782, 'orderSn': 'XS20200909142245561660', 'orderPayMoney': '99'}}
2020-09-09 14:22:46,820 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:22:46,820 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买自营商品，预期的积分是：99
2020-09-09 14:22:46,820 - test_buyNowCreateOrder.py - [line:225] - INFO: 第5条用例执行通过
2020-09-09 14:22:46,971 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-09 14:22:46,972 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3158}
2020-09-09 14:22:46,972 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-09 14:22:47,318 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306783, 'orderSn': 'XS20200909142248986935', 'orderPayMoney': '148'}}
2020-09-09 14:22:48,360 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:22:48,370 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：25.00
2020-09-09 14:22:48,370 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-09 14:22:48,371 - test_buyNowCreateOrder.py - [line:186] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-09 14:22:48,371 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买自营商品，预期的积分是：148
2020-09-09 14:22:48,371 - test_buyNowCreateOrder.py - [line:225] - INFO: 第6条用例执行通过
2020-09-09 14:22:48,511 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-09 14:22:48,512 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3162}
2020-09-09 14:22:48,512 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-09 14:22:48,828 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306784, 'orderSn': 'XS20200909142249303732', 'orderPayMoney': '148'}}
2020-09-09 14:22:49,201 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:22:49,212 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：25.00
2020-09-09 14:22:49,212 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-09 14:22:49,212 - test_buyNowCreateOrder.py - [line:186] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-09 14:22:49,213 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买自营商品，预期的积分是：148
2020-09-09 14:22:49,213 - test_buyNowCreateOrder.py - [line:225] - INFO: 第7条用例执行通过
2020-09-09 14:22:49,390 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-09 14:22:49,390 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-09 14:22:49,390 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-09 14:22:49,735 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306785, 'orderSn': 'XS20200909142250144476', 'orderPayMoney': '142.02'}}
2020-09-09 14:22:49,892 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:22:49,903 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：25.00
2020-09-09 14:22:49,903 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-09 14:22:49,903 - test_buyNowCreateOrder.py - [line:191] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-09 14:22:49,903 - test_buyNowCreateOrder.py - [line:194] - INFO: 订单金额校验通过
2020-09-09 14:22:49,903 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买自营商品，预期的积分是：142
2020-09-09 14:22:49,903 - test_buyNowCreateOrder.py - [line:225] - INFO: 第8条用例执行通过
2020-09-09 14:22:50,261 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-09 14:22:50,261 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3689}
2020-09-09 14:22:50,261 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-09 14:22:50,611 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306786, 'orderSn': 'XS20200909142251608560', 'orderPayMoney': '142.02'}}
2020-09-09 14:22:52,114 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:22:52,123 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：25.00
2020-09-09 14:22:52,123 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-09 14:22:52,123 - test_buyNowCreateOrder.py - [line:191] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-09 14:22:52,123 - test_buyNowCreateOrder.py - [line:194] - INFO: 订单金额校验通过
2020-09-09 14:22:52,124 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买自营商品，预期的积分是：142
2020-09-09 14:22:52,124 - test_buyNowCreateOrder.py - [line:225] - INFO: 第9条用例执行通过
2020-09-09 14:22:52,187 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-09 14:22:52,232 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-09 14:22:52,257 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-09 14:22:52,280 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-09 14:22:52,283 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-09 14:22:52,362 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-09 14:22:52,378 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-09 14:22:52,393 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-09 14:22:52,409 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-09 14:22:52,425 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-09 14:22:52,441 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-09 14:26:55,183 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-09 14:26:55,190 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-09 14:26:55,195 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-09 14:26:55,199 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-09 14:26:55,203 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-09 14:26:55,208 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-09 14:26:55,212 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-09 14:26:55,215 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-09 14:26:55,219 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-09 14:26:55,223 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-09 14:26:55,227 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-09 14:26:55,231 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-09 14:26:55,234 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-09 14:26:55,237 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-09 14:26:55,242 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-09 14:26:55,246 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-09 14:26:55,249 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-09 14:26:56,717 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-09 14:26:56,717 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-09 14:26:56,717 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-09 14:26:57,037 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306787, 'orderSn': 'XS20200909142657553544', 'orderPayMoney': '69'}}
2020-09-09 14:26:57,059 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：69.00
2020-09-09 14:26:57,060 - test_buyNowCreateOrder.py - [line:223] - INFO: 购买第三方商品，预期的积分是：34
2020-09-09 14:26:57,060 - test_buyNowCreateOrder.py - [line:225] - INFO: 第1条用例执行通过
2020-09-09 14:26:57,213 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-09 14:26:57,213 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3163}
2020-09-09 14:26:57,213 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-09 14:26:57,546 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306788, 'orderSn': 'XS20200909142658232427', 'orderPayMoney': '157'}}
2020-09-09 14:26:57,572 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：69.00
2020-09-09 14:26:57,583 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-09 14:26:57,583 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-09 14:26:57,583 - test_buyNowCreateOrder.py - [line:186] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-09 14:26:57,583 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买第三方商品，预期的积分是：78
2020-09-09 14:26:57,583 - test_buyNowCreateOrder.py - [line:225] - INFO: 第2条用例执行通过
2020-09-09 14:26:57,719 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-09 14:26:57,719 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3270}
2020-09-09 14:26:57,719 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-09 14:26:58,062 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306789, 'orderSn': 'XS20200909142658105562', 'orderPayMoney': '180'}}
2020-09-09 14:26:58,088 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：279.00
2020-09-09 14:26:58,098 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：99.00
2020-09-09 14:26:58,098 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-09 14:26:58,098 - test_buyNowCreateOrder.py - [line:186] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-09 14:26:58,099 - test_buyNowCreateOrder.py - [line:214] - INFO: 购买第三方商品，预期的积分是：90
2020-09-09 14:26:58,099 - test_buyNowCreateOrder.py - [line:225] - INFO: 第3条用例执行通过
2020-09-09 14:26:58,237 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-09 14:26:58,237 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3271}
2020-09-09 14:26:58,237 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-09 14:26:58,597 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306790, 'orderSn': 'XS20200909142659598489', 'orderPayMoney': '89'}}
2020-09-09 14:26:58,620 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：89.00
2020-09-09 14:26:58,620 - test_buyNowCreateOrder.py - [line:223] - INFO: 购买第三方商品，预期的积分是：44
2020-09-09 14:26:58,620 - test_buyNowCreateOrder.py - [line:225] - INFO: 第4条用例执行通过
2020-09-09 14:26:58,671 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-09 14:26:58,671 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-09 14:26:58,671 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-09 14:26:58,982 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306791, 'orderSn': 'XS20200909142659655743', 'orderPayMoney': '99'}}
2020-09-09 14:26:59,162 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:26:59,163 - test_buyNowCreateOrder.py - [line:220] - INFO: 购买自营商品，预期的积分是：99
2020-09-09 14:26:59,163 - test_buyNowCreateOrder.py - [line:225] - INFO: 第5条用例执行通过
2020-09-09 14:26:59,318 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-09 14:26:59,318 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3165}
2020-09-09 14:26:59,318 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-09 14:26:59,645 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306792, 'orderSn': 'XS20200909142700934248', 'orderPayMoney': '148'}}
2020-09-09 14:27:00,503 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:27:00,513 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：25.00
2020-09-09 14:27:00,513 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-09 14:27:00,513 - test_buyNowCreateOrder.py - [line:186] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-09 14:27:00,513 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买自营商品，预期的积分是：148
2020-09-09 14:27:00,513 - test_buyNowCreateOrder.py - [line:225] - INFO: 第6条用例执行通过
2020-09-09 14:27:00,686 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-09 14:27:00,686 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3166}
2020-09-09 14:27:00,686 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-09 14:27:00,996 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306793, 'orderSn': 'XS20200909142701451441', 'orderPayMoney': '148'}}
2020-09-09 14:27:01,233 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:27:01,243 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：25.00
2020-09-09 14:27:01,243 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-09 14:27:01,243 - test_buyNowCreateOrder.py - [line:186] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-09 14:27:01,243 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买自营商品，预期的积分是：148
2020-09-09 14:27:01,243 - test_buyNowCreateOrder.py - [line:225] - INFO: 第7条用例执行通过
2020-09-09 14:27:01,391 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-09 14:27:01,392 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3692}
2020-09-09 14:27:01,392 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-09 14:27:01,771 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306794, 'orderSn': 'XS20200909142702528550', 'orderPayMoney': '142.02'}}
2020-09-09 14:27:01,974 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:27:01,989 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：25.00
2020-09-09 14:27:01,990 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-09 14:27:01,990 - test_buyNowCreateOrder.py - [line:191] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-09 14:27:01,991 - test_buyNowCreateOrder.py - [line:194] - INFO: 订单金额校验通过
2020-09-09 14:27:01,991 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买自营商品，预期的积分是：142
2020-09-09 14:27:01,991 - test_buyNowCreateOrder.py - [line:225] - INFO: 第8条用例执行通过
2020-09-09 14:27:02,148 - test_buyNowCreateOrder.py - [line:139] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-09 14:27:02,148 - test_buyNowCreateOrder.py - [line:140] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3694}
2020-09-09 14:27:02,148 - test_buyNowCreateOrder.py - [line:141] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-09 14:27:02,486 - test_buyNowCreateOrder.py - [line:149] - INFO: 接口响应数据：{'code': 0, 'msg': '成功', 'data': {'orderId': 54306795, 'orderSn': 'XS20200909142703431492', 'orderPayMoney': '142.02'}}
2020-09-09 14:27:02,648 - test_buyNowCreateOrder.py - [line:167] - INFO: 订单的原价格：99.00
2020-09-09 14:27:02,658 - test_buyNowCreateOrder.py - [line:177] - INFO: 订单的优惠券：25.00
2020-09-09 14:27:02,658 - test_buyNowCreateOrder.py - [line:182] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-09 14:27:02,658 - test_buyNowCreateOrder.py - [line:191] - INFO: 订单实际金额：142.0200; 订单预期金额：142.0202020202020202020202020
2020-09-09 14:27:02,658 - test_buyNowCreateOrder.py - [line:194] - INFO: 订单金额校验通过
2020-09-09 14:27:02,658 - test_buyNowCreateOrder.py - [line:211] - INFO: 购买自营商品，预期的积分是：142
2020-09-09 14:27:02,658 - test_buyNowCreateOrder.py - [line:225] - INFO: 第9条用例执行通过
2020-09-09 14:27:02,719 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-09 14:27:02,757 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-09 14:27:02,778 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-09 14:27:02,800 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-09 14:27:02,802 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-09 14:27:02,808 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-09 14:27:02,812 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-09 14:27:02,817 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-09 14:27:02,821 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-09 14:27:02,825 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-09 14:27:02,830 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-09 14:27:08,020 - run.py - [line:47] - INFO: 邮件发送成功
2020-09-11 10:21:06,953 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 10:21:07,027 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 10:21:07,043 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 10:21:07,059 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 10:21:07,073 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 10:21:07,090 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 10:21:07,106 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 10:21:07,122 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 10:21:07,137 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 10:21:07,152 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-11 10:21:07,169 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-11 10:21:07,184 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-11 10:21:07,200 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-11 10:21:07,215 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-11 10:21:07,232 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-11 10:21:07,247 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-11 10:21:07,263 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-11 10:21:51,043 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 10:21:51,050 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 10:21:51,061 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 10:21:51,067 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 10:21:51,077 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 10:21:51,083 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 10:21:51,093 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 10:21:51,099 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 10:21:51,109 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 10:21:51,113 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-11 10:21:51,125 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-11 10:21:51,129 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-11 10:21:51,141 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-11 10:21:51,144 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-11 10:21:51,156 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-11 10:21:51,161 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-11 10:21:51,173 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-11 10:24:41,219 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 10:24:41,225 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 10:24:41,229 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 10:24:41,240 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 10:24:41,244 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 10:24:41,256 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 10:24:41,260 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 10:24:41,272 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 10:24:41,275 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 10:24:41,287 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-11 10:24:41,292 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-11 10:24:41,575 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-09-11 10:24:41,576 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:24:41,576 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 10:24:41,578 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-11 10:24:41,611 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 10:24:41,612 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 10:24:41,612 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:24:41,612 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-11 10:24:41,665 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 10:24:41,665 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 10:24:41,666 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:24:41,666 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-11 10:24:41,819 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-09-11 10:24:41,819 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:24:41,819 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 10:24:41,821 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-11 10:24:41,866 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 10:24:41,866 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 10:24:41,867 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:24:41,867 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-11 10:24:41,916 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 10:24:41,916 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 10:24:41,916 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:24:41,917 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-11 10:24:42,019 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-09-11 10:24:42,019 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:24:42,019 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 10:25:14,418 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 10:25:14,514 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 10:25:14,514 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:25:14,515 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:14,515 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 10:25:14,633 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 10:25:14,633 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:25:14,633 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:14,634 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 10:25:14,722 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-09-11 10:25:14,722 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:25:14,722 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 10:25:14,725 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 10:25:14,776 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-09-11 10:25:14,776 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'data': None, 'msg': '该规格的商品已下架'}
2020-09-11 10:25:14,776 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:14,777 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 10:25:14,802 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-09-11 10:25:14,802 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '购买数量不能为0'}
2020-09-11 10:25:14,802 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:14,803 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 10:25:14,825 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-09-11 10:25:14,825 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '单次最多购买99个'}
2020-09-11 10:25:14,825 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:14,825 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 10:25:14,864 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-09-11 10:25:14,864 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'data': None, 'msg': '该规格的商品不存在！'}
2020-09-11 10:25:14,864 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:14,865 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 10:25:14,907 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-09-11 10:25:14,907 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'data': None, 'msg': '该规格的商品已下架'}
2020-09-11 10:25:14,907 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:14,907 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 10:25:14,958 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-09-11 10:25:14,958 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '不存在的赠品'}
2020-09-11 10:25:14,958 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:14,959 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-11 10:25:15,005 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-09-11 10:25:15,005 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '不存在的赠品'}
2020-09-11 10:25:15,005 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:15,005 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-11 10:25:15,089 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-09-11 10:25:15,089 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:25:15,089 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 10:25:15,091 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-11 10:25:15,119 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 10:25:15,119 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 10:25:15,119 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:15,120 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-11 10:25:15,142 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 10:25:15,143 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 10:25:15,143 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:15,143 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-11 10:25:15,232 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-09-11 10:25:15,233 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:25:15,233 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 10:25:15,234 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-11 10:25:15,259 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 10:25:15,259 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 10:25:15,259 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:15,260 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-11 10:25:15,282 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 10:25:15,283 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 10:25:15,283 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 10:25:15,283 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-11 10:25:15,373 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-09-11 10:25:15,373 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 10:25:15,374 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 10:26:15,171 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 10:26:15,239 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 10:26:15,239 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'data': None, 'msg': 'deviceNumber为空'}
2020-09-11 10:26:15,239 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:26:15,244 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 10:26:15,267 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-09-11 10:26:15,267 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'data': None, 'msg': 'deviceNumber为空'}
2020-09-11 10:26:15,268 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:26:15,271 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 10:26:15,293 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-09-11 10:26:15,293 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'data': None, 'msg': 'deviceNumber为空'}
2020-09-11 10:26:15,294 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:26:15,296 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 10:26:15,317 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-11 10:26:15,318 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'data': None, 'msg': 'deviceNumber为空'}
2020-09-11 10:26:15,318 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:26:15,321 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 10:26:15,352 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 10:26:15,352 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'data': None, 'msg': 'deviceNumber为空'}
2020-09-11 10:26:15,352 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:26:15,355 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 10:26:15,375 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 10:26:15,375 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'data': None, 'msg': 'deviceNumber为空'}
2020-09-11 10:26:15,376 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:26:15,378 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 10:26:15,398 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 10:26:15,398 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 10000, 'data': None, 'msg': 'deviceNumber为空'}
2020-09-11 10:26:15,398 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:29:44,451 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 10:29:44,540 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 10:29:44,540 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 3, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'sellerUserId': 1, 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'isBindBizUserId': 1, 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 10:29:44,540 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 10:29:44,541 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 10:29:44,568 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '该手机号未注册过请先注册'}
2020-09-11 10:29:44,568 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 10:29:44,569 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:29:44,573 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 10:29:44,596 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 30005, 'msg': '手机号码不能为空'}
2020-09-11 10:29:44,596 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '登录手机号不能为空！'}
2020-09-11 10:29:44,596 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:29:44,601 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 10:29:44,620 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-11 10:29:44,620 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '密码不能为空'}
2020-09-11 10:29:44,620 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 10:29:44,621 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 10:29:44,647 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 10:29:44,647 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12005, 'data': None, 'msg': '密码错误'}
2020-09-11 10:29:44,647 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 10:29:44,648 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 10:29:44,704 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 10:29:44,704 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'ed8477e431fea2d7978c751e6d7527da', 'memberDto': {'appVersion': '', 'addTime': 0, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': '5XVEtw', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 0, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 1, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 0, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 12, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 2, 'nickname': '刘冬', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 12, 'sex': '', 'mobile': '13854280515', 'weixinQrcode': '', 'sellerUserId': 3, 'partnerNickName': '', 'portrait': 'http://img.inglemirepharmmall.com/uinfo/6b67560b23af2fb369555be4155d8c48/portrait201905VSDE15.jpeg?x-oss-process=style/q60', 'userId': 21133, 'bizUserId': 'P38978897223745536', 'realname': '刘冬', 'isBindBizUserId': 1, 'userToken': 'ed8477e431fea2d7978c751e6d7527da', 'partner': '', 'regYsTime': 2147483647, 'bindWxNickName': '冬灬          8℃', 'idcard': '232722198501070013', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '13854280515'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 10:29:44,704 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 10:29:44,707 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 10:29:44,750 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 10:29:44,750 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'ed8477e431fea2d7978c751e6d7527da', 'memberDto': {'appVersion': '', 'addTime': 0, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': '5XVEtw', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 0, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 1, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 0, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 12, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 2, 'nickname': '刘冬', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 12, 'sex': '', 'mobile': '13854280515', 'weixinQrcode': '', 'sellerUserId': 3, 'partnerNickName': '', 'portrait': 'http://img.inglemirepharmmall.com/uinfo/6b67560b23af2fb369555be4155d8c48/portrait201905VSDE15.jpeg?x-oss-process=style/q60', 'userId': 21133, 'bizUserId': 'P38978897223745536', 'realname': '刘冬', 'isBindBizUserId': 1, 'userToken': 'ed8477e431fea2d7978c751e6d7527da', 'partner': '', 'regYsTime': 2147483647, 'bindWxNickName': '冬灬          8℃', 'idcard': '232722198501070013', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '13854280515'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 10:29:44,750 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 13:23:36,394 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:23:36,465 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:23:36,465 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 3, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'sellerUserId': 1, 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'isBindBizUserId': 1, 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 13:23:36,465 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:23:36,465 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:23:36,493 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:23:36,493 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:23:36,493 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:23:36,493 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:23:36,512 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 30005, 'msg': '登录手机号不能为空！'}
2020-09-11 13:23:36,512 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '登录手机号不能为空！'}
2020-09-11 13:23:36,512 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 13:23:36,516 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:23:36,537 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-11 13:23:36,537 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '密码不能为空'}
2020-09-11 13:23:36,537 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:23:36,538 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:23:36,563 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:23:36,563 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12005, 'data': None, 'msg': '密码错误'}
2020-09-11 13:23:36,563 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:23:36,563 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:23:36,592 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:23:36,592 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:23:36,592 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 13:23:36,594 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:23:36,649 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:23:36,649 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'ed8477e431fea2d7978c751e6d7527da', 'memberDto': {'appVersion': '', 'addTime': 0, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': '5XVEtw', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 0, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 1, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 0, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 12, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 2, 'nickname': '刘冬', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 12, 'sex': '', 'mobile': '13854280515', 'weixinQrcode': '', 'sellerUserId': 3, 'partnerNickName': '', 'portrait': 'http://img.inglemirepharmmall.com/uinfo/6b67560b23af2fb369555be4155d8c48/portrait201905VSDE15.jpeg?x-oss-process=style/q60', 'userId': 21133, 'bizUserId': 'P38978897223745536', 'realname': '刘冬', 'isBindBizUserId': 1, 'userToken': 'ed8477e431fea2d7978c751e6d7527da', 'partner': '', 'regYsTime': 2147483647, 'bindWxNickName': '冬灬          8℃', 'idcard': '232722198501070013', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '13854280515'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 13:23:36,649 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 13:25:33,029 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:25:33,080 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:25:33,080 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 3, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'sellerUserId': 1, 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'isBindBizUserId': 1, 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 13:25:33,080 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:25:33,081 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:25:33,107 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:25:33,107 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:25:33,107 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:25:33,108 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:25:33,128 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '登录手机号不能为空！'}
2020-09-11 13:25:33,128 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '登录手机号不能为空！'}
2020-09-11 13:25:33,128 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:25:33,128 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:25:33,146 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-11 13:25:33,147 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '密码不能为空'}
2020-09-11 13:25:33,147 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:25:33,147 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:25:33,173 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:25:33,173 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12005, 'data': None, 'msg': '密码错误'}
2020-09-11 13:25:33,173 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:25:33,174 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:25:33,201 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:25:33,201 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:25:33,202 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 13:25:33,205 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:25:33,231 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:25:33,231 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:25:33,231 - test_login.py - [line:43] - ERROR: 用例执行失败
2020-09-11 13:28:28,045 - test_login.py - [line:23] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:28:28,104 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:28:28,104 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 3, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'sellerUserId': 1, 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'isBindBizUserId': 1, 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 13:28:28,104 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:28:28,105 - test_login.py - [line:23] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:28:28,133 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:28:28,133 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:28:28,133 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:28:28,134 - test_login.py - [line:23] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:28:28,161 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '登录手机号不能为空！'}
2020-09-11 13:28:28,161 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '登录手机号不能为空！'}
2020-09-11 13:28:28,161 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:28:28,161 - test_login.py - [line:23] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:28:28,182 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-11 13:28:28,182 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '密码不能为空'}
2020-09-11 13:28:28,182 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:28:28,182 - test_login.py - [line:23] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:28:28,207 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:28:28,208 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12005, 'data': None, 'msg': '密码错误'}
2020-09-11 13:28:28,208 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:28:28,208 - test_login.py - [line:23] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:28:28,233 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:28:28,233 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:28:28,233 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:28:28,234 - test_login.py - [line:23] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:28:28,260 - test_login.py - [line:33] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:28:28,260 - test_login.py - [line:34] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:28:28,260 - test_login.py - [line:40] - INFO: 用例执行通过
2020-09-11 13:30:10,860 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:30:11,082 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:30:11,082 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:30:11,082 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,082 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:30:11,169 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:30:11,169 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:30:11,169 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,170 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:30:11,255 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-09-11 13:30:11,256 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:30:11,256 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 13:30:11,257 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:30:11,299 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-09-11 13:30:11,300 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'data': None, 'msg': '该规格的商品已下架'}
2020-09-11 13:30:11,300 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,300 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:30:11,330 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-09-11 13:30:11,330 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '购买数量不能为0'}
2020-09-11 13:30:11,330 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,331 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:30:11,352 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-09-11 13:30:11,352 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '单次最多购买99个'}
2020-09-11 13:30:11,353 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,353 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:30:11,389 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-09-11 13:30:11,390 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'data': None, 'msg': '该规格的商品不存在！'}
2020-09-11 13:30:11,390 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,390 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 13:30:11,430 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-09-11 13:30:11,430 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'data': None, 'msg': '该规格的商品已下架'}
2020-09-11 13:30:11,430 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,430 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 13:30:11,476 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-09-11 13:30:11,477 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '不存在的赠品'}
2020-09-11 13:30:11,477 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,477 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-11 13:30:11,527 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-09-11 13:30:11,527 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '不存在的赠品'}
2020-09-11 13:30:11,528 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,528 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-11 13:30:11,610 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-09-11 13:30:11,610 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:30:11,610 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 13:30:11,611 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-11 13:30:11,631 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 13:30:11,632 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 13:30:11,632 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,632 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-11 13:30:11,653 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 13:30:11,653 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 13:30:11,653 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,654 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-11 13:30:11,734 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-09-11 13:30:11,735 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:30:11,735 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 13:30:11,735 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-11 13:30:11,757 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 13:30:11,757 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 13:30:11,757 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,757 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-11 13:30:11,777 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 13:30:11,777 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 13:30:11,778 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:30:11,778 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-11 13:30:11,863 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-09-11 13:30:11,864 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:30:11,864 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 13:30:12,482 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:30:12,482 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-11 13:30:12,482 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-11 13:30:12,603 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:12,603 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第1条用例执行失败：-1 != 0
2020-09-11 13:30:12,803 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:30:12,803 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 13:30:12,803 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-11 13:30:12,895 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:12,896 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第2条用例执行失败：-1 != 0
2020-09-11 13:30:13,067 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:30:13,067 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-11 13:30:13,067 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-11 13:30:13,184 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:13,184 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第3条用例执行失败：-1 != 0
2020-09-11 13:30:13,335 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:30:13,335 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-11 13:30:13,336 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-11 13:30:13,447 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:13,447 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第4条用例执行失败：-1 != 0
2020-09-11 13:30:13,533 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:30:13,533 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-11 13:30:13,533 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-11 13:30:13,635 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:13,635 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第5条用例执行失败：-1 != 0
2020-09-11 13:30:13,810 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:30:13,811 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 13:30:13,811 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-11 13:30:13,906 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:13,906 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第6条用例执行失败：-1 != 0
2020-09-11 13:30:14,082 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:30:14,082 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 13:30:14,083 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-11 13:30:14,173 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:14,173 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第7条用例执行失败：-1 != 0
2020-09-11 13:30:14,351 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 13:30:14,351 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-11 13:30:14,351 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-11 13:30:14,437 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:14,437 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第8条用例执行失败：-1 != 0
2020-09-11 13:30:14,587 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 13:30:14,587 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-11 13:30:14,587 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-11 13:30:14,672 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:30:14,673 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第9条用例执行失败：-1 != 0
2020-09-11 13:30:14,755 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:30:14,830 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:30:14,854 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:30:14,896 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:30:14,899 - test_login.py - [line:24] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:30:14,940 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:30:14,940 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 3, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'sellerUserId': 1, 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'isBindBizUserId': 1, 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 13:30:14,940 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:30:14,970 - test_login.py - [line:24] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:30:14,996 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:30:14,996 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:30:14,996 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:30:15,045 - test_login.py - [line:24] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:30:15,064 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 400, 'msg': '登录手机号不能为空！'}
2020-09-11 13:30:15,064 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '登录手机号不能为空！'}
2020-09-11 13:30:15,064 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:30:15,103 - test_login.py - [line:24] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:30:15,122 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-11 13:30:15,122 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '密码不能为空'}
2020-09-11 13:30:15,123 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:30:15,156 - test_login.py - [line:24] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:30:15,186 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:30:15,186 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12005, 'data': None, 'msg': '密码错误'}
2020-09-11 13:30:15,187 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:30:15,220 - test_login.py - [line:24] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:30:15,251 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:30:15,251 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:30:15,251 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:30:15,285 - test_login.py - [line:24] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:30:15,311 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:30:15,311 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:30:15,311 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:31:54,742 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:31:54,841 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:31:54,841 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:31:54,842 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:54,842 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:31:54,923 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:31:54,923 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:31:54,923 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:54,923 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:31:55,008 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-09-11 13:31:55,008 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:31:55,008 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 13:31:55,011 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:31:55,038 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-09-11 13:31:55,038 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'data': None, 'msg': '该规格的商品已下架'}
2020-09-11 13:31:55,038 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,039 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:31:55,060 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-09-11 13:31:55,061 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '购买数量不能为0'}
2020-09-11 13:31:55,061 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,061 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:31:55,087 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-09-11 13:31:55,088 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '单次最多购买99个'}
2020-09-11 13:31:55,088 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,088 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:31:55,124 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-09-11 13:31:55,124 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'data': None, 'msg': '该规格的商品不存在！'}
2020-09-11 13:31:55,124 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,125 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 13:31:55,151 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-09-11 13:31:55,152 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'data': None, 'msg': '该规格的商品已下架'}
2020-09-11 13:31:55,152 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,152 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 13:31:55,199 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-09-11 13:31:55,200 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '不存在的赠品'}
2020-09-11 13:31:55,200 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,200 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-11 13:31:55,244 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-09-11 13:31:55,245 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '不存在的赠品'}
2020-09-11 13:31:55,245 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,245 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-11 13:31:55,325 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-09-11 13:31:55,326 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:31:55,326 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 13:31:55,326 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-11 13:31:55,346 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 13:31:55,346 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 13:31:55,346 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,346 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-11 13:31:55,370 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 13:31:55,370 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 13:31:55,370 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,371 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-11 13:31:55,459 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-09-11 13:31:55,459 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:31:55,459 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 13:31:55,460 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-11 13:31:55,484 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 13:31:55,484 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 13:31:55,484 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,484 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-11 13:31:55,507 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 13:31:55,507 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 13:31:55,507 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 13:31:55,507 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-11 13:31:55,589 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-09-11 13:31:55,590 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 13:31:55,590 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 13:31:56,181 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:31:56,181 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-11 13:31:56,181 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-11 13:31:56,263 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:56,263 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第1条用例执行失败：-1 != 0
2020-09-11 13:31:56,436 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:31:56,436 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 13:31:56,436 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-11 13:31:56,538 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:56,539 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第2条用例执行失败：-1 != 0
2020-09-11 13:31:56,717 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:31:56,718 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-11 13:31:56,718 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-11 13:31:56,815 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:56,815 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第3条用例执行失败：-1 != 0
2020-09-11 13:31:56,974 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:31:56,974 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-11 13:31:56,974 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-11 13:31:57,064 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:57,064 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第4条用例执行失败：-1 != 0
2020-09-11 13:31:57,154 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:31:57,154 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-11 13:31:57,154 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-11 13:31:57,232 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:57,232 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第5条用例执行失败：-1 != 0
2020-09-11 13:31:57,403 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:31:57,403 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 13:31:57,403 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-11 13:31:57,492 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:57,492 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第6条用例执行失败：-1 != 0
2020-09-11 13:31:57,651 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:31:57,651 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 13:31:57,652 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-11 13:31:57,745 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:57,746 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第7条用例执行失败：-1 != 0
2020-09-11 13:31:57,900 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 13:31:57,900 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-11 13:31:57,901 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-11 13:31:58,008 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:58,008 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第8条用例执行失败：-1 != 0
2020-09-11 13:31:58,175 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 13:31:58,175 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-11 13:31:58,176 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-11 13:31:58,265 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 13:31:58,266 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第9条用例执行失败：-1 != 0
2020-09-11 13:31:58,348 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:31:58,390 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:31:58,424 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:31:58,470 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:31:58,472 - test_login.py - [line:24] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 13:31:58,515 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 13:31:58,515 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 3, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 1, 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'sellerUserId': 1, 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'isBindBizUserId': 1, 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 13:31:58,515 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:31:58,620 - test_login.py - [line:24] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 13:31:58,647 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:31:58,647 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:31:58,647 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:31:58,737 - test_login.py - [line:24] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 13:31:58,759 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 400, 'msg': '登录手机号不能为空！'}
2020-09-11 13:31:58,759 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '登录手机号不能为空！'}
2020-09-11 13:31:58,759 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:31:58,838 - test_login.py - [line:24] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 13:31:58,865 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-11 13:31:58,865 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '密码不能为空'}
2020-09-11 13:31:58,865 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:31:58,948 - test_login.py - [line:24] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 13:31:58,978 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 13:31:58,979 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12005, 'data': None, 'msg': '密码错误'}
2020-09-11 13:31:58,979 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:31:59,057 - test_login.py - [line:24] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 13:31:59,082 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:31:59,083 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:31:59,083 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 13:31:59,156 - test_login.py - [line:24] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 13:31:59,182 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 13:31:59,183 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 13:31:59,183 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 15:55:22,050 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 15:55:22,140 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 15:55:22,140 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 15:55:22,141 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,141 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 15:55:22,221 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 15:55:22,222 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 15:55:22,222 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,222 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 15:55:22,317 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该商品不存在'}
2020-09-11 15:55:22,317 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 15:55:22,317 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 15:55:22,318 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 15:55:22,347 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-09-11 15:55:22,348 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'data': None, 'msg': '该规格的商品已下架'}
2020-09-11 15:55:22,348 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,348 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 15:55:22,371 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '购买数量不能为0'}
2020-09-11 15:55:22,371 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '购买数量不能为0'}
2020-09-11 15:55:22,371 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,372 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 15:55:22,395 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '单次最多购买99个'}
2020-09-11 15:55:22,395 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '单次最多购买99个'}
2020-09-11 15:55:22,395 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,396 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 15:55:22,435 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30004, 'msg': '该规格的商品不存在！'}
2020-09-11 15:55:22,435 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30004, 'data': None, 'msg': '该规格的商品不存在！'}
2020-09-11 15:55:22,435 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,436 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 15:55:22,464 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 30005, 'msg': '该规格的商品已下架'}
2020-09-11 15:55:22,465 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 30005, 'data': None, 'msg': '该规格的商品已下架'}
2020-09-11 15:55:22,465 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,465 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 15:55:22,512 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-09-11 15:55:22,512 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '不存在的赠品'}
2020-09-11 15:55:22,512 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,513 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-11 15:55:22,556 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 40000, 'msg': '不存在的赠品'}
2020-09-11 15:55:22,556 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 40000, 'data': None, 'msg': '不存在的赠品'}
2020-09-11 15:55:22,557 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,557 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-11 15:55:22,642 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'goodsId' is not present"}
2020-09-11 15:55:22,642 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 15:55:22,642 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 15:55:22,643 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-11 15:55:22,664 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 15:55:22,664 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'quantity' is not present"}
2020-09-11 15:55:22,665 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,665 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-11 15:55:22,685 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 15:55:22,685 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10004, 'data': None, 'msg': "参数未传或丢失：Required Integer parameter 'priceId' is not present"}
2020-09-11 15:55:22,685 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,685 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-11 15:55:22,769 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'sellMarks' is not present"}
2020-09-11 15:55:22,769 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 15:55:22,769 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 15:55:22,770 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-11 15:55:22,790 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 15:55:22,790 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "qwe"'}
2020-09-11 15:55:22,791 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,791 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-11 15:55:22,811 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 15:55:22,811 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 10005, 'data': None, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "rty"'}
2020-09-11 15:55:22,811 - test_addGoods.py - [line:49] - INFO: 用例执行通过
2020-09-11 15:55:22,812 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-11 15:55:22,888 - test_addGoods.py - [line:43] - INFO: 预期结果是：{'code': 10005, 'msg': '参数类型错误：Failed to convert value of type \'java.lang.String\' to required type \'java.lang.Integer\'; nested exception is java.lang.NumberFormatException: For input string: "asd"'}
2020-09-11 15:55:22,888 - test_addGoods.py - [line:44] - INFO: 实际结果是：{'code': 0, 'data': True, 'msg': '成功'}
2020-09-11 15:55:22,889 - test_addGoods.py - [line:52] - ERROR: 用例执行失败
2020-09-11 15:55:23,501 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 15:55:23,501 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-11 15:55:23,501 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-11 15:55:23,631 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:23,631 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第1条用例执行失败：-1 != 0
2020-09-11 15:55:23,825 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 15:55:23,825 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 15:55:23,826 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-11 15:55:23,919 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:23,920 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第2条用例执行失败：-1 != 0
2020-09-11 15:55:24,091 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 15:55:24,091 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-11 15:55:24,091 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-11 15:55:24,188 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:24,188 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第3条用例执行失败：-1 != 0
2020-09-11 15:55:24,348 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 15:55:24,348 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-11 15:55:24,349 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-11 15:55:24,437 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:24,437 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第4条用例执行失败：-1 != 0
2020-09-11 15:55:24,507 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 15:55:24,507 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-11 15:55:24,507 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-11 15:55:24,588 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:24,588 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第5条用例执行失败：-1 != 0
2020-09-11 15:55:24,748 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 15:55:24,749 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 15:55:24,749 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-11 15:55:24,845 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:24,845 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第6条用例执行失败：-1 != 0
2020-09-11 15:55:25,039 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 15:55:25,040 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-11 15:55:25,040 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-11 15:55:25,130 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:25,130 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第7条用例执行失败：-1 != 0
2020-09-11 15:55:25,311 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-11 15:55:25,311 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-11 15:55:25,311 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-11 15:55:25,398 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:25,398 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第8条用例执行失败：-1 != 0
2020-09-11 15:55:25,564 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-11 15:55:25,564 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-11 15:55:25,564 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-11 15:55:25,652 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': -1, 'data': None, 'msg': '请求失败，请重试！'}
2020-09-11 15:55:25,652 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第9条用例执行失败：-1 != 0
2020-09-11 15:55:25,732 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 15:55:25,774 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 15:55:25,775 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'data': None, 'msg': '成功'}
2020-09-11 15:55:25,775 - test_getGoodsListByCouponId.py - [line:63] - INFO: 用例执行通过
2020-09-11 15:55:25,860 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 15:55:25,887 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-09-11 15:55:25,887 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'data': None, 'msg': '成功'}
2020-09-11 15:55:25,888 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-09-11 15:55:25,966 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 15:55:25,991 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 60001, 'msg': '优惠券不存在'}
2020-09-11 15:55:25,992 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'data': None, 'msg': '成功'}
2020-09-11 15:55:25,992 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-09-11 15:55:26,049 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 15:55:26,072 - test_getGoodsListByCouponId.py - [line:57] - INFO: 预期结果是：{'code': 10004, 'msg': "参数未传或丢失：Required Integer parameter 'couponId' is not present"}
2020-09-11 15:55:26,072 - test_getGoodsListByCouponId.py - [line:58] - INFO: 实际结果是：{'code': 0, 'data': None, 'msg': '成功'}
2020-09-11 15:55:26,072 - test_getGoodsListByCouponId.py - [line:66] - ERROR: 用例执行失败
2020-09-11 15:55:26,101 - test_login.py - [line:24] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-11 15:55:26,151 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-11 15:55:26,151 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 3, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 2, 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'sellerUserId': 0, 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991488', 'realname': '', 'isBindBizUserId': 1, 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}, 'msg': '成功'}
2020-09-11 15:55:26,152 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 15:55:26,193 - test_login.py - [line:24] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-11 15:55:26,221 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 15:55:26,221 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 15:55:26,222 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 15:55:26,248 - test_login.py - [line:24] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-11 15:55:26,267 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 400, 'msg': '登录手机号不能为空！'}
2020-09-11 15:55:26,268 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '登录手机号不能为空！'}
2020-09-11 15:55:26,268 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 15:55:26,294 - test_login.py - [line:24] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-11 15:55:26,314 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-11 15:55:26,314 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '密码不能为空'}
2020-09-11 15:55:26,315 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 15:55:26,343 - test_login.py - [line:24] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-11 15:55:26,370 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-11 15:55:26,370 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12005, 'data': None, 'msg': '密码错误'}
2020-09-11 15:55:26,370 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 15:55:26,398 - test_login.py - [line:24] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-11 15:55:26,423 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 15:55:26,424 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 15:55:26,424 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-11 15:55:26,450 - test_login.py - [line:24] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-11 15:55:26,475 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-11 15:55:26,475 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-11 15:55:26,475 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-15 15:45:19,665 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-15 15:45:21,748 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-15 15:45:23,826 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-15 15:45:25,896 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-15 15:45:27,983 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-15 15:45:30,061 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-15 15:45:32,138 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-15 15:45:34,214 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-15 15:45:36,292 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-15 15:45:38,373 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第10条测试用例==================================
2020-09-15 15:45:40,457 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第11条测试用例==================================
2020-09-15 15:45:42,535 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第12条测试用例==================================
2020-09-15 15:45:44,607 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第13条测试用例==================================
2020-09-15 15:45:46,690 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第14条测试用例==================================
2020-09-15 15:45:48,765 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第15条测试用例==================================
2020-09-15 15:45:50,844 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第16条测试用例==================================
2020-09-15 15:45:52,933 - test_addGoods.py - [line:32] - INFO: ==================================开始执行第17条测试用例==================================
2020-09-15 15:45:55,658 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-15 15:45:55,658 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 2126, 'quantity': 1, 'addrId': 950269}
2020-09-15 15:45:55,658 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单第三方商品，未用优惠券
2020-09-15 15:45:56,107 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306856, 'orderSn': 'XS20200915154557545286', 'orderPayMoney': '69'}, 'msg': '成功'}
2020-09-15 15:45:56,139 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：69.00
2020-09-15 15:45:56,139 - test_buyNowCreateOrder.py - [line:224] - INFO: 购买第三方商品，预期的积分是：34
2020-09-15 15:45:56,139 - test_buyNowCreateOrder.py - [line:226] - INFO: 第1条用例执行通过
2020-09-15 15:45:56,339 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-15 15:45:56,339 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 2126, 'quantity': 3, 'addrId': 950269, 'memberCouponId': 3152}
2020-09-15 15:45:56,339 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单第三方商品，使用全场可用优惠券
2020-09-15 15:45:56,677 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306857, 'orderSn': 'XS20200915154557972154', 'orderPayMoney': '157'}, 'msg': '成功'}
2020-09-15 15:45:56,704 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：69.00
2020-09-15 15:45:56,715 - test_buyNowCreateOrder.py - [line:178] - INFO: 订单的优惠券：16.66666666666666666666666667
2020-09-15 15:45:56,715 - test_buyNowCreateOrder.py - [line:183] - INFO: 订单的返利：9.101449275362318840579710145
2020-09-15 15:45:56,715 - test_buyNowCreateOrder.py - [line:187] - INFO: L0用户计算后的订单实付金额为：157.0000000000000000000000000; 优惠券金额50.00000000000000000000000001
2020-09-15 15:45:56,715 - test_buyNowCreateOrder.py - [line:215] - INFO: 购买第三方商品，预期的积分是：78
2020-09-15 15:45:56,715 - test_buyNowCreateOrder.py - [line:226] - INFO: 第2条用例执行通过
2020-09-15 15:45:56,900 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-15 15:45:56,900 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 5590, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3268}
2020-09-15 15:45:56,901 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品可用
2020-09-15 15:45:57,277 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306858, 'orderSn': 'XS20200915154558173244', 'orderPayMoney': '180'}, 'msg': '成功'}
2020-09-15 15:45:57,305 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：279.00
2020-09-15 15:45:57,316 - test_buyNowCreateOrder.py - [line:178] - INFO: 订单的优惠券：99.00
2020-09-15 15:45:57,316 - test_buyNowCreateOrder.py - [line:183] - INFO: 订单的返利：19.35483870967741935483870968
2020-09-15 15:45:57,316 - test_buyNowCreateOrder.py - [line:187] - INFO: L0用户计算后的订单实付金额为：180.00; 优惠券金额99.00
2020-09-15 15:45:57,316 - test_buyNowCreateOrder.py - [line:215] - INFO: 购买第三方商品，预期的积分是：90
2020-09-15 15:45:57,316 - test_buyNowCreateOrder.py - [line:226] - INFO: 第3条用例执行通过
2020-09-15 15:45:57,484 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-15 15:45:57,484 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 5510, 'quantity': 1, 'addrId': 950269, 'memberCouponId': 3271}
2020-09-15 15:45:57,484 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，使用指定商品可用优惠券，购买第三方商品，该商品不可用
2020-09-15 15:45:57,833 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306859, 'orderSn': 'XS20200915154558808508', 'orderPayMoney': '89'}, 'msg': '成功'}
2020-09-15 15:45:57,861 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：89.00
2020-09-15 15:45:57,861 - test_buyNowCreateOrder.py - [line:224] - INFO: 购买第三方商品，预期的积分是：44
2020-09-15 15:45:57,861 - test_buyNowCreateOrder.py - [line:226] - INFO: 第4条用例执行通过
2020-09-15 15:45:57,930 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-15 15:45:57,930 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 1, 'addrId': 950269}
2020-09-15 15:45:57,930 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，未用优惠券
2020-09-15 15:45:58,280 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306860, 'orderSn': 'XS20200915154559285434', 'orderPayMoney': '99'}, 'msg': '成功'}
2020-09-15 15:45:58,507 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-15 15:45:58,507 - test_buyNowCreateOrder.py - [line:221] - INFO: 购买自营商品，预期的积分是：99
2020-09-15 15:45:58,507 - test_buyNowCreateOrder.py - [line:226] - INFO: 第5条用例执行通过
2020-09-15 15:45:58,664 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-15 15:45:58,665 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3158}
2020-09-15 15:45:58,665 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，使用全场可用优惠券
2020-09-15 15:45:59,060 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306861, 'orderSn': 'XS20200915154600669547', 'orderPayMoney': '148'}, 'msg': '成功'}
2020-09-15 15:45:59,219 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-15 15:45:59,232 - test_buyNowCreateOrder.py - [line:178] - INFO: 订单的优惠券：25.00
2020-09-15 15:45:59,232 - test_buyNowCreateOrder.py - [line:183] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-15 15:45:59,232 - test_buyNowCreateOrder.py - [line:187] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-15 15:45:59,232 - test_buyNowCreateOrder.py - [line:212] - INFO: 购买自营商品，预期的积分是：148
2020-09-15 15:45:59,232 - test_buyNowCreateOrder.py - [line:226] - INFO: 第6条用例执行通过
2020-09-15 15:45:59,404 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-15 15:45:59,404 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950269, 'memberCouponId': 3163}
2020-09-15 15:45:59,404 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L0用户，下单自营商品，使用指定商品可用优惠券
2020-09-15 15:45:59,726 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306862, 'orderSn': 'XS20200915154600547424', 'orderPayMoney': '148'}, 'msg': '成功'}
2020-09-15 15:45:59,884 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-15 15:45:59,895 - test_buyNowCreateOrder.py - [line:178] - INFO: 订单的优惠券：25.00
2020-09-15 15:45:59,896 - test_buyNowCreateOrder.py - [line:183] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-15 15:45:59,896 - test_buyNowCreateOrder.py - [line:187] - INFO: L0用户计算后的订单实付金额为：148.00; 优惠券金额50.00
2020-09-15 15:45:59,896 - test_buyNowCreateOrder.py - [line:212] - INFO: 购买自营商品，预期的积分是：148
2020-09-15 15:45:59,896 - test_buyNowCreateOrder.py - [line:226] - INFO: 第7条用例执行通过
2020-09-15 15:46:00,055 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第8条测试用例==================================
2020-09-15 15:46:00,055 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3687}
2020-09-15 15:46:00,056 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-15 15:46:00,364 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306863, 'orderSn': 'XS20200915154601100065', 'orderPayMoney': '148'}, 'msg': '成功'}
2020-09-15 15:46:00,523 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-15 15:46:00,534 - test_buyNowCreateOrder.py - [line:178] - INFO: 订单的优惠券：25.00
2020-09-15 15:46:00,534 - test_buyNowCreateOrder.py - [line:183] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-15 15:46:00,534 - test_buyNowCreateOrder.py - [line:192] - INFO: 订单实际金额：148.0000; 订单预期金额：142.0202020202020202020202020
2020-09-15 15:46:00,534 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第8条用例执行失败：False is not true
2020-09-15 15:46:00,720 - test_buyNowCreateOrder.py - [line:140] - INFO: ==================================开始执行第9条测试用例==================================
2020-09-15 15:46:00,721 - test_buyNowCreateOrder.py - [line:141] - INFO: 传参：{'priceId': 716, 'quantity': 2, 'addrId': 950252, 'memberCouponId': 3692}
2020-09-15 15:46:00,721 - test_buyNowCreateOrder.py - [line:142] - INFO: 测试用例名称：L1用户，下单自营商品
2020-09-15 15:46:01,049 - test_buyNowCreateOrder.py - [line:150] - INFO: 接口响应数据：{'code': 0, 'data': {'orderId': 54306864, 'orderSn': 'XS20200915154602514025', 'orderPayMoney': '148'}, 'msg': '成功'}
2020-09-15 15:46:01,208 - test_buyNowCreateOrder.py - [line:168] - INFO: 订单的原价格：99.00
2020-09-15 15:46:01,225 - test_buyNowCreateOrder.py - [line:178] - INFO: 订单的优惠券：25.00
2020-09-15 15:46:01,225 - test_buyNowCreateOrder.py - [line:183] - INFO: 订单的返利：5.979797979797979797979797980
2020-09-15 15:46:01,226 - test_buyNowCreateOrder.py - [line:192] - INFO: 订单实际金额：148.0000; 订单预期金额：142.0202020202020202020202020
2020-09-15 15:46:01,226 - test_buyNowCreateOrder.py - [line:229] - ERROR: 第9条用例执行失败：False is not true
2020-09-15 15:46:01,315 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-15 15:46:03,423 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-15 15:46:05,520 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-15 15:46:07,639 - test_getGoodsListByCouponId.py - [line:47] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-15 15:46:09,712 - test_login.py - [line:24] - INFO: ==================================开始执行第1条测试用例==================================
2020-09-15 15:46:09,771 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 0, 'msg': '成功'}
2020-09-15 15:46:09,771 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 0, 'data': {'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'memberDto': {'appVersion': '', 'addTime': 1586748558, 'partnerWeixinQrcode': '', 'userIdentity': 2, 'deviceNumber': '', 'uuid': '', 'nextExpAmount': 0, 'regionCityCode': 0, 'regionPrivinceCode': 0, 'wxminiformId': '', 'invitationCode': 'cpqqat', 'temporaryUserLevel': 0, 'longitude': '', 'regionPrivinceName': '', 'idevice': 3, 'ip': '122.225.200.195', 'istatus': 0, 'regionCountyCode': 0, 'isBindWx': 0, 'appDevice': 1, 'shareUserId': 0, 'regionAddress': '', 'isMobileBind': 1, 'regionCityName': '', 'wxname': '2gwwd', 'userType': 2, 'birthday': 0, 'recommendId': 1, 'expTotalAmount': 0, 'needUpdateCache': 0, 'latitude': '', 'pushUserid': '', 'regionName': '', 'pushChannelid': '', 'deviceSn': '', 'regionCountyName': '', 'userProp': 0, 'userLevel': 3, 'nickname': 'Ttt', 'intlAreaCode': 86, 'email': '', 'initRecommendId': 1, 'sex': '', 'mobile': '17682344521', 'weixinQrcode': '', 'sellerUserId': 0, 'partnerNickName': '', 'portrait': 'https://life-dt.oss-cn-hangzhou.aliyuncs.com/uinfo/4ad8396625f4e5dbf6b555906479e2f0/portrait2020066263z1.png?x-oss-process=style/q60', 'userId': 280800, 'bizUserId': 'P48109553564991470', 'realname': '', 'isBindBizUserId': 1, 'userToken': 'c50c772e1a3044443a71eab70a4f74fb', 'partner': '', 'regYsTime': 1590557473, 'bindWxNickName': '', 'idcard': '', 'isEmailBind': 0, 'investmentUrl': '', 'remarks': '', 'username': '17682344521'}, 'showVip': 0}, 'msg': '成功'}
2020-09-15 15:46:09,772 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-15 15:46:09,844 - test_login.py - [line:24] - INFO: ==================================开始执行第2条测试用例==================================
2020-09-15 15:46:09,873 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-15 15:46:09,873 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-15 15:46:09,874 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-15 15:46:09,902 - test_login.py - [line:24] - INFO: ==================================开始执行第3条测试用例==================================
2020-09-15 15:46:09,932 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 400, 'msg': '登录手机号不能为空！'}
2020-09-15 15:46:09,932 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '登录手机号不能为空！'}
2020-09-15 15:46:09,933 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-15 15:46:09,962 - test_login.py - [line:24] - INFO: ==================================开始执行第4条测试用例==================================
2020-09-15 15:46:09,997 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 400, 'msg': '密码不能为空'}
2020-09-15 15:46:09,997 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 400, 'data': None, 'msg': '密码不能为空'}
2020-09-15 15:46:09,997 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-15 15:46:10,027 - test_login.py - [line:24] - INFO: ==================================开始执行第5条测试用例==================================
2020-09-15 15:46:10,061 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12005, 'msg': '密码错误'}
2020-09-15 15:46:10,061 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12005, 'data': None, 'msg': '密码错误'}
2020-09-15 15:46:10,062 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-15 15:46:10,090 - test_login.py - [line:24] - INFO: ==================================开始执行第6条测试用例==================================
2020-09-15 15:46:10,122 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-15 15:46:10,122 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-15 15:46:10,123 - test_login.py - [line:41] - INFO: 用例执行通过
2020-09-15 15:46:10,155 - test_login.py - [line:24] - INFO: ==================================开始执行第7条测试用例==================================
2020-09-15 15:46:10,181 - test_login.py - [line:34] - INFO: 预期结果是：{'code': 12003, 'msg': '账号名不存在'}
2020-09-15 15:46:10,181 - test_login.py - [line:35] - INFO: 实际结果是：{'code': 12003, 'data': None, 'msg': '账号名不存在'}
2020-09-15 15:46:10,181 - test_login.py - [line:41] - INFO: 用例执行通过
